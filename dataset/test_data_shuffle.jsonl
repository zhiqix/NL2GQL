{"prompt": " 请问您能帮我找出年龄大于等于29.5岁的球员吗？我需要他们的ID和年龄信息。", "content": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "Find all the entities that 'Tim' likes, including layer 2-3 relationships, return relationships, and entities.", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "房室管畸形的症状有哪些？", "content": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='房室管畸形' return n1.symptom.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"动脉导管未闭\"]', '[\"右心衰竭\"]', '[\"大动脉错位\"]', '[\"室间隔缺损\"]', '[\"心房内形成混合血\"]', '[\"心脏增大\"]', '[\"心脏震颤\"]', '[\"气急\"]', '[\"衣玉品\"]', '[\"震颤\"]']"}
{"prompt": "遗传性耳瘘的预防措施有哪些？", "content": "MATCH (n:disease{name:\"遗传性耳瘘\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"本病属于染色体疾病，导致染色体畸形改变的病因不明确，可能和环境因素、遗传因素、饮食因素以及孕期的情绪、营养等具有一定的相关性，故本病无法直接预防。孕期应做到定期检查，若孩子有发育异常倾向，应及时做染色体筛查，明确后应及时行人工流产，以避免疾病患儿出生。日常生活中要注意营养合理，食物尽量做到多样化，多吃高蛋白、多维生素、低动物脂肪、易消化的食物及新鲜水果、蔬菜，不吃陈旧变质或刺激性的东西，少吃薰、烤、腌泡、油炸、过咸的食品，主食粗细粮搭配，以保证营养平衡。\"]']"}
{"prompt": "您好，请问您能帮我查找一下名称为'Spurs'的球队的名称属性吗？", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Identify entities with a 'liking' relationship with 'Tim Duncan' and a liking level greater than 90, and return the source entity name, target entity ID, target entity name, and liking level.", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "得了心脏病推荐吃什么药？", "content": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"依托红霉素片\"]', '[\"依托红霉素颗粒\"]', '[\"地高辛片\"]', '[\"琥乙红霉素片\"]', '[\"琥乙红霉素颗粒\"]']"}
{"prompt": "返回所有球员与其队友之间的关系。", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "尼古拉·瓦西勒娃的性别是什么？", "content": "MATCH (n:character{name:'尼古拉·瓦西勒娃'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"女\"]']"}
{"prompt": "请问您能帮我查找一下，从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 的关系，最多经过5个步骤可以到达的所有实体路径吗？然后按照路径长度进行排序，返回前10条路径。", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "找出名为'Tracy McGrady'的球员所'喜欢'的所有实体，且喜欢程度为90，返回这些实体及其关系。", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "找出 'Tracy McGrady' 喜欢的实体，再找出这些实体所喜欢的实体ID。", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": " 嘿，你能帮我找一下从 'Yao Ming' 到 'Tony Parker' 的最短路径吗？这个路径可以通过 '喜欢' 和 '服务' 的关系来连接，但是最多只能经过5个步骤。然后把路径信息给我返回一下，好吗？", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "Hello, I would like to check the entities that 'Tracy McGrady' likes, with a liking level of 90. Can you help me identify these entities and their relationships?", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "Find all entities that players named 'Kyrie Irving' like, including 2 to 3 hop relationships, and return all information.", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]"]}
{"prompt": "哈维·瑞吉比特从属于哪个组织？", "content": "MATCH (n:character{name:'哈维·瑞吉比特'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"罗马尼亚火龙保护区\" :group{name: \"罗马尼亚火龙保护区\"})]']"}
{"prompt": "马格纳斯·麦克唐纳的出生时间是什么？", "content": "LOOKUP ON character WHERE character.name=='马格纳斯·麦克唐纳' YIELD properties(vertex).born AS born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"早于20世纪60年代\"]']"}
{"prompt": "查找年龄等于40的球员，并返回这些球员的姓名。", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "您好，请帮我查找与 'Manu Ginobili' 有关系的实体，然后给我提供这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份' 和 '球员姓名'。", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "嘿，你能帮我把一条从'Tim Duncan'到'Tim Parker'的喜欢程度为99的边插入进去吗？还有一条从'Tim Parker'到'Tony Parker'的喜欢程度为90的边也要插入哦！", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find players aged 40 and return their names.", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "找出与 'Manu Ginobili' 有 '喜欢' 或 '队友' 关系，且若是 '喜欢' 则要求程度大于90的实体，并返回这些实体的喜欢程度、开始年份和名称。", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "与希思科特·巴巴里具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"希思科特·巴巴里\" OVER Kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Find the entities that Tony Parker likes, with a distance of 0 to 2 in both directions, and remove duplicates to return the IDs of these entities.", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "Return the names of the first two players, sorted by name.", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "得了戊型病毒性肝炎推荐吃什么药？", "content": "GO FROM \"戊型病毒性肝炎\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"利肝隆片\"]', '[\"强肝糖浆\"]', '[\"注射用促肝细胞生长素\"]', '[\"珍熊胆丸\"]', '[\"胸腺肽肠溶片\"]', '[\"苦参碱注射液\"]']"}
{"prompt": "返回所有球员的姓名和节点信息。", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": " 您好，请帮我查一下关于LeBron James所在球队的信息，球队名字是Cavaliers。能否告诉我路径、关系类型和球队名称呢？", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "无排卵性不孕症的易感人群是哪些？", "content": "MATCH (n:disease{name:\"无排卵性不孕症\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"女性\"]']"}
{"prompt": "Find players named 'Kyrie Irving' who have 2 to 3 hops of service or favorite entities, and return quantity statistics results.", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "返回名为'DeAndre Jordan'的球员节点。", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "Hey, can you help me find the people 'Tim Duncan' likes and the ones they like? I need to know the names of these people, namely 'Player', 'Friend', and 'FoF'.", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "查看和头痛相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"头痛\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"头痛\" :symptom{} :disease{})], [(\"头痛\")-[:no_eat@0{}]->(\"杏仁\"), (\"头痛\")-[:no_eat@0{}]->(\"泥鳅\"), (\"头痛\")-[:no_eat@0{}]->(\"白扁豆\"), (\"头痛\")-[:no_eat@0{}]->(\"腐竹\"), (\"头痛\")-[:need_check@0{}]->(\"眼底检查\"), (\"头痛\")-[:need_check@0{}]->(\"眼科检查\"), (\"头痛\")-[:need_check@0{}]->(\"神经系统检查\"), (\"头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"头痛\")-[:need_check@0{}]->(\"脑血流图\"), (\"头痛\")-[:need_check@0{}]->(\"脑血管造影\"), (\"头痛\")-[:need_check@0{}]->(\"血常规\"), (\"头痛\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"头痛\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"头痛\")-[:recommend_drug@0{}]->(\"二十五味珊瑚丸\"), (\"头痛\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"头痛\")-[:recommend_drug@0{}]->(\"加味藿香正气丸\"), (\"头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"头痛\")-[:recommend_drug@0{}]->(\"吲哚美辛肠溶片\"), (\"头痛\")-[:recommend_drug@0{}]->(\"呱西替柳干混悬剂\"), (\"头痛\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"头痛\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"头痛\")-[:recommend_drug@0{}]->(\"对乙酰氨基酚缓释片\"), (\"头痛\")-[:recommend_drug@0{}]->(\"川芎茶调颗粒\"), (\"头痛\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"头痛\")-[:recommend_drug@0{}]->(\"建曲\"), (\"头痛\")-[:recommend_drug@0{}]->(\"归脾丸\"), (\"头痛\")-[:recommend_drug@0{}]->(\"愈风宁心滴丸\"), (\"头痛\")-[:recommend_drug@0{}]->(\"感冒咳嗽颗粒\"), (\"头痛\")-[:recommend_drug@0{}]->(\"消炎退热颗粒\"), (\"头痛\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"头痛\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"头痛\")-[:recommend_drug@0{}]->(\"盐酸氟桂利嗪胶囊\"), (\"头痛\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"头痛\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"头痛\")-[:recommend_drug@0{}]->(\"风油精\"), (\"上颌窦炎\")-[:has_symptom@0{}]->(\"头痛\"), (\"偏头痛\")-[:has_symptom@0{}]->(\"头痛\"), (\"发热伴血小板减少综合征\")-[:has_symptom@0{}]->(\"头痛\"), (\"外伤后头痛\")-[:has_symptom@0{}]->(\"头痛\"), (\"急性丙肝\")-[:has_symptom@0{}]->(\"头痛\"), (\"感冒\")-[:has_symptom@0{}]->(\"头痛\"), (\"热咳\")-[:has_symptom@0{}]->(\"头痛\"), (\"疱疹性口腔炎\")-[:has_symptom@0{}]->(\"头痛\"), (\"病毒性肺炎\")-[:has_symptom@0{}]->(\"头痛\"), (\"筛窦炎\")-[:has_symptom@0{}]->(\"头痛\"), (\"肢端肥大症性心肌病\")-[:has_symptom@0{}]->(\"头痛\"), (\"肺癌转移\")-[:has_symptom@0{}]->(\"头痛\"), (\"脑炎\")-[:has_symptom@0{}]->(\"头痛\"), (\"脑癌\")-[:has_symptom@0{}]->(\"头痛\"), (\"血管性头痛\")-[:has_symptom@0{}]->(\"头痛\"), (\"血虚头痛\")-[:has_symptom@0{}]->(\"头痛\"), (\"透明隔囊肿\")-[:has_symptom@0{}]->(\"头痛\"), (\"风寒\")-[:has_symptom@0{}]->(\"头痛\"), (\"风寒头痛\")-[:has_symptom@0{}]->(\"头痛\"), (\"风热头痛\")-[:has_symptom@0{}]->(\"头痛\"), (\"鼻腔癌\")-[:has_symptom@0{}]->(\"头痛\"), (\"头痛\")-[:cure_department@0{}]->(\"神经内科\"), (\"头痛\")-[:cure_way@0{}]->(\"康复治疗\"), (\"头痛\")-[:cure_way@0{}]->(\"药物治疗\"), (\"头痛\")-[:do_eat@0{}]->(\"芝麻\"), (\"头痛\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"头痛\")-[:do_eat@0{}]->(\"鸭肉\"), (\"头痛\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"头痛\")-[:recommend_eat@0{}]->(\"三鲜冬瓜汤\"), (\"头痛\")-[:recommend_eat@0{}]->(\"冬瓜汤\"), (\"头痛\")-[:recommend_eat@0{}]->(\"冬瓜粥\"), (\"头痛\")-[:recommend_eat@0{}]->(\"凉拌莲藕\"), (\"头痛\")-[:recommend_eat@0{}]->(\"油焖茄子\"), (\"头痛\")-[:recommend_eat@0{}]->(\"清拌茄子\"), (\"头痛\")-[:recommend_eat@0{}]->(\"紫茄子粥\"), (\"头痛\")-[:recommend_eat@0{}]->(\"红豆莲藕粥\"), (\"头痛\")-[:has_symptom@0{}]->(\"太阳穴痛\"), (\"头痛\")-[:has_symptom@0{}]->(\"太阳穴胀痛\"), (\"头痛\")-[:has_symptom@0{}]->(\"慢性头痛\"), (\"头痛\")-[:has_symptom@0{}]->(\"眩晕\"), (\"头痛\")-[:has_symptom@0{}]->(\"紧张性头痛\"), (\"头痛\")-[:has_symptom@0{}]->(\"紧箍咒一样头紧\"), (\"头痛\")-[:has_symptom@0{}]->(\"重压感、紧箍感...\"), (\"头痛\")-[:has_symptom@0{}]->(\"间歇性头痛\"), (\"头痛\")-[:has_symptom@0{}]->(\"颅外头痛\"), (\"头痛\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"B疱疹病毒感染\")-[:accompany_with@0{}]->(\"头痛\"), (\"一氧化碳中毒后迟发性脑病\")-[:accompany_with@0{}]->(\"头痛\"), (\"上颌窦炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"中暑\")-[:accompany_with@0{}]->(\"头痛\"), (\"乳溢症\")-[:accompany_with@0{}]->(\"头痛\"), (\"五脏痹\")-[:accompany_with@0{}]->(\"头痛\"), (\"偏头痛\")-[:accompany_with@0{}]->(\"头痛\"), (\"儿童腺样体肥大\")-[:accompany_with@0{}]->(\"头痛\"), (\"凉燥\")-[:accompany_with@0{}]->(\"头痛\"), (\"创伤性鼻中隔穿孔\")-[:accompany_with@0{}]->(\"头痛\"), (\"副神经节起源的肿瘤\")-[:accompany_with@0{}]->(\"头痛\"), (\"化脓性角膜炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"发疱性甲虫皮炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"咳嗽晕厥综合征\")-[:accompany_with@0{}]->(\"头痛\"), (\"围绝经期综合征\")-[:accompany_with@0{}]->(\"头痛\"), (\"复发性阿弗他溃疡\")-[:accompany_with@0{}]->(\"头痛\"), (\"外阴象皮肿\")-[:accompany_with@0{}]->(\"头痛\"), (\"大汗腺癌\")-[:accompany_with@0{}]->(\"头痛\"), (\"太阳中风\")-[:accompany_with@0{}]->(\"头痛\"), (\"女子梦交\")-[:accompany_with@0{}]->(\"头痛\"), (\"小儿原发性甲状旁腺功能亢进症\")-[:accompany_with@0{}]->(\"头痛\"), (\"小儿急性非淋巴细胞性白血病\")-[:accompany_with@0{}]->(\"头痛\"), (\"小儿法洛四联症\")-[:accompany_with@0{}]->(\"头痛\"), (\"小儿肾上腺皮质与髓质增生并存综合征\")-[:accompany_with@0{}]->(\"头痛\"), (\"小儿血友病\")-[:accompany_with@0{}]->(\"头痛\"), (\"干酪性鼻炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"往来寒热\")-[:accompany_with@0{}]->(\"头痛\"), (\"急性出血性结膜炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"急性肾功能衰竭\")-[:accompany_with@0{}]->(\"头痛\"), (\"恐缩症\")-[:accompany_with@0{}]->(\"头痛\"), (\"慢性心力衰竭\")-[:accompany_with@0{}]->(\"头痛\"), (\"抑郁性神经症\")-[:accompany_with@0{}]->(\"头痛\"), (\"旋转隐斜\")-[:accompany_with@0{}]->(\"头痛\"), (\"梅尼埃病\")-[:accompany_with@0{}]->(\"头痛\"), (\"氰化物中毒\")-[:accompany_with@0{}]->(\"头痛\"), (\"混合结缔组织病\")-[:accompany_with@0{}]->(\"头痛\"), (\"牙痈\")-[:accompany_with@0{}]->(\"头痛\"), (\"猛兽伤\")-[:accompany_with@0{}]->(\"头痛\"), (\"猫眼疮\")-[:accompany_with@0{}]->(\"头痛\"), (\"男性性早熟\")-[:accompany_with@0{}]->(\"头痛\"), (\"痧气\")-[:accompany_with@0{}]->(\"头痛\"), (\"痰浊头痛\")-[:accompany_with@0{}]->(\"头痛\"), (\"瘀证\")-[:accompany_with@0{}]->(\"头痛\"), (\"白塞病\")-[:accompany_with@0{}]->(\"头痛\"), (\"眼丹\")-[:accompany_with@0{}]->(\"头痛\"), (\"眼球穿通伤\")-[:accompany_with@0{}]->(\"头痛\"), (\"眼眶脓肿\")-[:accompany_with@0{}]->(\"头痛\"), (\"眼肌麻痹性偏头痛\")-[:accompany_with@0{}]->(\"头痛\"), (\"硫化氢中毒\")-[:accompany_with@0{}]->(\"头痛\"), (\"神昏\")-[:accompany_with@0{}]->(\"头痛\"), (\"神经衰弱\")-[:accompany_with@0{}]->(\"头痛\"), (\"秋燥\")-[:accompany_with@0{}]->(\"头痛\"), (\"科干综合征\")-[:accompany_with@0{}]->(\"头痛\"), (\"筛窦炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"红皮性银屑病\")-[:accompany_with@0{}]->(\"头痛\"), (\"结核性溃疡\")-[:accompany_with@0{}]->(\"头痛\"), (\"老年人蛛网膜下腔出血\")-[:accompany_with@0{}]->(\"头痛\"), (\"耳疔\")-[:accompany_with@0{}]->(\"头痛\"), (\"耳疖\")-[:accompany_with@0{}]->(\"头痛\"), (\"耳疮\")-[:accompany_with@0{}]->(\"头痛\"), (\"肾上腺素中毒\")-[:accompany_with@0{}]->(\"头痛\"), (\"肾功能不全\")-[:accompany_with@0{}]->(\"头痛\"), (\"胃肠型食物中毒\")-[:accompany_with@0{}]->(\"头痛\"), (\"胃肠道功能紊乱\")-[:accompany_with@0{}]->(\"头痛\"), (\"脊髓火器伤\")-[:accompany_with@0{}]->(\"头痛\"), (\"脑水肿\")-[:accompany_with@0{}]->(\"头痛\"), (\"腹膜后纤维化\")-[:accompany_with@0{}]->(\"头痛\"), (\"良性脂肪母细胞瘤\")-[:accompany_with@0{}]->(\"头痛\"), (\"蓐劳\")-[:accompany_with@0{}]->(\"头痛\"), (\"蜈蚣蜇伤\")-[:accompany_with@0{}]->(\"头痛\"), (\"血管母细胞瘤\")-[:accompany_with@0{}]->(\"头痛\"), (\"过敏性血管炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"透明隔囊肿\")-[:accompany_with@0{}]->(\"头痛\"), (\"铊中毒\")-[:accompany_with@0{}]->(\"头痛\"), (\"阳明头痛\")-[:accompany_with@0{}]->(\"头痛\"), (\"阴道美丽筒线虫病\")-[:accompany_with@0{}]->(\"头痛\"), (\"隐翅虫皮炎\")-[:accompany_with@0{}]->(\"头痛\"), (\"颈内动脉海绵窦瘘\")-[:accompany_with@0{}]->(\"头痛\"), (\"颞下间隙感染\")-[:accompany_with@0{}]->(\"头痛\"), (\"颞骨和下颔骨关节异常\")-[:accompany_with@0{}]->(\"头痛\"), (\"高泌乳素血症\")-[:accompany_with@0{}]->(\"头痛\"), (\"高血压眼病\")-[:accompany_with@0{}]->(\"头痛\"), (\"鼻中隔穿孔\")-[:accompany_with@0{}]->(\"头痛\"), (\"鼻石\")-[:accompany_with@0{}]->(\"头痛\"), (\"鼻腔囊肿\")-[:accompany_with@0{}]->(\"头痛\"), (\"头痛\")-[:common_drug@0{}]->(\"二十五味珊瑚丸\"), (\"头痛\")-[:common_drug@0{}]->(\"盐酸氟桂利嗪胶囊\")]]', '[[(\"神经系统检查\" :check{}), (\"脑电图检查\" :check{}), (\"加味藿香正气丸\" :drug{}), (\"酚咖片\" :drug{}), (\"感冒\" :disease{}), (\"肺癌转移\" :disease{}), (\"冬瓜粥\" :food{}), (\"凉拌莲藕\" :food{}), (\"一氧化碳中毒后迟发性脑病\" :disease{}), (\"咳嗽晕厥综合征\" :disease{}), (\"神昏\" :disease{}), (\"耳疮\" :disease{}), (\"肾上腺素中毒\" :disease{}), (\"阳明头痛\" :disease{}), (\"颞骨和下颔骨关节异常\" :disease{}), (\"高血压眼病\" :disease{}), (\"泥鳅\" :food{}), (\"呱西替柳干混悬剂\" :drug{}), (\"甲芬那酸片\" :drug{}), (\"风油精\" :drug{}), (\"偏头痛\" :symptom{} :disease{}), (\"发热伴血小板减少综合征\" :disease{}), (\"血管性头痛\" :disease{}), (\"鸡蛋\" :food{}), (\"B疱疹病毒感染\" :disease{}), (\"乳溢症\" :disease{}), (\"女子梦交\" :disease{}), (\"小儿肾上腺皮质与髓质增生并存综合征\" :disease{}), (\"急性肾功能衰竭\" :disease{}), (\"抑郁性神经症\" :disease{}), (\"猫眼疮\" :disease{}), (\"痰浊头痛\" :disease{}), (\"白塞病\" :disease{}), (\"蓐劳\" :disease{}), (\"蜈蚣蜇伤\" :disease{}), (\"隐翅虫皮炎\" :disease{}), (\"高泌乳素血症\" :disease{}), (\"颅脑MRI检查\" :check{}), (\"二十五味珊瑚丸\" :drug{}), (\"双氯芬酸钠肠溶片\" :drug{}), (\"川芎茶调颗粒\" :drug{}), (\"清凉油\" :drug{}), (\"盐酸氟桂利嗪胶囊\" :drug{} :producer{}), (\"太阳穴胀痛\" :symptom{}), (\"儿童腺样体肥大\" :disease{}), (\"化脓性角膜炎\" :disease{}), (\"发疱性甲虫皮炎\" :disease{}), (\"外阴象皮肿\" :disease{}), (\"小儿急性非淋巴细胞性白血病\" :disease{}), (\"小儿血友病\" :disease{}), (\"急性出血性结膜炎\" :disease{}), (\"梅尼埃病\" :disease{}), (\"氰化物中毒\" :disease{}), (\"牙痈\" :disease{}), (\"鼻中隔穿孔\" :symptom{} :disease{}), (\"腐竹\" :food{}), (\"脑血流图\" :check{}), (\"建曲\" :drug{}), (\"愈风宁心滴丸\" :drug{}), (\"消炎退热颗粒\" :drug{}), (\"热咳\" :disease{}), (\"血虚头痛\" :disease{}), (\"透明隔囊肿\" :disease{}), (\"风寒\" :disease{}), (\"芝麻\" :food{}), (\"三鲜冬瓜汤\" :food{}), (\"清拌茄子\" :food{}), (\"红豆莲藕粥\" :food{}), (\"眼眶脓肿\" :disease{}), (\"硫化氢中毒\" :disease{}), (\"红皮性银屑病\" :disease{}), (\"结核性溃疡\" :disease{}), (\"胃肠型食物中毒\" :disease{}), (\"阴道美丽筒线虫病\" :disease{}), (\"颈内动脉海绵窦瘘\" :disease{}), (\"白扁豆\" :food{}), (\"眼底检查\" :check{}), (\"吲哚美辛肠溶片\" :drug{}), (\"天麻素胶囊\" :drug{}), (\"感冒咳嗽颗粒\" :drug{}), (\"上颌窦炎\" :disease{}), (\"疱疹性口腔炎\" :disease{}), (\"鸭肉\" :food{}), (\"油焖茄子\" :food{}), (\"紧张性头痛\" :symptom{} :disease{}), (\"副神经节起源的肿瘤\" :disease{}), (\"小儿原发性甲状旁腺功能亢进症\" :disease{}), (\"耳疔\" :disease{}), (\"胃肠道功能紊乱\" :disease{}), (\"脊髓火器伤\" :disease{}), (\"腹膜后纤维化\" :symptom{} :disease{}), (\"良性脂肪母细胞瘤\" :disease{}), (\"血管母细胞瘤\" :disease{}), (\"铊中毒\" :disease{}), (\"脑血管造影\" :check{}), (\"颅脑CT检查\" :check{}), (\"藿香正气片\" :drug{}), (\"急性丙肝\" :disease{}), (\"紫茄子粥\" :food{}), (\"间歇性头痛\" :symptom{}), (\"大汗腺癌\" :disease{}), (\"旋转隐斜\" :disease{}), (\"瘀证\" :disease{}), (\"眼肌麻痹性偏头痛\" :disease{}), (\"神经衰弱\" :disease{}), (\"筛窦炎\" :disease{}), (\"肢端肥大症性心肌病\" :disease{}), (\"脑炎\" :disease{}), (\"风寒头痛\" :disease{}), (\"风热头痛\" :disease{}), (\"鼻腔癌\" :disease{}), (\"药物治疗\" :cure{}), (\"眩晕\" :symptom{} :disease{}), (\"意识障碍\" :symptom{} :disease{}), (\"五脏痹\" :disease{}), (\"凉燥\" :disease{}), (\"干酪性鼻炎\" :disease{}), (\"恐缩症\" :disease{}), (\"慢性心力衰竭\" :disease{}), (\"眼丹\" :disease{}), (\"秋燥\" :disease{}), (\"老年人蛛网膜下腔出血\" :disease{}), (\"耳疖\" :disease{}), (\"过敏性血管炎\" :disease{}), (\"颞下间隙感染\" :disease{}), (\"眼科检查\" :check{}), (\"元胡止痛胶囊\" :drug{}), (\"夏桑菊颗粒\" :drug{} :producer{}), (\"对乙酰氨基酚缓释片\" :drug{}), (\"病毒性肺炎\" :disease{}), (\"冬瓜汤\" :food{}), (\"复发性阿弗他溃疡\" :disease{}), (\"小儿法洛四联症\" :disease{}), (\"往来寒热\" :disease{}), (\"男性性早熟\" :symptom{} :disease{}), (\"肾功能不全\" :disease{}), (\"脑水肿\" :symptom{} :disease{}), (\"鼻石\" :disease{}), (\"杏仁\" :food{}), (\"血常规\" :check{}), (\"布洛芬缓释胶囊\" :drug{}), (\"外伤后头痛\" :disease{}), (\"脑癌\" :disease{}), (\"神经内科\" :department{}), (\"康复治疗\" :cure{}), (\"颅外头痛\" :symptom{}), (\"中暑\" :symptom{} :disease{}), (\"创伤性鼻中隔穿孔\" :disease{}), (\"围绝经期综合征\" :disease{}), (\"太阳中风\" :disease{}), (\"猛兽伤\" :disease{}), (\"眼球穿通伤\" :disease{}), (\"科干综合征\" :disease{}), (\"归脾丸\" :drug{}), (\"鸭蛋\" :food{}), (\"太阳穴痛\" :symptom{}), (\"慢性头痛\" :symptom{}), (\"紧箍咒一样头紧\" :symptom{}), (\"重压感、紧箍感...\" :symptom{}), (\"混合结缔组织病\" :disease{}), (\"痧气\" :disease{}), (\"鼻腔囊肿\" :disease{})], [(\"感冒\")-[:no_eat@0{}]->(\"白扁豆\"), (\"感冒\")-[:need_check@0{}]->(\"血常规\"), (\"感冒\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"感冒\")-[:recommend_drug@0{}]->(\"风油精\"), (\"感冒\")-[:do_eat@0{}]->(\"芝麻\"), (\"感冒\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"肺癌转移\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"肺癌转移\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肺癌转移\")-[:do_eat@0{}]->(\"芝麻\"), (\"一氧化碳中毒后迟发性脑病\")-[:need_check@0{}]->(\"脑电图检查\"), (\"一氧化碳中毒后迟发性脑病\")-[:need_check@0{}]->(\"血常规\"), (\"一氧化碳中毒后迟发性脑病\")-[:cure_department@0{}]->(\"神经内科\"), (\"一氧化碳中毒后迟发性脑病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"一氧化碳中毒后迟发性脑病\")-[:do_eat@0{}]->(\"芝麻\"), (\"一氧化碳中毒后迟发性脑病\")-[:has_symptom@0{}]->(\"眩晕\"), (\"一氧化碳中毒后迟发性脑病\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"一氧化碳中毒后迟发性脑病\")-[:accompany_with@0{}]->(\"眩晕\"), (\"咳嗽晕厥综合征\")-[:cure_way@0{}]->(\"康复治疗\"), (\"咳嗽晕厥综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神昏\")-[:need_check@0{}]->(\"脑电图检查\"), (\"神昏\")-[:need_check@0{}]->(\"血常规\"), (\"神昏\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"神昏\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神昏\")-[:accompany_with@0{}]->(\"中暑\"), (\"耳疮\")-[:cure_way@0{}]->(\"康复治疗\"), (\"耳疮\")-[:cure_way@0{}]->(\"药物治疗\"), (\"耳疮\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"耳疮\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"肾上腺素中毒\")-[:need_check@0{}]->(\"神经系统检查\"), (\"肾上腺素中毒\")-[:need_check@0{}]->(\"血常规\"), (\"肾上腺素中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"阳明头痛\")-[:need_check@0{}]->(\"血常规\"), (\"阳明头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"颞骨和下颔骨关节异常\")-[:cure_way@0{}]->(\"康复治疗\"), (\"颞骨和下颔骨关节异常\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"颞骨和下颔骨关节异常\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"高血压眼病\")-[:no_eat@0{}]->(\"鸭肉\"), (\"高血压眼病\")-[:need_check@0{}]->(\"眼底检查\"), (\"高血压眼病\")-[:need_check@0{}]->(\"眼科检查\"), (\"高血压眼病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高血压眼病\")-[:do_eat@0{}]->(\"芝麻\"), (\"偏头痛\")-[:no_eat@0{}]->(\"芝麻\"), (\"偏头痛\")-[:need_check@0{}]->(\"眼科检查\"), (\"偏头痛\")-[:need_check@0{}]->(\"神经系统检查\"), (\"偏头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"偏头痛\")-[:need_check@0{}]->(\"脑血管造影\"), (\"偏头痛\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"偏头痛\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"偏头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"偏头痛\")-[:cure_department@0{}]->(\"神经内科\"), (\"偏头痛\")-[:cure_way@0{}]->(\"康复治疗\"), (\"偏头痛\")-[:cure_way@0{}]->(\"药物治疗\"), (\"偏头痛\")-[:has_symptom@0{}]->(\"意识障碍\"), (\"偏头痛\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"偏头痛\")-[:accompany_with@0{}]->(\"眩晕\"), (\"发热伴血小板减少综合征\")-[:need_check@0{}]->(\"血常规\"), (\"发热伴血小板减少综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"血管性头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"血管性头痛\")-[:need_check@0{}]->(\"脑血管造影\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"对乙酰氨基酚缓释片\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"川芎茶调颗粒\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"建曲\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"愈风宁心滴丸\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"感冒咳嗽颗粒\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"血管性头痛\")-[:recommend_drug@0{}]->(\"风油精\"), (\"血管性头痛\")-[:cure_department@0{}]->(\"神经内科\"), (\"血管性头痛\")-[:accompany_with@0{}]->(\"眩晕\"), (\"B疱疹病毒感染\")-[:do_eat@0{}]->(\"芝麻\"), (\"B疱疹病毒感染\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"乳溢症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"乳溢症\")-[:do_eat@0{}]->(\"白扁豆\"), (\"乳溢症\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"女子梦交\")-[:need_check@0{}]->(\"神经系统检查\"), (\"女子梦交\")-[:need_check@0{}]->(\"血常规\"), (\"女子梦交\")-[:cure_way@0{}]->(\"药物治疗\"), (\"女子梦交\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"女子梦交\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"小儿肾上腺皮质与髓质增生并存综合征\")-[:need_check@0{}]->(\"血常规\"), (\"小儿肾上腺皮质与髓质增生并存综合征\")-[:cure_way@0{}]->(\"康复治疗\"), (\"急性肾功能衰竭\")-[:need_check@0{}]->(\"血常规\"), (\"急性肾功能衰竭\")-[:cure_way@0{}]->(\"康复治疗\"), (\"急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾功能衰竭\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"抑郁性神经症\")-[:no_eat@0{}]->(\"白扁豆\"), (\"抑郁性神经症\")-[:need_check@0{}]->(\"神经系统检查\"), (\"抑郁性神经症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"抑郁性神经症\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"猫眼疮\")-[:cure_way@0{}]->(\"药物治疗\"), (\"痰浊头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"痰浊头痛\")-[:need_check@0{}]->(\"脑血管造影\"), (\"痰浊头痛\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"痰浊头痛\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"对乙酰氨基酚缓释片\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"川芎茶调颗粒\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"建曲\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"愈风宁心滴丸\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"感冒咳嗽颗粒\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"痰浊头痛\")-[:recommend_drug@0{}]->(\"风油精\"), (\"白塞病\")-[:no_eat@0{}]->(\"白扁豆\"), (\"白塞病\")-[:need_check@0{}]->(\"血常规\"), (\"白塞病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"白塞病\")-[:do_eat@0{}]->(\"芝麻\"), (\"白塞病\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"蓐劳\")-[:need_check@0{}]->(\"血常规\"), (\"蓐劳\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蓐劳\")-[:do_eat@0{}]->(\"芝麻\"), (\"蓐劳\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"蓐劳\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"蜈蚣蜇伤\")-[:need_check@0{}]->(\"血常规\"), (\"蜈蚣蜇伤\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"蜈蚣蜇伤\")-[:recommend_drug@0{}]->(\"风油精\"), (\"蜈蚣蜇伤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蜈蚣蜇伤\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"蜈蚣蜇伤\")-[:common_drug@0{}]->(\"清凉油\"), (\"蜈蚣蜇伤\")-[:common_drug@0{}]->(\"风油精\"), (\"隐翅虫皮炎\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"隐翅虫皮炎\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"隐翅虫皮炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"隐翅虫皮炎\")-[:do_eat@0{}]->(\"鸭肉\"), (\"高泌乳素血症\")-[:need_check@0{}]->(\"眼底检查\"), (\"高泌乳素血症\")-[:need_check@0{}]->(\"眼科检查\"), (\"高泌乳素血症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高泌乳素血症\")-[:do_eat@0{}]->(\"杏仁\"), (\"高泌乳素血症\")-[:do_eat@0{}]->(\"芝麻\"), (\"高泌乳素血症\")-[:accompany_with@0{}]->(\"偏头痛\"), (\"儿童腺样体肥大\")-[:cure_way@0{}]->(\"康复治疗\"), (\"儿童腺样体肥大\")-[:cure_way@0{}]->(\"药物治疗\"), (\"化脓性角膜炎\")-[:no_eat@0{}]->(\"杏仁\"), (\"化脓性角膜炎\")-[:no_eat@0{}]->(\"腐竹\"), (\"化脓性角膜炎\")-[:no_eat@0{}]->(\"鸡蛋\"), (\"化脓性角膜炎\")-[:need_check@0{}]->(\"眼科检查\"), (\"化脓性角膜炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"化脓性角膜炎\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"化脓性角膜炎\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"发疱性甲虫皮炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"外阴象皮肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿急性非淋巴细胞性白血病\")-[:no_eat@0{}]->(\"白扁豆\"), (\"小儿急性非淋巴细胞性白血病\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿急性非淋巴细胞性白血病\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"小儿急性非淋巴细胞性白血病\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"小儿血友病\")-[:no_eat@0{}]->(\"白扁豆\"), (\"小儿血友病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性出血性结膜炎\")-[:need_check@0{}]->(\"眼科检查\"), (\"急性出血性结膜炎\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"急性出血性结膜炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性出血性结膜炎\")-[:do_eat@0{}]->(\"杏仁\"), (\"梅尼埃病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"梅尼埃病\")-[:do_eat@0{}]->(\"杏仁\"), (\"梅尼埃病\")-[:has_symptom@0{}]->(\"眩晕\"), (\"氰化物中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"牙痈\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"牙痈\")-[:cure_way@0{}]->(\"药物治疗\"), (\"鼻中隔穿孔\")-[:no_eat@0{}]->(\"白扁豆\"), (\"鼻中隔穿孔\")-[:cure_way@0{}]->(\"康复治疗\"), (\"鼻中隔穿孔\")-[:cure_way@0{}]->(\"药物治疗\"), (\"鼻中隔穿孔\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"热咳\")-[:need_check@0{}]->(\"血常规\"), (\"热咳\")-[:cure_way@0{}]->(\"药物治疗\"), (\"热咳\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"热咳\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"血虚头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"血虚头痛\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"血虚头痛\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"血虚头痛\")-[:has_symptom@0{}]->(\"眩晕\"), (\"血虚头痛\")-[:accompany_with@0{}]->(\"眩晕\"), (\"透明隔囊肿\")-[:need_check@0{}]->(\"脑电图检查\"), (\"透明隔囊肿\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"透明隔囊肿\")-[:has_symptom@0{}]->(\"意识障碍\"), (\"风寒\")-[:need_check@0{}]->(\"血常规\"), (\"风寒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"眼眶脓肿\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"眼眶脓肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"硫化氢中毒\")-[:no_eat@0{}]->(\"白扁豆\"), (\"硫化氢中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"硫化氢中毒\")-[:do_eat@0{}]->(\"芝麻\"), (\"硫化氢中毒\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"红皮性银屑病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"结核性溃疡\")-[:no_eat@0{}]->(\"杏仁\"), (\"结核性溃疡\")-[:no_eat@0{}]->(\"白扁豆\"), (\"结核性溃疡\")-[:cure_way@0{}]->(\"康复治疗\"), (\"结核性溃疡\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"结核性溃疡\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"胃肠型食物中毒\")-[:need_check@0{}]->(\"血常规\"), (\"胃肠型食物中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"阴道美丽筒线虫病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"颈内动脉海绵窦瘘\")-[:no_eat@0{}]->(\"鸭肉\"), (\"颈内动脉海绵窦瘘\")-[:no_eat@0{}]->(\"鸭蛋\"), (\"颈内动脉海绵窦瘘\")-[:cure_department@0{}]->(\"神经内科\"), (\"颈内动脉海绵窦瘘\")-[:recommend_eat@0{}]->(\"冬瓜粥\"), (\"上颌窦炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"疱疹性口腔炎\")-[:need_check@0{}]->(\"血常规\"), (\"疱疹性口腔炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"紧张性头痛\")-[:no_eat@0{}]->(\"泥鳅\"), (\"紧张性头痛\")-[:no_eat@0{}]->(\"白扁豆\"), (\"紧张性头痛\")-[:need_check@0{}]->(\"神经系统检查\"), (\"紧张性头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"紧张性头痛\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"紧张性头痛\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"紧张性头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"紧张性头痛\")-[:cure_department@0{}]->(\"神经内科\"), (\"紧张性头痛\")-[:cure_way@0{}]->(\"康复治疗\"), (\"紧张性头痛\")-[:cure_way@0{}]->(\"药物治疗\"), (\"紧张性头痛\")-[:do_eat@0{}]->(\"芝麻\"), (\"紧张性头痛\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"紧张性头痛\")-[:do_eat@0{}]->(\"鸭肉\"), (\"紧张性头痛\")-[:has_symptom@0{}]->(\"紧箍咒一样头紧\"), (\"副神经节起源的肿瘤\")-[:cure_way@0{}]->(\"康复治疗\"), (\"副神经节起源的肿瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿原发性甲状旁腺功能亢进症\")-[:need_check@0{}]->(\"血常规\"), (\"小儿原发性甲状旁腺功能亢进症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"耳疔\")-[:cure_way@0{}]->(\"康复治疗\"), (\"耳疔\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胃肠道功能紊乱\")-[:no_eat@0{}]->(\"白扁豆\"), (\"胃肠道功能紊乱\")-[:need_check@0{}]->(\"血常规\"), (\"胃肠道功能紊乱\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊髓火器伤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊髓火器伤\")-[:do_eat@0{}]->(\"芝麻\"), (\"脊髓火器伤\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"腹膜后纤维化\")-[:need_check@0{}]->(\"血常规\"), (\"腹膜后纤维化\")-[:cure_way@0{}]->(\"康复治疗\"), (\"腹膜后纤维化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"腹膜后纤维化\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"良性脂肪母细胞瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"良性脂肪母细胞瘤\")-[:do_eat@0{}]->(\"芝麻\"), (\"血管母细胞瘤\")-[:no_eat@0{}]->(\"杏仁\"), (\"血管母细胞瘤\")-[:no_eat@0{}]->(\"腐竹\"), (\"血管母细胞瘤\")-[:cure_way@0{}]->(\"康复治疗\"), (\"血管母细胞瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"铊中毒\")-[:need_check@0{}]->(\"眼底检查\"), (\"铊中毒\")-[:need_check@0{}]->(\"神经系统检查\"), (\"铊中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性丙肝\")-[:cure_way@0{}]->(\"药物治疗\"), (\"大汗腺癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"大汗腺癌\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"旋转隐斜\")-[:no_eat@0{}]->(\"白扁豆\"), (\"旋转隐斜\")-[:no_eat@0{}]->(\"腐竹\"), (\"旋转隐斜\")-[:need_check@0{}]->(\"眼科检查\"), (\"旋转隐斜\")-[:cure_way@0{}]->(\"康复治疗\"), (\"旋转隐斜\")-[:do_eat@0{}]->(\"芝麻\"), (\"旋转隐斜\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"瘀证\")-[:need_check@0{}]->(\"血常规\"), (\"瘀证\")-[:cure_way@0{}]->(\"药物治疗\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"对乙酰氨基酚缓释片\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"川芎茶调颗粒\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"建曲\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"愈风宁心滴丸\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"感冒咳嗽颗粒\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"眼肌麻痹性偏头痛\")-[:recommend_drug@0{}]->(\"风油精\"), (\"眼肌麻痹性偏头痛\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神经衰弱\")-[:no_eat@0{}]->(\"白扁豆\"), (\"神经衰弱\")-[:need_check@0{}]->(\"神经系统检查\"), (\"神经衰弱\")-[:need_check@0{}]->(\"脑电图检查\"), (\"神经衰弱\")-[:need_check@0{}]->(\"血常规\"), (\"神经衰弱\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"神经衰弱\")-[:cure_department@0{}]->(\"神经内科\"), (\"神经衰弱\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神经衰弱\")-[:has_symptom@0{}]->(\"紧张性头痛\"), (\"神经衰弱\")-[:has_symptom@0{}]->(\"紧箍咒一样头紧\"), (\"筛窦炎\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"肢端肥大症性心肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脑炎\")-[:need_check@0{}]->(\"神经系统检查\"), (\"脑炎\")-[:need_check@0{}]->(\"脑电图检查\"), (\"脑炎\")-[:need_check@0{}]->(\"血常规\"), (\"脑炎\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"脑炎\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"脑炎\")-[:cure_department@0{}]->(\"神经内科\"), (\"脑炎\")-[:cure_way@0{}]->(\"康复治疗\"), (\"脑炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脑炎\")-[:has_symptom@0{}]->(\"意识障碍\"), (\"风寒头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"风寒头痛\")-[:need_check@0{}]->(\"脑血流图\"), (\"风寒头痛\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"风寒头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"风寒头痛\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"风寒头痛\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"风热头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"风热头痛\")-[:need_check@0{}]->(\"血常规\"), (\"风热头痛\")-[:recommend_drug@0{}]->(\"双氯芬酸钠肠溶片\"), (\"风热头痛\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"风热头痛\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"鼻腔癌\")-[:need_check@0{}]->(\"血常规\"), (\"鼻腔癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"鼻腔癌\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"眩晕\")-[:need_check@0{}]->(\"神经系统检查\"), (\"眩晕\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"眩晕\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"眩晕\")-[:recommend_drug@0{}]->(\"风油精\"), (\"眩晕\")-[:cure_department@0{}]->(\"神经内科\"), (\"眩晕\")-[:cure_way@0{}]->(\"药物治疗\"), (\"眩晕\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"意识障碍\")-[:no_eat@0{}]->(\"白扁豆\"), (\"意识障碍\")-[:no_eat@0{}]->(\"腐竹\"), (\"意识障碍\")-[:need_check@0{}]->(\"神经系统检查\"), (\"意识障碍\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"意识障碍\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"意识障碍\")-[:cure_department@0{}]->(\"神经内科\"), (\"意识障碍\")-[:cure_way@0{}]->(\"康复治疗\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"对乙酰氨基酚缓释片\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"川芎茶调颗粒\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"建曲\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"愈风宁心滴丸\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"感冒咳嗽颗粒\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"五脏痹\")-[:recommend_drug@0{}]->(\"风油精\"), (\"凉燥\")-[:cure_way@0{}]->(\"药物治疗\"), (\"凉燥\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"凉燥\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"凉燥\")-[:recommend_eat@0{}]->(\"冬瓜粥\"), (\"干酪性鼻炎\")-[:no_eat@0{}]->(\"杏仁\"), (\"干酪性鼻炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"干酪性鼻炎\")-[:has_symptom@0{}]->(\"鼻中隔穿孔\"), (\"恐缩症\")-[:no_eat@0{}]->(\"白扁豆\"), (\"恐缩症\")-[:need_check@0{}]->(\"神经系统检查\"), (\"恐缩症\")-[:need_check@0{}]->(\"脑电图检查\"), (\"恐缩症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"恐缩症\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"恐缩症\")-[:do_eat@0{}]->(\"鸭肉\"), (\"恐缩症\")-[:has_symptom@0{}]->(\"意识障碍\"), (\"恐缩症\")-[:has_symptom@0{}]->(\"眩晕\"), (\"慢性心力衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性心力衰竭\")-[:do_eat@0{}]->(\"芝麻\"), (\"眼丹\")-[:need_check@0{}]->(\"眼底检查\"), (\"眼丹\")-[:need_check@0{}]->(\"眼科检查\"), (\"秋燥\")-[:cure_way@0{}]->(\"药物治疗\"), (\"秋燥\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"秋燥\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"老年人蛛网膜下腔出血\")-[:need_check@0{}]->(\"脑血管造影\"), (\"老年人蛛网膜下腔出血\")-[:cure_way@0{}]->(\"康复治疗\"), (\"老年人蛛网膜下腔出血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人蛛网膜下腔出血\")-[:has_symptom@0{}]->(\"意识障碍\"), (\"老年人蛛网膜下腔出血\")-[:has_symptom@0{}]->(\"眩晕\"), (\"老年人蛛网膜下腔出血\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"耳疖\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"耳疖\")-[:cure_way@0{}]->(\"药物治疗\"), (\"过敏性血管炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"颞下间隙感染\")-[:no_eat@0{}]->(\"杏仁\"), (\"颞下间隙感染\")-[:no_eat@0{}]->(\"白扁豆\"), (\"颞下间隙感染\")-[:cure_way@0{}]->(\"康复治疗\"), (\"颞下间隙感染\")-[:cure_way@0{}]->(\"药物治疗\"), (\"颞下间隙感染\")-[:do_eat@0{}]->(\"鸭肉\"), (\"病毒性肺炎\")-[:no_eat@0{}]->(\"白扁豆\"), (\"病毒性肺炎\")-[:need_check@0{}]->(\"血常规\"), (\"病毒性肺炎\")-[:do_eat@0{}]->(\"杏仁\"), (\"复发性阿弗他溃疡\")-[:no_eat@0{}]->(\"白扁豆\"), (\"复发性阿弗他溃疡\")-[:cure_way@0{}]->(\"康复治疗\"), (\"复发性阿弗他溃疡\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"复发性阿弗他溃疡\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"小儿法洛四联症\")-[:no_eat@0{}]->(\"白扁豆\"), (\"小儿法洛四联症\")-[:no_eat@0{}]->(\"腐竹\"), (\"小儿法洛四联症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿法洛四联症\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"往来寒热\")-[:need_check@0{}]->(\"血常规\"), (\"往来寒热\")-[:cure_way@0{}]->(\"药物治疗\"), (\"男性性早熟\")-[:cure_way@0{}]->(\"药物治疗\"), (\"男性性早熟\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾功能不全\")-[:need_check@0{}]->(\"血常规\"), (\"肾功能不全\")-[:cure_way@0{}]->(\"康复治疗\"), (\"肾功能不全\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾功能不全\")-[:do_eat@0{}]->(\"杏仁\"), (\"肾功能不全\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"脑水肿\")-[:need_check@0{}]->(\"血常规\"), (\"脑水肿\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"脑水肿\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"脑水肿\")-[:cure_way@0{}]->(\"康复治疗\"), (\"脑水肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脑水肿\")-[:do_eat@0{}]->(\"芝麻\"), (\"脑水肿\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"鼻石\")-[:no_eat@0{}]->(\"白扁豆\"), (\"鼻石\")-[:cure_way@0{}]->(\"康复治疗\"), (\"鼻石\")-[:cure_way@0{}]->(\"药物治疗\"), (\"外伤后头痛\")-[:no_eat@0{}]->(\"杏仁\"), (\"外伤后头痛\")-[:no_eat@0{}]->(\"白扁豆\"), (\"外伤后头痛\")-[:need_check@0{}]->(\"神经系统检查\"), (\"外伤后头痛\")-[:need_check@0{}]->(\"脑电图检查\"), (\"外伤后头痛\")-[:need_check@0{}]->(\"脑血流图\"), (\"外伤后头痛\")-[:need_check@0{}]->(\"脑血管造影\"), (\"外伤后头痛\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"外伤后头痛\")-[:need_check@0{}]->(\"颅脑MRI检查\"), (\"外伤后头痛\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"外伤后头痛\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"外伤后头痛\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"外伤后头痛\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"外伤后头痛\")-[:cure_way@0{}]->(\"药物治疗\"), (\"外伤后头痛\")-[:do_eat@0{}]->(\"鸭肉\"), (\"外伤后头痛\")-[:has_symptom@0{}]->(\"紧张性头痛\"), (\"外伤后头痛\")-[:common_drug@0{}]->(\"清凉油\"), (\"脑癌\")-[:no_eat@0{}]->(\"杏仁\"), (\"脑癌\")-[:no_eat@0{}]->(\"腐竹\"), (\"脑癌\")-[:no_eat@0{}]->(\"鸭肉\"), (\"脑癌\")-[:no_eat@0{}]->(\"鸭蛋\"), (\"脑癌\")-[:need_check@0{}]->(\"脑电图检查\"), (\"脑癌\")-[:need_check@0{}]->(\"颅脑CT检查\"), (\"脑癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脑癌\")-[:do_eat@0{}]->(\"芝麻\"), (\"中暑\")-[:recommend_drug@0{}]->(\"加味藿香正气丸\"), (\"中暑\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"中暑\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"中暑\")-[:cure_way@0{}]->(\"药物治疗\"), (\"中暑\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"中暑\")-[:accompany_with@0{}]->(\"意识障碍\"), (\"中暑\")-[:accompany_with@0{}]->(\"脑水肿\"), (\"中暑\")-[:common_drug@0{}]->(\"清凉油\"), (\"创伤性鼻中隔穿孔\")-[:no_eat@0{}]->(\"白扁豆\"), (\"创伤性鼻中隔穿孔\")-[:no_eat@0{}]->(\"腐竹\"), (\"创伤性鼻中隔穿孔\")-[:cure_way@0{}]->(\"康复治疗\"), (\"创伤性鼻中隔穿孔\")-[:cure_way@0{}]->(\"药物治疗\"), (\"创伤性鼻中隔穿孔\")-[:do_eat@0{}]->(\"芝麻\"), (\"创伤性鼻中隔穿孔\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"围绝经期综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"围绝经期综合征\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"围绝经期综合征\")-[:accompany_with@0{}]->(\"眩晕\"), (\"太阳中风\")-[:need_check@0{}]->(\"血常规\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"元胡止痛胶囊\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"夏桑菊颗粒\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"天麻素胶囊\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"对乙酰氨基酚缓释片\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"川芎茶调颗粒\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"布洛芬缓释胶囊\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"建曲\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"愈风宁心滴丸\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"感冒咳嗽颗粒\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"甲芬那酸片\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"藿香正气片\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"酚咖片\"), (\"太阳中风\")-[:recommend_drug@0{}]->(\"风油精\"), (\"太阳中风\")-[:cure_way@0{}]->(\"药物治疗\"), (\"猛兽伤\")-[:recommend_drug@0{}]->(\"清凉油\"), (\"猛兽伤\")-[:recommend_drug@0{}]->(\"风油精\"), (\"猛兽伤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"猛兽伤\")-[:do_eat@0{}]->(\"芝麻\"), (\"猛兽伤\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"猛兽伤\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"猛兽伤\")-[:common_drug@0{}]->(\"清凉油\"), (\"猛兽伤\")-[:common_drug@0{}]->(\"风油精\"), (\"眼球穿通伤\")-[:no_eat@0{}]->(\"白扁豆\"), (\"眼球穿通伤\")-[:no_eat@0{}]->(\"腐竹\"), (\"眼球穿通伤\")-[:need_check@0{}]->(\"眼底检查\"), (\"眼球穿通伤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"眼球穿通伤\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"科干综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"混合结缔组织病\")-[:no_eat@0{}]->(\"杏仁\"), (\"混合结缔组织病\")-[:no_eat@0{}]->(\"腐竹\"), (\"混合结缔组织病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"混合结缔组织病\")-[:do_eat@0{}]->(\"芝麻\"), (\"混合结缔组织病\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"痧气\")-[:need_check@0{}]->(\"血常规\"), (\"痧气\")-[:do_eat@0{}]->(\"芝麻\"), (\"痧气\")-[:do_eat@0{}]->(\"鸡蛋\"), (\"痧气\")-[:do_eat@0{}]->(\"鸭蛋\"), (\"鼻腔囊肿\")-[:do_eat@0{}]->(\"芝麻\"), (\"鼻腔囊肿\")-[:do_eat@0{}]->(\"鸡蛋\")]]']"}
{"prompt": "多少种病能够通过康复治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'康复治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[2163]']"}
{"prompt": "哪些人物是多洛霍夫家族的成员？", "content": "MATCH (n:character)-[e]-(n1:group{name:'多洛霍夫家族'}) return n", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": " 嘿，你能帮我找一下 'Tim Duncan' 喜欢的人和他们喜欢的人吗？我需要知道这些人的名字，分别是 'Player'、'Friend'、'FoF'。", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "获取'Boris Diaw'的球员的属性，并将球员节点返回。", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "匹配所有球员与其队友之间的关系。", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "查找名为'Jordan'的球员，并返回该球员的节点信息。", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "马琳·麦金农是什么物种？", "content": "MATCH (n:character{name:'马琳·麦金农'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "找出从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系路径，并返回路径信息。", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "Starting from 'Tim Duncan', identify all entities within the two steps that have a 'like' relationship with them, and return detailed information about these relationships.", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "您好，请帮我查找一下和 'Danny Green' 有 '喜欢' 关系的实体，然后再找出这些实体的 '队友'。最后，能否返回这些实体及其关系的源节点和目标节点的ID呢？", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "多洛雷斯·乌姆里奇是哪个学院的？", "content": "MATCH (n:character{name:'多洛雷斯·乌姆里奇'})-[e:learn_from]-(n1:college) return n1.college.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"斯莱特林学院\"]']"}
{"prompt": "Obtain the name of the team 'Spurs'.", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Can you help me find the IDs of all entities that have a 'like' relationship with 'Tracy McGrady'?", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "复发性线性棘层松解性皮肤病的易感人群是哪些？", "content": "MATCH (n:disease{name:\"复发性线性棘层松解性皮肤病\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特殊人群\"]']"}
{"prompt": "找出与 'Tim Duncan' 有双向 '喜欢' 关系且 '喜欢程度' 大于90的实体，返回源实体名、目标实体ID、目标实体名和喜欢程度。", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "请帮我找出'Boris Diaw'所在的球队，然后找出所有球队名中包含'Haw'的时间段和球队信息，最后告诉我球员的姓名、效力开始年份、结束年份和球队名称。", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "您好，请帮我找一下年龄大于等于29岁的球员，然后给我他们的ID和年龄信息。", "content": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Dejounte Murray\", 29]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Jonathon Simmons\", 29]", "[\"Klay Thompson\", 29]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"James Harden\", 29]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "Find all entities with a favorite relationship with a player named 'Cory Joseph' and return the relationship paths between these entities.", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find all the entities that 'Tim Duncan' likes and return the deduplication of the relationship attributes between these entities and the relationship itself.", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "查找名为'Tim Duncan'的球员经过2到3跳的喜欢的所有实体，并返回所有信息。", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]"]}
{"prompt": "蒙太·奈特利是什么物种？", "content": "MATCH (n:character{name:'蒙太·奈特利'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": " 嘿，你能帮我找一下名字叫'Tim Duncan'的球员吗？我想知道他的年龄和ID，还有能不能把ID展示给我看看，最后告诉我ID是多少？", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "找出 'Boris Diaw' 所在的所有球队及其在该球队的服务时间，返回球员姓名、效力起始和结束年份以及队名。", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "返回尼可·勒梅周边最多二跳关系的子图？", "content": "GET SUBGRAPH 2 STEPS FROM \"尼可·勒梅\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"尼可·勒梅\" :character{})], [(\"尼可·勒梅\")-[:kindred@0{}]->(\"佩雷纳尔·勒梅\"), (\"尼可·勒梅\")-[:belong_to@0{}]->(\"勒梅家庭\"), (\"尼可·勒梅\")-[:belong_to@0{}]->(\"炼金术\"), (\"尼可·勒梅\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"佩雷纳尔·勒梅\")-[:kindred@0{}]->(\"尼可·勒梅\")]]', '[[(\"勒梅家庭\" :group{}), (\"炼金术\" :group{}), (\"佩雷纳尔·勒梅\" :character{}), (\"阿不思·邓布利多\" :group{} :character{})], [(\"佩雷纳尔·勒梅\")-[:belong_to@0{}]->(\"炼金术\"), (\"阿不思·邓布利多\")-[:kindred@0{}]->(\"坎德拉·邓布利多\"), (\"阿不思·邓布利多\")-[:kindred@0{}]->(\"珀西瓦尔·邓布利多\"), (\"阿不思·邓布利多\")-[:kindred@0{}]->(\"阿不福思·邓布利多\"), (\"阿不思·邓布利多\")-[:kindred@0{}]->(\"阿利安娜·邓布利多\"), (\"阿不思·邓布利多\")-[:kindred@0{}]->(\"霍诺利亚\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"凤凰社\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"变形学系\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"国际巫师联合会\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"威森加摩\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"梅林爵士团\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"老魔杖\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"邓布利多军\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"邓布利多家族\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"魔法法律委员会\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"西弗勒斯·斯内普\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"默库斯\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"阿不福思·邓布利多\")-[:kindred@0{}]->(\"阿不思·邓布利多\"), (\"霍诺利亚\")-[:kindred@0{}]->(\"阿不思·邓布利多\"), (\"阿不思·邓布利多\")-[:learn_from@0{}]->(\"格兰芬多学院\")]]', '[[(\"霍诺利亚\" :character{}), (\"英国魔法部\" :group{}), (\"阿不福思·邓布利多\" :character{}), (\"老魔杖\" :group{}), (\"鲁伯·海格\" :character{}), (\"凤凰社\" :group{}), (\"国际巫师联合会\" :group{}), (\"魔法法律委员会\" :group{}), (\"哈利·波特\" :group{} :character{}), (\"默库斯\" :character{}), (\"威森加摩\" :group{}), (\"阿利安娜·邓布利多\" ), (\"格兰芬多学院\" :college{} :group{}), (\"珀西瓦尔·邓布利多\" ), (\"霍格沃茨魔法学校\" ), (\"米勒娃·麦格\" :character{}), (\"坎德拉·邓布利多\" ), (\"西弗勒斯·斯内普\" :character{}), (\"变形学系\" :group{}), (\"梅林爵士团\" :group{}), (\"邓布利多军\" :group{}), (\"邓布利多家族\" :group{})], [(\"霍诺利亚\")-[:kindred@0{}]->(\"坎德拉·邓布利多\"), (\"霍诺利亚\")-[:kindred@0{}]->(\"珀西瓦尔·邓布利多\"), (\"霍诺利亚\")-[:kindred@0{}]->(\"阿不福思·邓布利多\"), (\"霍诺利亚\")-[:kindred@0{}]->(\"阿利安娜·邓布利多\"), (\"霍诺利亚\")-[:belong_to@0{}]->(\"邓布利多家族\"), (\"阿不福思·邓布利多\")-[:kindred@0{}]->(\"坎德拉·邓布利多\"), (\"阿不福思·邓布利多\")-[:kindred@0{}]->(\"珀西瓦尔·邓布利多\"), (\"阿不福思·邓布利多\")-[:kindred@0{}]->(\"阿利安娜·邓布利多\"), (\"阿不福思·邓布利多\")-[:kindred@0{}]->(\"霍诺利亚\"), (\"阿不福思·邓布利多\")-[:belong_to@0{}]->(\"凤凰社\"), (\"阿不福思·邓布利多\")-[:belong_to@0{}]->(\"邓布利多家族\"), (\"阿不福思·邓布利多\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿不福思·邓布利多\")-[:learn_from@0{}]->(\"格兰芬多学院\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"凤凰社\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"哈利·波特\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"格兰芬多学院\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"鲁伯·海格\")-[:learn_from@0{}]->(\"格兰芬多学院\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"凤凰社\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"格兰芬多学院\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"邓布利多军\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"哈利·波特\")-[:learn_from@0{}]->(\"格兰芬多学院\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"凤凰社\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"变形学系\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"格兰芬多学院\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"邓布利多军\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"米勒娃·麦格\")-[:learn_from@0{}]->(\"格兰芬多学院\"), (\"西弗勒斯·斯内普\")-[:belong_to@0{}]->(\"凤凰社\"), (\"西弗勒斯·斯内普\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\")]]']"}
{"prompt": "返回所有为 'Pistons' 效力的球员的姓名。", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "查找球员'LeBron James'所在的球队为'Cavaliers'的路径，返回关系类型和球队名称。", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "Find out the teammate relationships between all players and return the names of Player 1 and Player 2.", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "得了丙型肝炎病毒感染与肾小球肾炎应该去哪个科室就诊？", "content": "GO FROM \"丙型肝炎病毒感染与肾小球肾炎\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"肝病\"]']"}
{"prompt": "埃尔德·沃普尔参与了多少个组织？", "content": "MATCH (n:character{name:'埃尔德·沃普尔'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[1]']"}
{"prompt": "您好，请帮我查找名为'Jordan'的球员，并提供该球员的节点信息。", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "找出 和'LaMarcus Aldridge' 相关的团队名称和相关的球员的名称。", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "Hello, could you help me find all the entities that 'Cory Joseph' has a liking relationship with other players? Can you still tell me the path of their relationship?", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "乔治·韦斯莱是弗雷德·韦斯莱的什么关系？", "content": "MATCH (n:character{name:'弗雷德·韦斯莱'})-[e]-(n1:character{name:'乔治·韦斯莱'}) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"乔治·韦斯莱\" :character{marital: \"已婚\", name: \"乔治·韦斯莱\", dead: \"\", born: \"1978年4月1日，英国\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"棕色\", gender: \"男\"})]', '[(\"乔治·韦斯莱\" :character{marital: \"已婚\", name: \"乔治·韦斯莱\", dead: \"\", born: \"1978年4月1日，英国\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"棕色\", gender: \"男\"})]']"}
{"prompt": "请问您能帮我找出与'LaMarcus Aldridge'有关的团队名称和相关球员的名称吗？", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": " 请问您能帮我统计一下，有多少条路径能够连接球员v1和 'Tim Duncan'，并且这些路径还能够表示球员v1对 'Tim Duncan' 的喜爱以及他们之间的有效力关系吗？", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "安东宁·多洛霍夫从属于哪个组织？", "content": "MATCH (n:character{name:'安东宁·多洛霍夫'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"伏地魔\" :group{name: \"伏地魔\"})]', '[(\"多洛霍夫家族\" :group{name: \"多洛霍夫家族\"})]', '[(\"食死徒\" :group{name: \"食死徒\"})]']"}
{"prompt": "查找ID为'Paul Gasol'的顶点，并找出它通过效力关系连接的所有球队，返回此球员的姓名和他服务的球队名称。", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "伤痛宁膏能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'伤痛宁膏'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"关节扭伤\"]', '[\"胫腓下联合前部分离\"]', '[\"膝关节侧副韧带损伤\"]', '[\"膝关节损伤\"]', '[\"膝关节结核\"]', '[\"膝关节韧带损伤\"]', '[\"髌股关节疼痛\"]', '[\"髌骨不稳定\"]']"}
{"prompt": "您好，请帮我查找一下'Tony Parker'喜欢的所有东西，然后把它们返回给我好吗？", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "请问您能帮我找一下，从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系路径吗？", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "Find the entities that have a 'like' relationship with 'Dejounte', sort them in descending age and ascending name order, skip the first 11 results, and return the names and ages of the next 3 entities.", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "巴希达·巴沙特的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='巴希达·巴沙特' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"\"]']"}
{"prompt": "糖尿病的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"糖尿病\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"需要终身间歇性治疗\"]']"}
{"prompt": "Can you help me find all the entities that Boris Diaw likes and give me their IDs?", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "Hello, please help me identify the relationship between players with a liking level of -1.", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "您好，请帮我找出与球员 'Grant Hill' 有两跳 '喜欢' 关系的实体，并把这些路径返回给我。", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "找出所有喜欢'Tony Parker' 和 'Tim Duncan' 的实体，并返回这些实体及其关系，但排除 'Tony Parker' 和 'Tim Duncan' 之间的关系。", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "您好，请帮我找一下ID为'Jason Kidd'的球员的姓名。", "content": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "您好，请帮我找出从 'Tim Duncan' 到 'Nobody' 或 'Spur' 的 '喜欢' 关系的路径，最多包含3个节点，并返回这些路径。", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "厄克特从属于哪个组织？", "content": "MATCH (n:character{name:'厄克特'})-[]-(n1) return n1.group.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"斯莱特林学院\"]', '[\"斯莱特林学院\"]', '[\"斯莱特林魁地奇球队\"]']"}
{"prompt": "Find players over 35 years old, count their number, total age, maximum age, minimum age, average age plus 1 and labels, and sort them by ID, quantity, maximum age, and minimum age. Skip the top 10 results and return 20 results.", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "Find all the teams' Boris Diaw 'belongs to and their service time in that team, return the player name, start and end years of service, and team name.", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "莫迪丝蒂·巴瑞波恩的父亲是什么物种？", "content": "MATCH (n:character{name:'莫迪丝蒂·巴瑞波恩'})-[e:kindred{rel_type:'父亲'}]-(n1) return n1.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "阿切尔·埃弗蒙德是什么物种？", "content": "MATCH (n:character{name:'阿切尔·埃弗蒙德'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "查找名为'Tracy McGrady'的球员在2000年开始所效力或喜欢的所有实体及关系。", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "Starting from 'Tim Duncan', identify all entities with a distance of 2 steps that have 'like' relationships with 'Tim Duncan', and return the edge information of these relationships.", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "Returns the relationships between all players and their teammates.", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "请问您能帮我找出与名为'Damian Lillard'的球员喜欢的所有事物有关系的实体的年龄吗？然后按照年龄从小到大排序，给我返回前三个实体及其年龄好吗？", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "请问您能帮我找到 'Tim Duncan' 喜欢的人或事物以及这些人或事物喜欢的其他人或事物吗？我想知道这三类实体的名字。", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "血稠的注意事项有哪些？", "content": "MATCH (n:disease{name:\"血稠\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1、坚持体育锻炼：散步、快走、慢跑、打太极拳、做健身操等，可加速体内脂质代谢，降低血脂和血黏稠度。 2、缓解或消除精神压力，保持规律生活和愉悦心情。\"]']"}
{"prompt": "找出名为'Tim Duncan'的球员所喜欢的喜好度为90的实体，且与该球员距离为2到3的所有实体，并返回这些实体及它们之间的关系。", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Hello, could you please help me find players aged 30 and return their names and age plus 1 result?", "content": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kevin Durant\", 31]", "[\"Russell Westbrook\", 31]", "[\"Blake Griffin\", 31]", "[\"DeAndre Jordan\", 31]"]}
{"prompt": "Identify entities that have a 'liking' or 'teammate' relationship with 'Dwight Howard', and return their liking level, teammate start year, and endpoint entity names.", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "疥疮的发病原因是什么？", "content": "MATCH (n:disease{name:\"疥疮\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"疥疮的发病，迟发性变态反应起着十分重要的作用，而在疥疮感染期，血清免疫球蛋白水平的检测略可反映B细胞活性，感染期间IgA明显降低，IgG和IgM水平明显升高，治疗后恢复正常，疥疮患者血清中IgE水平比正常人明显增高，患者经治愈后，IgE水平随之降低，疥螨感染后所产生的IgE具有特异性，它与尘螨抗原无交叉性。 Hoefling用免疫荧光技术发现患者的真皮血管壁有IgM和C3沉积，似皮肤血管炎表现，而真皮连接处有颗粒状IgM，IgG沉积，似红斑狼疮表现，Neste等在患者血清中检出有与补体C1q结合的抗原抗体复合物，又有人研究发现患者表皮中郎格罕细胞受损伤，其密度下降，树突减少或缩短或胞体增大，而且胞内出现空泡和线粒体嵴断裂现象，治疗一年的疥疮患者，常有对疥螨浸出物有超敏反应，结节性疥疮患者，抑制性T细胞调节B细胞功能有缺陷。 疥疮的皮肤损害可能有以下几种原因： ①疥疮瘙痒性红色丘疹系疥螨钻入皮肤直接引起。 ②水疱或小脓疱的形成可能是疥螨或角层内的排泄物，作为一种致敏物使表皮和真皮毛细血管扩张渗出所致。 ③隧道系疥虫挖掘所致。 ④结节是机体对疥虫抗原发生超敏反应。 直接感染：直接与携带疥虫的病人或动物接触以后被感染该病，是疥疮传播的重要途径。一般家里或单位、宿舍有疥疮患者以后，其他人再次感染疥疮都由该途径传播，传播性极强，感染人群极广，大人、小孩、孕妇、婴儿都可以感染疥疮，各个行业都可以导致疥疮疾病传播，医生、护士、老师、学生、工人、公务员等，解放以前多发生在生活条件较差的农村，目前生活水平的提高，好多人及大夫都忽视该病的发生和发展，同时大城市流动人口有增高趋势。 间接感染：是通过间接接触到疥疮患者的衣物、用品、患者接触到的家具、物品等被感染，最严重的疥疮传播强到(疥疮患者拿的钱被其他人接触都会感染疥疮，坐公交车疥疮患者抓过的扶手其他人接触都会被感染疥疮)。 但好多人和疥疮患者在一起生活而没有发病，主要与人体的自身免疫力有很大的影响。疥疮患者发病多发生在自身免疫力降低的情况下。 发病机制 免疫荧光研究，提示在皮肤、血管中有血管炎样改变，并出现IgM和C3补体结合物，说明疥疮有体液免疫成分，组织学则提示一般疥疮的皮损中细胞免疫反应引发，例如皮损丘疹，结节等周围的浸润细胞大多数为淋巴细胞，而且主要是T淋巴细胞。\"]']"}
{"prompt": "找出名为'Tracy McGrady'的球员所'喜欢'的所有实体，且喜欢程度为90，返回这些实体和它们之间的关系。", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "请问您能帮我找一下，球员 'Tim Duncan' 和球队 'Spurs' 之间最短的路径吗？最多只能有3个跳跃的关系。谢谢！", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": " 您好，请帮我找一下年龄超过30.5岁的球员，然后给我他们的ID和年龄。", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "心脏病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"心脏病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.03%\"]']"}
{"prompt": "Hello, please help me obtain the names and age information of 'Boris Diaw' and 'Tony Parker' players and ensure that they are not returned to me in duplicate.", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "请问您能帮我查找一下，与 'Dwight Howard' 有 '喜欢' 或 '队友' 关系的实体吗？我需要获取这些实体的喜欢程度、队友开始年份以及终点实体名称。", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "请问您能帮我找到球队'Spurs'的名字吗？", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Can you help me identify entities that have a 'like' relationship with 'Tim Duncan'? I need to return detailed information about these relationships.", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "您好，请问您能帮我找到名为'Boris Diaw'的球员节点并返回吗？", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "Find all entities and relationships that a player named 'Tracy McGrady' has played or liked since 2000.", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "Return the relationship properties of 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady'.", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "得了高血压推荐吃什么药？", "content": "GO FROM \"高血压\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"Ⅰ\"]', '[\"二十五味珊瑚丸\"]', '[\"卡维地洛片\"]', '[\"厄贝沙坦片\"]', '[\"吲达帕胺滴丸\"]', '[\"回心康片\"]', '[\"复方天麻蜜环糖肽片\"]', '[\"替米沙坦片\"]', '[\"盐酸乐卡地平片\"]', '[\"盐酸拉贝洛尔片\"]', '[\"盐酸贝那普利片\"]', '[\"硝苯地平缓释片Ⅰ\"]', '[\"缬沙坦胶囊\"]', '[\"脑立清丸\"]', '[\"苯磺酸氨氯地平胶囊\"]', '[\"薯蓣皂苷片\"]', '[\"赖诺普利片\"]', '[\"马来酸依那普利片\"]', '[\"马来酸氨氯地平片\"]']"}
{"prompt": " 您好，请问您能帮我找一下'Cory Joseph'这个球员和其他球员之间有喜欢关系的所有实体吗？还能告诉我它们之间的关系路径吗？", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "三尖瓣闭锁的注意事项有哪些？", "content": "MATCH (n:disease{name:\"三尖瓣闭锁\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"三尖瓣闭锁是一种复杂紫绀型先天性心血管畸形，预后极差，生存期很短，49.5%在出生后6个月内死亡，66%在1岁以内死亡，少数可存活到10岁以上，病变的类型和血流动力学异常的程度是决定预后的因素，出生时青紫症状严重，房间隔或室间隔水平分流较少者，90%在1岁内死亡;肺血流量增多者预后较好，但有部分患儿在早期死于心力衰竭，在经过适当手术治疗的病例中，50%以上能存活到15岁以后，在一组经Fontan手术的随访报告中，5年生存率85%，10年生存率78%，死亡原因主要是心力衰竭，心律失常，感染和再次手术等，目前无有效的预防措施，临床主要是诊断时要与其它紫绀型的先天性心脏病进行鉴别，以求对患儿及时地进行正确地治疗。 1.一级预防 先天性心脏病由环境因素，遗传因素以及两者的相互作用而引起，对遗传因素的预防方面主要要重视婚前检查，避免近亲结婚，并接受遗传咨询，更重要的是设法发现避免和防治在妊娠期有可能使遗传倾向发生不利变化的环境因素如病毒感染，药物，酒精和母亲疾病等，以打破环境因素与遗传因素相互作用的环节，是一级预防的关键。 2.二级预防 (1)早期诊断：先心病的早期诊断可分为两步。 ①胎儿期的诊断：于妊娠16～20周，采用经孕妇腹部穿刺羊膜抽取羊水进行羊水细胞培养，染色体分析，基因诊断和酶活性测定，羊水中代谢产物，特殊蛋白质和酶活性等，也可于妊娠8～12周经妇女阴道吸取绒毛进行上述检查，对于那些由单基因突变和染色体畸变引起的先天性心脏病有很大的价值。 ②婴儿期的诊断：对所生婴儿应进行全面的体检，尤其应对心血管系统进行认真的听诊检查，发现可疑者用心动超声进一步检查。 (2)早期处理：一旦在胎儿期明确诊断胎儿有先天性心血管畸形，都应及时终止妊娠，对某些遗传性酶或代谢缺陷病，在出生后及早进行有关替代疗法，有条件的医院可进行基因治疗，以防止相应疾病的发生。 3.三级预防 先天性心脏病一旦明确诊断，治疗的根本方法是施行外科手术，彻底纠正心脏血管畸形，从而消除由该畸形所引起的病理生理改变，未手术或暂不能手术者，宜根据病情避免过劳，以免引起心力衰竭，如果发生心衰要抗心衰治疗，防治并发症，凡先心病患者在施行侵入性检查或治疗，包括心导管检查，拔牙，扁桃体切除术等，都要常规应用抗生素以预防感染性心内膜炎。\"]']"}
{"prompt": "查看和糖尿病相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"糖尿病\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"糖尿病\" :disease{})], [(\"糖尿病\")-[:no_eat@0{}]->(\"冰糖\"), (\"糖尿病\")-[:no_eat@0{}]->(\"糖桂花\"), (\"糖尿病\")-[:no_eat@0{}]->(\"蜂蜜\"), (\"糖尿病\")-[:no_eat@0{}]->(\"麦芽糖\"), (\"糖尿病\")-[:need_check@0{}]->(\"口服葡萄糖耐量试验\"), (\"糖尿病\")-[:need_check@0{}]->(\"尿糖（GLU）\"), (\"糖尿病\")-[:need_check@0{}]->(\"抗胰岛素受体抗体\"), (\"糖尿病\")-[:need_check@0{}]->(\"极低密度脂蛋白胆固醇（VLDL-c，VLDL-ch ）\"), (\"糖尿病\")-[:need_check@0{}]->(\"空腹血葡萄糖\"), (\"糖尿病\")-[:need_check@0{}]->(\"胰岛素\"), (\"糖尿病\")-[:need_check@0{}]->(\"胰岛素原\"), (\"糖尿病\")-[:need_check@0{}]->(\"血清乙酰乙酸\"), (\"糖尿病\")-[:need_check@0{}]->(\"血糖\"), (\"糖尿病\")-[:need_check@0{}]->(\"血糖仪试纸带法\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"伏格列波糖片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"十八味诃子利尿胶囊\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"天麦消渴片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"抗饥消渴片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"消渴平片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"消渴灵片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"渴乐宁胶囊\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"玉泉颗粒\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"米格列醇片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"降糖宁胶囊\"), (\"糖尿病\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病\")-[:do_eat@0{}]->(\"芹菜\"), (\"糖尿病\")-[:do_eat@0{}]->(\"茄子\"), (\"糖尿病\")-[:do_eat@0{}]->(\"西葫芦\"), (\"糖尿病\")-[:do_eat@0{}]->(\"青椒\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"五谷糙米粥\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"五豆补益糙米粥\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"山楂核桃茶\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"木耳核桃炖豆腐\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"枸杞核桃粥\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"紫菜芙蓉汤\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"翡翠莲藕片\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"黄豆莲藕排骨汤\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"口渴\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"多尿\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"多饮\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"尿糖\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"气阴两虚\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"消瘦\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"烦渴多饮\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"血糖值升高\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"血糖升高\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"餐后血糖高\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"尿毒症\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"糖尿病乳酸性酸中毒\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"糖尿病性神经病\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"糖尿病酮症酸中毒\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"高血压\"), (\"三高症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"人免疫缺陷病毒感染性肾损害\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"代谢综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"低血糖综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"假性甲状旁腺功能减退症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"假性黑棘皮病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"内分泌失调\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"分水岭区脑梗死\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"卓－艾氏综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"单纯性肥胖\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"口糜\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"吐失\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"失眠抑郁\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"婴儿腹部远心性脂肪营养不良\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"寒痹\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿共济失调毛细血管扩张综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿常染色体隐性小脑性共济失调\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿弹性假黄瘤\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿肥胖\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿骨肉瘤\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"巨人症与肢端肥大症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"急性女阴溃疡\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"急性胆源性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"急性膀胱炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"慢性黏膜皮肤念珠菌病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"抗-HCVAg阳性\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"无症状性脑梗死\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"燥邪犯肺\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"牙科病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"牙龈炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"珠蛋白生成障碍性贫血\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"生殖器念珠菌病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"甲亢合并妊娠\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"甲状腺结节钙化\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"白癜风\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"皮肤白斑\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"皮肤穿入性毛囊和毛囊周角化病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"绝经期关节炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"绝经期尿路感染\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年人急性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年人甲状腺功能亢进症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年性哮喘\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"联合免疫缺陷病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肌强直性肌病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肠道菌群失调症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肾虚\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰痈\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰石病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰石症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰腺囊性纤维性变\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰腺癌\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰腺脓肿\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"自身免疫性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"艾滋病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"蛔虫性急性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"血色病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"视神经乳头水肿及视盘水肿\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"迟发性皮肤卟啉病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"骨肉瘤\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高泌乳素血症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高甘油三酯血症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高脂蛋白血症Ⅳ型\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"糖尿病\")-[:common_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病\")-[:common_drug@0{}]->(\"降糖宁胶囊\")]]', '[[(\"血糖仪试纸带法\" :check{}), (\"抗饥消渴片\" :drug{}), (\"山楂核桃茶\" :food{}), (\"糖尿病性神经病\" :disease{}), (\"生殖器念珠菌病\" :disease{}), (\"联合免疫缺陷病\" :disease{}), (\"胰痈\" :disease{}), (\"胰石病\" :disease{}), (\"高泌乳素血症\" :disease{}), (\"糖桂花\" :food{}), (\"口服葡萄糖耐量试验\" :check{}), (\"抗胰岛素受体抗体\" :check{}), (\"极低密度脂蛋白胆固醇（VLDL-c，VLDL-ch ）\" :check{}), (\"血糖\" :check{}), (\"米格列醇片\" :drug{}), (\"内分泌科\" :department{}), (\"尿糖\" :symptom{}), (\"消瘦\" :symptom{}), (\"三高症\" :disease{}), (\"假性黑棘皮病\" :disease{}), (\"婴儿腹部远心性脂肪营养不良\" :disease{}), (\"焦磷酸钙沉积病\" :disease{}), (\"绝经期尿路感染\" :disease{}), (\"十八味诃子利尿胶囊\" :drug{}), (\"天麦消渴片\" :drug{}), (\"玉泉颗粒\" :drug{}), (\"西葫芦\" :food{}), (\"口渴\" :symptom{}), (\"餐后血糖高\" :symptom{}), (\"小儿常染色体隐性小脑性共济失调\" :disease{}), (\"急性胆源性胰腺炎\" :disease{}), (\"老年人急性胰腺炎\" :disease{}), (\"自身免疫性胰腺炎\" :disease{}), (\"迟发性皮肤卟啉病\" :disease{}), (\"尿糖（GLU）\" :check{}), (\"血清乙酰乙酸\" :check{}), (\"降糖宁胶囊\" :drug{}), (\"木耳核桃炖豆腐\" :food{}), (\"翡翠莲藕片\" :food{}), (\"多饮\" :symptom{}), (\"尿毒症\" :disease{}), (\"糖尿病酮症酸中毒\" :symptom{} :disease{}), (\"慢性肾盂肾炎\" :disease{}), (\"无症状性脑梗死\" :disease{}), (\"燥邪犯肺\" :disease{}), (\"牙科病\" :disease{}), (\"老年人甲状腺功能亢进症\" :disease{}), (\"老年性哮喘\" :disease{}), (\"胰腺脓肿\" :disease{}), (\"血管性帕金森综合征\" :disease{}), (\"高甘油三酯血症\" :disease{}), (\"蜂蜜\" :food{}), (\"麦芽糖\" :food{}), (\"空腹血葡萄糖\" :check{}), (\"渴乐宁胶囊\" :drug{}), (\"枸杞核桃粥\" :food{}), (\"血糖升高\" :symptom{}), (\"糖尿病乳酸性酸中毒\" :disease{}), (\"人免疫缺陷病毒感染性肾损害\" :disease{}), (\"低血糖综合征\" :disease{}), (\"小儿骨肉瘤\" :disease{}), (\"甲亢合并妊娠\" :disease{}), (\"高尿酸血症肾病\" :disease{}), (\"胰岛素原\" :check{}), (\"消渴平片\" :drug{}), (\"五豆补益糙米粥\" :food{}), (\"代谢综合征\" :disease{}), (\"内分泌失调\" :disease{}), (\"肢端肥大症\" :disease{}), (\"肾虚\" :disease{}), (\"胰腺囊性纤维性变\" :disease{}), (\"艾滋病\" :disease{}), (\"胰岛素\" :check{}), (\"消渴灵片\" :drug{}), (\"药物治疗\" :cure{}), (\"芹菜\" :food{}), (\"气阴两虚\" :symptom{} :disease{}), (\"血糖值升高\" :symptom{}), (\"高血压\" :disease{}), (\"卓－艾氏综合征\" :disease{}), (\"慢性黏膜皮肤念珠菌病\" :disease{}), (\"白癜风\" :disease{}), (\"绝经期关节炎\" :disease{}), (\"肠道菌群失调症\" :disease{}), (\"冰糖\" :food{}), (\"伏格列波糖片\" :drug{}), (\"盐酸二甲双胍片\" :drug{}), (\"茄子\" :food{}), (\"青椒\" :food{}), (\"紫菜芙蓉汤\" :food{}), (\"多尿\" :symptom{}), (\"妊娠合并白血病\" :disease{}), (\"寒痹\" :disease{}), (\"小儿肥胖\" :disease{}), (\"皮肤白斑\" :disease{}), (\"肌强直性肌病\" :disease{}), (\"盐酸二甲双胍缓释片\" :drug{}), (\"黄豆莲藕排骨汤\" :food{}), (\"分水岭区脑梗死\" :disease{}), (\"单纯性肥胖\" :disease{}), (\"口糜\" :disease{}), (\"小儿共济失调毛细血管扩张综合征\" :disease{}), (\"小儿弹性假黄瘤\" :disease{}), (\"巨人症与肢端肥大症\" :disease{}), (\"急性女阴溃疡\" :disease{}), (\"急性膀胱炎\" :disease{}), (\"抗-HCVAg阳性\" :symptom{} :disease{}), (\"甲状腺结节钙化\" :disease{}), (\"皮肤穿入性毛囊和毛囊周角化病\" :disease{}), (\"红斑性肢痛症\" :disease{}), (\"胰石症\" :disease{}), (\"胰腺癌\" :disease{}), (\"血色病\" :disease{}), (\"视神经乳头水肿及视盘水肿\" :disease{}), (\"骨肉瘤\" :disease{}), (\"支持性治疗\" :cure{}), (\"五谷糙米粥\" :food{}), (\"烦渴多饮\" :symptom{}), (\"假性甲状旁腺功能减退症\" :disease{}), (\"吐失\" :disease{}), (\"失眠抑郁\" :disease{}), (\"牙龈炎\" :disease{}), (\"珠蛋白生成障碍性贫血\" :disease{}), (\"老年肺炎\" :disease{}), (\"蛔虫性急性胰腺炎\" :disease{}), (\"高脂蛋白血症Ⅳ型\" :disease{})], [(\"糖尿病性神经病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病性神经病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病性神经病\")-[:has_symptom@0{}]->(\"消瘦\"), (\"糖尿病性神经病\")-[:has_symptom@0{}]->(\"血糖升高\"), (\"生殖器念珠菌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"生殖器念珠菌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"联合免疫缺陷病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"联合免疫缺陷病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰石病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰石病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰石病\")-[:accompany_with@0{}]->(\"胰腺癌\"), (\"高泌乳素血症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"高泌乳素血症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高泌乳素血症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高泌乳素血症\")-[:accompany_with@0{}]->(\"肢端肥大症\"), (\"三高症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"三高症\")-[:do_eat@0{}]->(\"蜂蜜\"), (\"三高症\")-[:has_symptom@0{}]->(\"多尿\"), (\"三高症\")-[:has_symptom@0{}]->(\"多饮\"), (\"假性黑棘皮病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"假性黑棘皮病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"婴儿腹部远心性脂肪营养不良\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"婴儿腹部远心性脂肪营养不良\")-[:cure_way@0{}]->(\"药物治疗\"), (\"婴儿腹部远心性脂肪营养不良\")-[:do_eat@0{}]->(\"蜂蜜\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"高血压\"), (\"绝经期尿路感染\")-[:cure_way@0{}]->(\"药物治疗\"), (\"绝经期尿路感染\")-[:do_eat@0{}]->(\"蜂蜜\"), (\"小儿常染色体隐性小脑性共济失调\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿常染色体隐性小脑性共济失调\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性胆源性胰腺炎\")-[:no_eat@0{}]->(\"蜂蜜\"), (\"急性胆源性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性胆源性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性胆源性胰腺炎\")-[:accompany_with@0{}]->(\"胰腺脓肿\"), (\"老年人急性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人急性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人急性胰腺炎\")-[:recommend_eat@0{}]->(\"紫菜芙蓉汤\"), (\"自身免疫性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"自身免疫性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"迟发性皮肤卟啉病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"迟发性皮肤卟啉病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"尿毒症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病酮症酸中毒\")-[:no_eat@0{}]->(\"冰糖\"), (\"糖尿病酮症酸中毒\")-[:no_eat@0{}]->(\"麦芽糖\"), (\"糖尿病酮症酸中毒\")-[:need_check@0{}]->(\"血清乙酰乙酸\"), (\"糖尿病酮症酸中毒\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病酮症酸中毒\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病酮症酸中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾盂肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"无症状性脑梗死\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"无症状性脑梗死\")-[:cure_way@0{}]->(\"药物治疗\"), (\"燥邪犯肺\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"燥邪犯肺\")-[:cure_way@0{}]->(\"药物治疗\"), (\"牙科病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人甲状腺功能亢进症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"老年人甲状腺功能亢进症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人甲状腺功能亢进症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年性哮喘\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰腺脓肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"高甘油三酯血症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病乳酸性酸中毒\")-[:need_check@0{}]->(\"胰岛素\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"伏格列波糖片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"十八味诃子利尿胶囊\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"天麦消渴片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"抗饥消渴片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"消渴平片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"消渴灵片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"渴乐宁胶囊\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"玉泉颗粒\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"米格列醇片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"降糖宁胶囊\"), (\"糖尿病乳酸性酸中毒\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病乳酸性酸中毒\")-[:accompany_with@0{}]->(\"糖尿病性神经病\"), (\"糖尿病乳酸性酸中毒\")-[:accompany_with@0{}]->(\"糖尿病酮症酸中毒\"), (\"糖尿病乳酸性酸中毒\")-[:common_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病乳酸性酸中毒\")-[:common_drug@0{}]->(\"降糖宁胶囊\"), (\"人免疫缺陷病毒感染性肾损害\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"低血糖综合征\")-[:need_check@0{}]->(\"空腹血葡萄糖\"), (\"低血糖综合征\")-[:need_check@0{}]->(\"胰岛素\"), (\"低血糖综合征\")-[:cure_department@0{}]->(\"内分泌科\"), (\"低血糖综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿骨肉瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿骨肉瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲亢合并妊娠\")-[:cure_department@0{}]->(\"内分泌科\"), (\"甲亢合并妊娠\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"甲亢合并妊娠\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲亢合并妊娠\")-[:has_symptom@0{}]->(\"消瘦\"), (\"高尿酸血症肾病\")-[:cure_department@0{}]->(\"内分泌科\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高尿酸血症肾病\")-[:has_symptom@0{}]->(\"多尿\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"代谢综合征\")-[:cure_department@0{}]->(\"内分泌科\"), (\"代谢综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"代谢综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"内分泌失调\")-[:cure_department@0{}]->(\"内分泌科\"), (\"内分泌失调\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾虚\")-[:accompany_with@0{}]->(\"高血压\"), (\"胰腺囊性纤维性变\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰腺囊性纤维性变\")-[:cure_way@0{}]->(\"药物治疗\"), (\"艾滋病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"艾滋病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"气阴两虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"药物治疗\"), (\"卓－艾氏综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性黏膜皮肤念珠菌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"慢性黏膜皮肤念珠菌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"白癜风\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"白癜风\")-[:cure_way@0{}]->(\"药物治疗\"), (\"绝经期关节炎\")-[:cure_department@0{}]->(\"内分泌科\"), (\"绝经期关节炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"绝经期关节炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"绝经期关节炎\")-[:has_symptom@0{}]->(\"血糖升高\"), (\"肠道菌群失调症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"高血压\"), (\"寒痹\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"寒痹\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肥胖\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"小儿肥胖\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肥胖\")-[:common_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"皮肤白斑\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"皮肤白斑\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肌强直性肌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肌强直性肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"分水岭区脑梗死\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"分水岭区脑梗死\")-[:cure_way@0{}]->(\"药物治疗\"), (\"单纯性肥胖\")-[:need_check@0{}]->(\"胰岛素\"), (\"单纯性肥胖\")-[:cure_department@0{}]->(\"内分泌科\"), (\"单纯性肥胖\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"单纯性肥胖\")-[:cure_way@0{}]->(\"药物治疗\"), (\"口糜\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"口糜\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿共济失调毛细血管扩张综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿共济失调毛细血管扩张综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿弹性假黄瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"巨人症与肢端肥大症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"巨人症与肢端肥大症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"巨人症与肢端肥大症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"巨人症与肢端肥大症\")-[:has_symptom@0{}]->(\"多尿\"), (\"巨人症与肢端肥大症\")-[:has_symptom@0{}]->(\"多饮\"), (\"急性女阴溃疡\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性女阴溃疡\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性女阴溃疡\")-[:has_symptom@0{}]->(\"消瘦\"), (\"急性膀胱炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性膀胱炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"抗-HCVAg阳性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲状腺结节钙化\")-[:cure_department@0{}]->(\"内分泌科\"), (\"甲状腺结节钙化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"皮肤穿入性毛囊和毛囊周角化病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"皮肤穿入性毛囊和毛囊周角化病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"高血压\"), (\"胰石症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰石症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰石症\")-[:has_symptom@0{}]->(\"消瘦\"), (\"胰石症\")-[:accompany_with@0{}]->(\"胰腺癌\"), (\"胰腺癌\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰腺癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰腺癌\")-[:has_symptom@0{}]->(\"消瘦\"), (\"血色病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"血色病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"视神经乳头水肿及视盘水肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"视神经乳头水肿及视盘水肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"骨肉瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"骨肉瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"假性甲状旁腺功能减退症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"假性甲状旁腺功能减退症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"假性甲状旁腺功能减退症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"吐失\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吐失\")-[:cure_way@0{}]->(\"药物治疗\"), (\"失眠抑郁\")-[:cure_way@0{}]->(\"药物治疗\"), (\"牙龈炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"牙龈炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"珠蛋白生成障碍性贫血\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"珠蛋白生成障碍性贫血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"蛔虫性急性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"蛔虫性急性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蛔虫性急性胰腺炎\")-[:accompany_with@0{}]->(\"胰腺脓肿\"), (\"高脂蛋白血症Ⅳ型\")-[:cure_department@0{}]->(\"内分泌科\"), (\"高脂蛋白血症Ⅳ型\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高脂蛋白血症Ⅳ型\")-[:cure_way@0{}]->(\"药物治疗\")]]']"}
{"prompt": "Find all entities that 'like' and 'Tony Parker', and return the endpoint IDs of their 'like' relationship with 'Tony Parker'.", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "奥塔莱恩·甘布尔是哪个组织的成员？", "content": "MATCH (n:character{name:'奥塔莱恩·甘布尔'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"英国魔法部\" :group{name: \"英国魔法部\"})]']"}
{"prompt": "克丽奥娜是什么物种？", "content": "MATCH (n:character{name:'克丽奥娜'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "Can you help me find out about 'Tim''s favorite entities and their related 2-3 level relationships?", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "雅各布·科瓦尔斯基的祖母的孙辈有谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'孙辈'}]-(n1) WHERE n.character.name=='雅各布·科瓦尔斯基的祖母' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"雅各布·科瓦尔斯基\" :character{marital: \"单身\", name: \"雅各布·科瓦尔斯基\", dead: \"\", born: \"1900年前后波兰\", blood: \"麻鸡\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "请问您能帮我查找一下，与'Dwight Howard'有喜欢或队友关系的实体吗？我需要知道这些实体的喜欢程度、队友开始年份和终点实体名称。", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "您好，请帮我查找一下年龄为40岁的球员，并将他们的姓名返回给我好吗？", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "请问您能帮我找出与 'Kobe Bryant' 有喜欢关系的实体吗？然后再把这些实体的名称返回给我，包括通过两步路径相连的实体。", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "得了糖尿病推荐吃什么药？", "content": "GO FROM \"糖尿病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"伏格列波糖片\"]', '[\"十八味诃子利尿胶囊\"]', '[\"天麦消渴片\"]', '[\"抗饥消渴片\"]', '[\"消渴平片\"]', '[\"消渴灵片\"]', '[\"渴乐宁胶囊\"]', '[\"玉泉颗粒\"]', '[\"盐酸二甲双胍片\"]', '[\"盐酸二甲双胍缓释片\"]', '[\"米格列醇片\"]', '[\"降糖宁胶囊\"]']"}
{"prompt": "伊丽莎白·斯马奇林是什么物种？", "content": "MATCH (n:character{name:'伊丽莎白·斯马奇林'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "找出所有与球员 'Grant Hill' 距离为2跳 '喜欢' 关系的实体，并返回相关路径。", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "Hello, please help me find an entity that has a 'like' or 'teammate' relationship with 'Manu Ginobili'. If it is' like ', please ensure that the liking level is greater than 90, and return the liking level of these entities, the starting year when they became teammates with' Manu Ginobili ', and the entity name.", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "找出和 'Danny Green' 通过 '喜欢' 关系相连的实体，再找出这些实体的 '队友'，并返回这些实体及其关系的源节点和目标节点的ID。", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "创建两条两个实体之间的 '喜欢' 关系，'Tim Duncan' 喜欢 'Tim Parker' 的程度为 99，'Tim Parker' 喜欢 'Tony Parker' 的程度为 90。", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "查找年龄大于等于29岁的球员实体，并返回这些实体的ID和年龄信息。", "content": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Dejounte Murray\", 29]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Jonathon Simmons\", 29]", "[\"Klay Thompson\", 29]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"James Harden\", 29]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "您好，请帮我找出与 'Tim Duncan' 之间有 '喜欢' 和 '服务' 关系的实体，距离为 3，这些实体需要有标签且年龄大于 40，然后将它们返回给我。", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "塞缪尔·G·寇豪格的性别是什么？", "content": "LOOKUP ON character WHERE character.name=='塞缪尔·G·寇豪格' YIELD properties(vertex).gender AS gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": "布拉德利从属于哪个组织？", "content": "MATCH (n:character{name:'布拉德利'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"拉文克劳魁地奇球队\" :group{name: \"拉文克劳魁地奇球队\"})]']"}
{"prompt": "Starting from 'Tony Parker' and following a bidirectional 'like' relationship, go through steps 0 to 2 to return the IDs of all non repeating entities.", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "Obtain the name and age attributes of the 'Tony Parker' player.", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "Hey, can you help me find out the mutual liking relationships between 'Duncan' players and other players? I want to know the degree of liking between them.", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "请问您能帮我查找一下'Spurs'这支球队的队名属性吗？", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "查找名为‘Yao Ming’的球员及其任职的所有实体，并返回原始实体的名称。", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "Insert a 'like' edge, pointing from 'Tim Duncan' to 'Tim Parker', with a liking level of 99; Insert a 'like' edge, pointing from 'Tim Parker' to 'Tony Parker', with a liking level of 90.", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "返回前两个球员的姓名属性，并按照姓名属性进行排序。", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "查找所有为 'Pistons' 队伍服务的球员，并返回这些球员的名字。", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "您好，请帮我找一下与 'Manu Ginobili' 有亲密友好关系的人，或者是他的队友。如果是喜欢的关系，能否筛选出喜欢程度大于90的实体，并提供他们的喜欢程度、开始年份和名称。谢谢！", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "罗伯茨的妻子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='罗伯茨' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Hello, please help me find out the type and quantity of relationships with a player named 'Tim Duncan'.", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "巴巴吉德·阿金巴德从属于哪个组织？", "content": "MATCH (n:character{name:'巴巴吉德·阿金巴德'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"国际巫师联合会\" :group{name: \"国际巫师联合会\"})]']"}
{"prompt": "Hello, please help me find the relationship between 'Tony Parker' and 'Tim Duncan', as well as the relationship properties between 'Grant Hill' and 'Tracy McGrady'.", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "找出与 'Paul Gasol' 通过 '喜欢'、'服务'、'队友' 关系相连的所有实体，并返回这些关系的目标实体的 ID。", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "Hey, can you help me get the names and age information of 'Boris Diaw' and 'Tony Parker' players? Then give me the result after removing the weight.", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "Hello, could you please help me find the names of players who have direct or indirect service relationships with player 'Rudy Gay'.", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "乔治·韦斯莱参与了多少个组织？", "content": "MATCH (n:character{name:'乔治·韦斯莱'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[10]']"}
{"prompt": "请问您能帮我找到所有喜欢Grant Hill的人吗？我需要他们与Grant Hill的喜欢关系的终点ID。", "content": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]"]}
{"prompt": "威尔米娜·塔夫特的儿子是谁？", "content": "MATCH (n:character{name:'威尔米娜·塔夫特'})-[e:kindred{rel_type:'儿子'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"伊格内修斯·塔夫特\" :character{marital: \"\", name: \"伊格内修斯·塔夫特\", dead: \"\", born: \"早于1942年\", blood: \"纯血统或混血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "哪些人物是邓布利多家族的成员？", "content": "MATCH (n:character)-[e]-(n1:group{name:'邓布利多家族'}) return n", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Find players over 35 years old, count their number, total age, maximum age, minimum age, average age plus 1 and their labels, and sort them by ID, number, maximum age, and minimum age. Skip the top 10 results and return 20 results.", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "安东宁·多洛霍夫的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='安东宁·多洛霍夫' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"棕色\"]']"}
{"prompt": "找出名为'Carmelo Anthony'的球员所喜欢的实体，返回该球员的姓名和年龄。", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "找出与 'Tim Duncan' 有 '喜欢' 关系且喜欢程度大于90的实体，返回源实体名、目标实体ID、目标实体名和喜欢程度。", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "Find the entities and relationships that a player named 'Tracy McGrady' has served or liked since 2000.", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "得了糖尿病推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='糖尿病' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"五谷糙米粥\"]', '[\"五豆补益糙米粥\"]', '[\"山楂核桃茶\"]', '[\"木耳核桃炖豆腐\"]', '[\"枸杞核桃粥\"]', '[\"紫菜芙蓉汤\"]', '[\"翡翠莲藕片\"]', '[\"黄豆莲藕排骨汤\"]']"}
{"prompt": "得了高血压推荐吃什么药？", "content": "GO FROM \"高血压\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"Ⅰ\"]', '[\"二十五味珊瑚丸\"]', '[\"卡维地洛片\"]', '[\"厄贝沙坦片\"]', '[\"吲达帕胺滴丸\"]', '[\"回心康片\"]', '[\"复方天麻蜜环糖肽片\"]', '[\"替米沙坦片\"]', '[\"盐酸乐卡地平片\"]', '[\"盐酸拉贝洛尔片\"]', '[\"盐酸贝那普利片\"]', '[\"硝苯地平缓释片Ⅰ\"]', '[\"缬沙坦胶囊\"]', '[\"脑立清丸\"]', '[\"苯磺酸氨氯地平胶囊\"]', '[\"薯蓣皂苷片\"]', '[\"赖诺普利片\"]', '[\"马来酸依那普利片\"]', '[\"马来酸氨氯地平片\"]']"}
{"prompt": "阿切尔·埃弗蒙德从属于哪个组织？", "content": "MATCH (n:character{name:'阿切尔·埃弗蒙德'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"英国魔法部\" :group{name: \"英国魔法部\"})]']"}
{"prompt": "您好，请帮我找出那些喜欢程度为-1的球员之间的关系边吧。", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": " 您好，请帮我查找一下年龄超过20岁的球员所喜欢或间接喜欢的事物以及他们之间的关系好吗？", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "找出和杜格德·麦克费尔相关的五个人？", "content": "MATCH (n:character{name:'杜格德·麦克费尔'})-[e]-(n1) return n LIMIT 5", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"杜格德·麦克费尔\" :character{name: \"杜格德·麦克费尔\", marital: \"\", born: \"早于1841年苏格兰\", dead: \"\", blood: \"纯血统或混血统\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]', '[(\"杜格德·麦克费尔\" :character{name: \"杜格德·麦克费尔\", marital: \"\", born: \"早于1841年苏格兰\", dead: \"\", blood: \"纯血统或混血统\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]']"}
{"prompt": "Could you please help me find the name of the player named 'Ray Allen'?", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "偏头痛的病因是什么？", "content": "MATCH (n:disease{name:\"偏头痛\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"口服避孕药可增加偏头痛发作的频度。月经是偏头痛常见的触发或加重因素(“周期性头痛”)。妊娠，性交可触发偏头痛发作(“性交性头痛”)。 某些易感个体服用硝苯地平(心痛定)，异山梨酯(消心痛)或硝酸甘油后可出现典型的偏头痛发作。 特别是天气转热，多云或天气潮湿。最常见者是酒精性饮料，如某些红葡萄酒。奶制品，奶酪，特别是硬奶酪、咖啡、含亚硝酸盐的食物，如汤，热狗。某些水果，如柑橘类水果、巧克力(“巧克力性头痛”)。某些蔬菜、酵母、人工甜食、发酵的腌制品：如泡菜、味精。 头部的微小运动可诱发偏头痛发作或使之加重，有些患者因惧怕乘车引起偏头痛发作而不敢乘车。踢足球的人以头顶球可诱发头痛(“足球运动员偏头痛”)。爬楼梯上楼可出现偏头痛。 1、睡眠过多或过少。 2、一顿饭漏吃或后延。 3、抽烟或置身于烟中。 4、闪光，灯光过强。 5、紧张，生气，情绪低落，哭泣(“哭泣性头痛”)，很多女性逛商场或到人多的场合可致偏头痛发作。国外有人骑马时尽管拥挤不到1min，也可使偏头痛加重。 在激发因素中，数量，联合作用及个体差异尚应考虑，如对于敏感个体，吃一片橘子可能不致引起头痛，而吃数枚橘子则可引起头痛，有些情况下，吃数枚橘子也不引起头痛发作，但如同时有月经的影响，这种联合作用就可引起偏头痛发作，有的个体在商场中呆一会儿即出现发作，而有的个体仅于商场中久待才出现偏头痛发作。 偏头痛尚有很多改善因素，有人于偏头痛发作时静躺片刻，即可使头痛缓解，有人于光线较暗淡的房间闭目而使头痛缓解，有人于头痛发作时喜以双手压迫双颞侧，以期使头痛缓解，有人通过冷水洗头使头痛得以缓解，妇女绝经后及妊娠3个月后偏头痛趋于缓解。\"]']"}
{"prompt": "坐骨神经盆腔出口狭窄症的推荐食物是什么？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='坐骨神经盆腔出口狭窄症' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "[]"}
{"prompt": "Identify entities that have a 'like' relationship with 'Danny Green', then identify their 'teammates', and return the IDs of the source and target nodes of these entities and their relationships.", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "Can you help me find the people or things that 'Tim Duncan' likes and other people or things that these people or things like? I would like to know the names of these three types of entities.", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "能帮我返回西弗勒斯·斯内普到多洛雷斯·乌姆里奇的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"西弗勒斯·斯内普\" TO \"多洛雷斯·乌姆里奇\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Find all players who have been liked by other players and return their names.", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "请问您能帮我找到所有 'Tony Parker' 喜欢的实体吗？", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "获取'Boris Diaw'的球员节点，并将节点返回。", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "霍奇金病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.03%--0.05%\"]']"}
{"prompt": "Hello, please help me create a 'like' relationship between two entities. Specifically, 'Tim Duncan' likes' Tim Parker 'very much to a degree of 99, while' Tim Parker 'also likes' Tony Parker' to a degree of 90.", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find players known as' Duncan 'who have mutual liking relationships with other players and return their level of liking towards these relationships.", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "Hello, please help me find the number of preferred physical paths for the player with ID 'Tim Duncan' and let me know.", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "Can you help me find the names of the top two players? Can I still sort by name attribute?", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "请问您能帮我找出与 'Kobe Bryant' 有关系的实体吗？我想知道与他有 '喜欢' 关系的实体，而且距离不超过两步。能告诉我这些实体的名称吗？", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "莫拉格·麦克道格是哪个学院的？", "content": "MATCH (n:character{name:'莫拉格·麦克道格'})-[e:learn_from]-(n1:college) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "戊型病毒性肝炎的症状有哪些？", "content": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='戊型病毒性肝炎' return n1.symptom.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"乏力\"]', '[\"低蛋白血症\"]', '[\"大便色浅\"]', '[\"大块肝细胞坏死\"]', '[\"恶心\"]', '[\"肝肾综合征\"]', '[\"腹水\"]', '[\"腹泻\"]', '[\"腹胀\"]', '[\"鼻塞\"]']"}
{"prompt": "请问您能帮我找出'Boris Diaw'喜欢的所有实体并返回它们的ID吗？", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "小儿莫拉雷脑膜炎的主要症状是什么？", "content": "MATCH (n:disease{name:\"小儿莫拉雷脑膜炎\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "请问您能帮我查找一下所有喜欢Steve Nash的实体以及它们与目标实体的关系吗？", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "Could you please help me search for entities that have a 'like' or 'teammate' relationship with 'Dwight Howard'? I need to obtain the likes of these entities, the start year of my teammates, and the name of the endpoint entity.", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Can you help me find out the teammates' relationships between players? I need to get their names.", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "扎卡赖斯·史密斯的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='扎卡赖斯·史密斯' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"\"]']"}
{"prompt": "请问您能帮我查找一下 'Russell Westbrook' 所效力和喜欢的所有实体的 ID 吗？", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "Identify all entities that have a liking, service, or teammate relationship with 'Paul Gasol', and return the ID of the target entity for these relationships.", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "小儿营养不良性消瘦的治疗时长是多久？", "content": "MATCH (n:disease{name:\"小儿营养不良性消瘦\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1-3个月\"]']"}
{"prompt": "查找年龄为30的球员，返回他们的姓名和年龄加1的结果。", "content": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kevin Durant\", 31]", "[\"Russell Westbrook\", 31]", "[\"Blake Griffin\", 31]", "[\"DeAndre Jordan\", 31]"]}
{"prompt": "请问您能帮我找到 Tim Duncan 和 Spurs 球队之间最短的路径吗？\n帮我找一下 Tim Duncan 和 Spurs 球队之间最短的路径，谢谢！\n嗨，您好！我需要找到 Tim Duncan 和 Spurs 球队之间最短的路径，能帮帮我吗？", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "获取ID为'Carmelo Anthony'的球员的姓名和年龄。", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "Could you please help me find the name of the player named 'Ray Allen'?", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "Can you help me identify the number of paths that have a liking relationship with 'Carmelo Anthony'?", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "您好，请帮我获取一下'Tony Parker'球员的姓名和年龄，可以吗？", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "Find the first entity that Tim Duncan likes.", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "阿不思·西弗勒斯·波特的父亲是谁？", "content": "MATCH (n:character{name:'阿不思·西弗勒斯·波特'})-[e]-(n1) WHERE e.rel_type=='父亲' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"哈利·波特\" :group{name: \"哈利·波特\"} :character{marital: \"已婚\", name: \"哈利·波特\", dead: \"\", born: \"1980年7月31日，戈德里克山谷，英格兰西南部，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"乌黑\", eye: \"翠绿\", gender: \"男\"})]']"}
{"prompt": "Identify entities that have a 'liking' or 'teammate' relationship with 'Manu Ginobili', and if 'liking', require a level greater than 90, and return the liking level, start year, and name of these entities.", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": " 嘿，你能帮我找一下'Carmelo Anthony'这个球员喜欢的所有东西吗？还有，能告诉我他的名字和年龄吗？\"", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "Can you help me find the names and node information of all the players?", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "Hello, please help me identify the entity that has a 'like' relationship with player 'Grant Hill' with a distance of 2 jumps, and return the relevant path to me.", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "Can you help me find out the relationship between players and their teammates?", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "玛丽·卢·巴瑞波恩的养子是谁？", "content": "MATCH (n:character{name:'玛丽·卢·巴瑞波恩'})-[e]-(n1) WHERE e.rel_type=='养子' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"克莱登斯·巴瑞波恩\" :character{marital: \"\", name: \"克莱登斯·巴瑞波恩\", dead: \"\", born: \"1907年12月8日至1908年12月6日间\", blood: \"混血统或纯血统\", species: \"人类\", height: \"\", hair: \"黑色\", eye: \"棕色\", gender: \"男\"})]']"}
{"prompt": "Identify the number of paths that have a liking relationship with 'Carmelo Anthony'.", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "您好，请帮我找出与球员 'Grant Hill' 之间存在距离为2跳的 '喜欢' 关系的实体，并将相关路径返回给我。", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "请问您能帮我查找一下名为 'Ray Allen' 的球员的姓名吗？", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体，返回这些实体的 ID。", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "厥脱的推荐食物有哪些？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='厥脱' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"人参粥\"]', '[\"附子粥\"]', '[\"高丽参附子炖鸡肉\"]', '[\"黄精粥\"]']"}
{"prompt": "Find all the people 'Kristaps Porzingis' likes' and return their vids.", "content": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "罗恩·韦斯莱从属于哪个组织？", "content": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"凤凰社\" :group{name: \"凤凰社\"})]', '[(\"哈利·波特\" :group{name: \"哈利·波特\"} :character{marital: \"已婚\", name: \"哈利·波特\", dead: \"\", born: \"1980年7月31日，戈德里克山谷，英格兰西南部，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"乌黑\", eye: \"翠绿\", gender: \"男\"})]', '[(\"家养小精灵解放阵线\" :group{name: \"家养小精灵解放阵线\"})]', '[(\"普威特家族\" :group{name: \"普威特家族\"})]', '[(\"查德里火炮队\" :group{name: \"查德里火炮队\"})]', '[(\"格兰杰家庭\" :group{name: \"格兰杰家庭\"})]', '[(\"格兰芬多魁地奇球队\" :group{name: \"格兰芬多魁地奇球队\"})]', '[(\"邓布利多军\" :group{name: \"邓布利多军\"})]', '[(\"韦斯莱家族\" :group{name: \"韦斯莱家族\"})]', '[(\"韦斯莱魔法把戏坊\" :group{name: \"韦斯莱魔法把戏坊\"})]', '[(\"魔法部\" :group{name: \"魔法部\"})]']"}
{"prompt": "奥拉·奎尔克的出生地是哪里？", "content": "MATCH (n:character{name:'奥拉·奎尔克'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"约1982年至1983年，英国或爱尔兰\"]']"}
{"prompt": "Find the shortest path with a maximum of three jumps between players aged 45 and a team named 'Spurs', and return the length of the path.", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "Hello, please help me find out if there are any players over the age of 20, all the entities they like in 1-2 jumps, and the relationships between them.", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "卡图卢斯·斯潘格尔的出生时间是什么？", "content": "MATCH (n:character{name:'卡图卢斯·斯潘格尔'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"18世纪\"]']"}
{"prompt": "获取名称为'Spurs'的球队的名称属性。", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Returns the names of all players playing for 'Pistons'.", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "Identify the entities associated with 'Kobe Bryant', including all entities in the 'like' relationship within two steps, and return the names of these entities.", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": " 嘿，你能帮我找一下'Tim Duncan'这个球员喜欢的喜好度为90的实体吗？还有，能给我找出与他距离在2到3之间的所有实体以及它们之间的关系吗？", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "瓦伦蒂娜·巴斯克斯的出生地是哪里？", "content": "MATCH (n:character{name:'瓦伦蒂娜·巴斯克斯'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"阿根廷\"]']"}
{"prompt": "查找名为 'Ray Allen' 的球员的姓名。", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "杜格德·麦克利沃的逝世时间是什么？", "content": "LOOKUP ON character WHERE character.name=='杜格德·麦克利沃' YIELD properties(vertex).dead AS dead", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"未知\"]']"}
{"prompt": "找出所有 '喜欢' 'Tony Parker' 的实体，并返回这些实体与 'Tony Parker' 的 '喜欢' 关系的终点 ID。", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "Find the age of all entities that are related to players named 'Damian Lillard' and sort them in ascending order of age, returning the top three entities and their ages.", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "蒂尔登·图茨的妻子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='蒂尔登·图茨' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"戴西·胡克姆\" :character{marital: \"已婚\", name: \"戴西·胡克姆\", dead: \"\", born: \"1962年\", blood: \"\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"棕色\", gender: \"女\"})]']"}
{"prompt": "Hey, can you help me find all the players in the 'Spurs' team? Then return the information of these players to me.", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "Can you help me find the first person Tim Duncan likes?", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find all players in the team named 'Spurs' and return their information.", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "嘿，能帮我找出喜欢 'Dejounte Murray' 的所有实体中，球员名称和年龄吗？按照年龄降序、名称升序排序，然后跳过前11个结果，给我返回接下来的3个结果。", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "尼古拉·瓦西勒娃是哪个国家的魁地奇队员？", "content": "MATCH (n:character{name:'尼古拉·瓦西勒娃'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"保加利亚魁地奇国家队\" :group{name: \"保加利亚魁地奇国家队\"})]']"}
{"prompt": "贝内迪塔是哪个物种的？", "content": "MATCH (n:character{name:'贝内迪塔·多拉多'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "您好，请帮我查找一下名为 'Tony Parker' 的球员喜欢的所有实体，然后将它们返回给我好吗？", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": " 您好，请帮我找一下ID为'Paul Gasol'的顶点，然后找出通过'serve'关系连接的所有球队，最后给我返回这位球员的名字和他效力的球队的名称。", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "吉德罗·洛哈特的姐姐的弟弟是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'弟弟'}]-(n1) WHERE n.character.name=='吉德罗·洛哈特的姐姐' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"吉德罗·洛哈特\" :character{marital: \"单身 \", name: \"吉德罗·洛哈特\", dead: \"\", born: \"1964年1月26日\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"金色\", eye: \"蓝色\", gender: \"男\"})]']"}
{"prompt": "尤里克的头发颜色是什么？", "content": "MATCH (n:character{name:'怪人尤里克'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"白色\"]']"}
{"prompt": "Hello, could you please help me find the subgraph with a distance of 2, starting from 'Tim Duncan' and through the relationship between 'likes' and' services', and return the detailed information of nodes and edges?", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "霍奇金病的治疗方式有哪些？", "content": "GO FROM \"霍奇金病\" OVER cure_way YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"支持性治疗\"]', '[\"药物治疗\"]']"}
{"prompt": " 您好，请帮我找一下，有没有年龄超过20岁的球员，他们在1到2次跳跃中喜欢的所有实体以及它们之间的关系。", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "Find all the entities that Tony Parker likes and return them.", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": " 嘿，你能帮我找一下'Kyrie Irving'喜欢的所有东西吗？我想知道他喜欢的实体，还有可能的关联关系，最好能给我返回所有相关信息。", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]"]}
{"prompt": "Hey, can you help me find all the entities that like 'Dejounte Murray', player names and ages? Sort by age descending and name ascending, then skip the first 11 results and return the next 3 results to me.", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find the name of a player named 'Ray Allen'.", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "Hey, can you help me find the teams' Rajon Rondo 'played for between 2013 and 2018? I need to know his name, the years he started and ended playing, and the name of the team.", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "找出所有喜欢 'Tony Parker' 和 'Tim Duncan' 的球员，并返回这些球员及其关系，但不包括 'Tony Parker' 和 'Tim Duncan' 之间的喜欢关系。", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "获取'Carmelo'的球员的姓名和年龄。", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "找出球队名为'Spurs'的所有球员并返回它们的节点信息。", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "西莫·斐尼甘的头发颜色是什么？", "content": "MATCH (n:character{name:'西莫·斐尼甘'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"浅茶色\"]']"}
{"prompt": "找出名为'Carter'的球员所喜欢的球员距离为0到3跳的效力球队，统计为这些球队所服务的球员总数。", "content": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[63]"]}
{"prompt": "莫迪克斯·埃格的眼睛颜色是什么？", "content": "MATCH (n:character{name:'莫迪克斯·埃格'}) return n.character.eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"深色\"]']"}
{"prompt": "找出和坎坦克卢斯·诺特相关的两个人？", "content": "MATCH (n:character{name:'坎坦克卢斯·诺特'})-[e]-(n1) return n LIMIT 2", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"坎坦克卢斯·诺特\" :character{name: \"坎坦克卢斯·诺特\", marital: \"\", born: \"\", dead: \"\", blood: \"纯血统\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]']"}
{"prompt": "兰斯洛特是哪个物种的？", "content": "MATCH (n:character) WHERE n.character.name=='兰斯洛特' return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "液脱的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"液脱\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.005%--0.008%\"]']"}
{"prompt": "拉奇迪恩是什么性别？", "content": "MATCH (n:character{name:'拉奇迪恩'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": " 您好，请帮我查找一下年龄为20岁的球员，然后将他们的所有节点信息返回给我好吗？", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "罗伯茨是什么物种的？", "content": "MATCH (n:character{name:'罗伯茨'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "您好，请帮我查找一下名为'Rudy Gay'的球员的所有关系类型和数量，可以吗？", "content": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 1]", "[\"serve\", 4]"]}
{"prompt": "Can you help me find all the entities that Boris Diaw likes and return their IDs?", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "Hello, please help me identify all entities that like Tony Parker and return the endpoint IDs of their liking relationships with Tony Parker.", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "从 'Ricky Rubio' 开始，沿着 '喜欢' 关系，向外扩展 1 到 2 步，返回所有实体的 ID、关系权重和名称。", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "得了支气管炎应该去哪个科室就诊？", "content": "GO FROM \"支气管炎\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"呼吸内科\"]']"}
{"prompt": "支气管炎的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"支气管炎\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.07%\"]']"}
{"prompt": "Could you please help me obtain the name and age attributes of the 'Tony Parker' player?", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "维奥莱塔·伯斯德的血统是什么？", "content": "MATCH (n:character{name:'维奥莱塔·伯斯德'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"纯血统\"]']"}
{"prompt": "返回名为'Tim Duncan'的球员与其有关系的关系类型及数量。", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "请问您能帮我找到40岁的球员并告诉我他们的姓名吗？", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Find all entities that like 'Steve Nash' and return the target entities in their relationship with 'Steve Nash'.", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": " 嘿，你能帮我查一下'Tim Duncan'和其他球员之间的友好关系吗？我想知道他们彼此之间的喜欢程度。", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "Find players aged (1+19) and return all node information for these players.", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "您好，请帮我找到'Boris Diaw'球员的属性，并将球员节点返回。", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "请问您能帮我查找一下'Carmelo'球员的姓名和年龄吗？", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "返回从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系的路径信息。", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "妖精爵士歌手是什么物种？", "content": "MATCH (n:character{name:'妖精爵士歌手'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"妖精\"]']"}
{"prompt": "亨利七世的儿子是谁？", "content": "MATCH (n:character{name:'亨利七世'})-[e:kindred{rel_type:'儿子'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"亨利八世\" :character{marital: \"已婚\", name: \"亨利八世\", dead: \"伦敦，1547年1月28日\", born: \"格林威治，1491年6月28日\", blood: \"麻瓜\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "得了戊型病毒性肝炎推荐吃什么药？", "content": "GO FROM \"霍奇金病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"埃希\"]', '[\"欧文\"]', '[\"注射用重组人干扰素α2a\"]', '[\"紫杉醇注射液\"]', '[\"重组人干扰素α-2b注射液\"]']"}
{"prompt": " 嘿，你能帮我查一下叫'Yao Ming'的球员是为哪个球队效力的吗？还有，能告诉我他的真实姓名吗？", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "嘿，你能帮我找出与 'Tim Duncan' 有双向 '喜欢' 关系且 '喜欢程度' 大于90的实体吗？返回源实体名、目标实体ID、目标实体名和喜欢程度。", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "Find the shortest path of up to 3 jumps between player 'Tim Duncan' and team 'Spurs' and return to that path.", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "Find all the entities that Boris Diaw likes and return their IDs.", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "您好，请帮我查找一下球员 'Grant Hill' 的姓名和年龄属性，可以吗？", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "得了戊型病毒性肝炎的注意事项有哪些？", "content": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"与甲型肝炎相同，主要采取以切断传播途径主为的综合性措施，为预防水型传播，主要是保护水源，防止粪便管理;注意食品卫生，改善卫生设施和讲究个人卫生也很重要，使用丙种免疫球蛋白及人胎盘免疫球蛋白预防戊型肝炎多数报告无效，最终要取决于疫苗，HEV分子克隆的成功为研制疫苗提供了基础。\"]']"}
{"prompt": "雅各布·科瓦尔斯基的祖母的血统是什么？", "content": "MATCH (n:character{name:'雅各布·科瓦尔斯基的祖母'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"麻鸡\"]']"}
{"prompt": "詹姆·小天狼星·波特的父亲是谁？", "content": "MATCH (n:character{name:'詹姆·小天狼星·波特'})-[e]-(n1) WHERE e.rel_type=='父亲' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"哈利·波特\" :group{name: \"哈利·波特\"} :character{marital: \"已婚\", name: \"哈利·波特\", dead: \"\", born: \"1980年7月31日，戈德里克山谷，英格兰西南部，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"乌黑\", eye: \"翠绿\", gender: \"男\"})]']"}
{"prompt": "Find the shortest path length between players over 45 years old and a team named 'Spurs' with a maximum of three jumps.", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "Hello, please help me search for the IDs, relationship weights, and names of all entities starting from 'Ricky Rubio', along the 'like' edge, at a distance of 1 to 2 steps.", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "找出所有 '喜欢' 'Grant Hill' 的实体，返回这些实体与 'Grant Hill' 的 '喜欢' 关系的终点 ID。", "content": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]"]}
{"prompt": "Find players aged 20 and return all node information for these players.", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "赫伯特·博克的岳父是谁？", "content": "MATCH (n:character{name:'赫伯特·博克'})-[e]-(n1) WHERE e.rel_type=='岳父' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"菲尼亚斯·奈杰勒斯·布莱克\" :character{marital: \"已婚\", name: \"菲尼亚斯·奈杰勒斯·布莱克\", dead: \"1925年 (78岁)\", born: \"1847年英国\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"黑色\", eye: \"深色\", gender: \"男\"})]']"}
{"prompt": "泪腺炎的症状有哪些？", "content": "MATCH (n:disease{name:\"泪腺炎\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "嗨，您好！我想请您帮我找出年龄超过45岁的球员和名为'Spurs'的球队之间最多只需要三次跳跃的最短路径长度，可以吗？", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "杰克·斯劳珀从属于哪些组织？", "content": "MATCH (n:character{name:'杰克·斯劳珀'})-[e]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]', '[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]', '[(\"格兰芬多魁地奇球队\" :group{name: \"格兰芬多魁地奇球队\"})]']"}
{"prompt": "找出年龄大于20岁的球员所喜欢或间接喜欢的实体及其关系。", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "Hello, could you please help me find out the relationship type and team name of the team 'Cavaliers' where player' LeBron James' is located?", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "您好，请帮我找一下与球员'Rudy Gay'有直接或间接服务关系的球员的名字。", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "Could you please help me find the path information for a maximum of three reverse 'like' relationship from 'Tim Duncan' to 'Tony Parker'?", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "小儿雅克什综合征的主要症状是什么？", "content": "MATCH (n:disease{name:\"小儿雅克什综合征\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "吉德罗·洛哈特的姐姐是什么血统？", "content": "MATCH (n:character{name:'吉德罗·洛哈特的姐姐'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"带有巫师血统的麻瓜\"]']"}
{"prompt": "Could you please help me find all the characters that a player named 'Damian Lillard' likes and sort them in descending order of age, returning me the top three characters and their age information?", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "Find the player node with ID 'Boris Diaw' and return it.", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "亨利·波特的儿子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'儿子'}]-(n1) WHERE n.character.name=='亨利·波特' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"弗利蒙·波特\" :character{marital: \"已婚\", name: \"弗利蒙·波特\", dead: \"1978年6月到1980年7月31日间\", born: \"\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]', '[(\"亨利·波特的母亲\" :character{marital: \"\", name: \"亨利·波特的母亲\", dead: \"\", born: \"\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "Identify entities with a bidirectional 'like' relationship with 'Tim Duncan' and a 'like degree' greater than 90, and return the source entity name, target entity ID, target entity name, and like degree.", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "Hello, please help me find entities that have a 'like' and 'serve' relationship with Tim Duncan through a jump, starting from 'Tim Duncan'. If you can connect the two after a maximum of three jumps, please return these paths to me.", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND ALL PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"LaMarcus Aldridge\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"LaMarcus Aldridge\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"LaMarcus Aldridge\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "Find the vertex with ID 'Paul Gasol' and connect all teams through the 'serve' relationship, and return the name of this player and the team he plays for..", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "Find all teammates and favorite entities of 'Manu Ginobili' between the ages of 30 and 40, and return the ages and names of these entities.", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "特罗卡是哪个学院的教师？", "content": "MATCH (n:character{name:'特罗卡'})-[e:learn_from]-(n1:college) return n1.character.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Hello, could you please help me find out the types and quantities of edges related to player 'Rudy Gay'?", "content": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 1]", "[\"serve\", 4]"]}
{"prompt": "Hey, can you help me find all the entities that like Tony Parker? And return the entity IDs that favor the relationship between these entities and Tony Parker.", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "胰腺囊腺瘤和囊腺癌的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"胰腺囊腺瘤和囊腺癌\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"3-5月\"]']"}
{"prompt": " 请问您能帮我查找一下在'Grant Hill'和'Yao Ming'之间的所有球员吗？我需要他们的详细信息。", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "赫普兹巴·史密斯的祖先是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'祖先'}]-(n1) WHERE n.character.name=='赫普兹巴·史密斯' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"赫尔加·赫奇帕奇\" :character{marital: \"\", name: \"赫尔加·赫奇帕奇\", dead: \"中世纪\", born: \"中世纪，威尔士\", blood: \"\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"蓝色\", gender: \"女\"})]']"}
{"prompt": "Hello, could you please help me find players aged 40 and tell me their names?", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "找出名为'Kyrie Irving'的球员所喜欢的所有实体，包括2到3跳关系，并返回所有信息。", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]"]}
{"prompt": "Find players aged 40 and return their names.", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "找出与 'Tim Duncan' 有 '喜欢' 关系的实体，然后找出这些实体所 '服务' 的实体。", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "找出名为 'Ray Allen' 的球员的姓名。", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "您好，请帮我找到名为'DeAndre Jordan'的球员节点。", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "疥疮的预防措施有哪些？", "content": "MATCH (n:disease{name:\"疥疮\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"疥疮日常预防 1、改善环境卫生，让疥虫无法生存，是疥疮的预防最好方法。 2、由于疥疮是一种传染疾病，所以务必要找出感染渠道(如家人、朋友、亲戚等)，杜绝病源，以免二次传染。 3、对小儿皮肤瘙痒，要注意排除疥疮，不可盲目以为是过敏性皮肤病而外用皮质激素等抗过敏药膏，因为疥疮外用皮质激素药膏后，一方面会使疥疮的皮肤损害加重，另一方面会使小儿疥疮的特点消失，致使以后诊断发生困难。有免疫缺陷的儿童，疥疮的临床表现不典型，如可出现大量螨虫感染引起的非瘙痒性鳞屑损害(如儿童的头皮)。 4、对于小儿疥疮的必须先进行隔离治疗，以便彻底阻断传染源。先用热水、肥皂(最好用硫磺香皂)给患儿洗澡，擦干皮肤后全身涂疥疮药膏杀灭疥虫，丘疹、水疱处也要涂到。每天早晚各涂一次，连用3-4天。 健康教育 1、注意个人卫生，对被污染的衣服、被褥、床单等要用开水烫洗灭虫，如不能烫洗者，一定要放置于阳光下曝晒1周以上再用。 2、杜绝不洁性交。 3、出差住店要勤洗澡，注意换床单。\"]']"}
{"prompt": "Find the path of the 'like' relationship from 'Tim Duncan' to 'Nobody' or 'Spur', with a maximum of 3 nodes, and return these paths.", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "找出 'Tim Duncan' 所 '喜欢' 的年龄大于38的实体，并返回这些实体与 'Tim Duncan' 之间的关系和实体的信息。", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "霍奇金病的易得人群是哪些？", "content": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"好发于青少年\"]']"}
{"prompt": "从'Tim Duncan'的实体出发，沿着'喜欢'关系向外遍历1到4步，返回边的'喜欢程度'以及边信息。", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "找出年龄大于等于29.5岁的球员实体，返回这些球员的ID和年龄信息。", "content": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "白血病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"白血病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.00005%\"]']"}
{"prompt": " 嘿，你能帮我找到'Carmelo Anthony'这个球员喜欢的东西吗？我想知道起始球员的名字和年龄。\"", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "找出年龄大于35岁的球员，统计他们的数量、年龄总和、最大年龄、最小年龄、平均年龄加1和所属标签，并按照id、数量、最大年龄、最小年龄排序，跳过前10个结果，返回20个结果。", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "兰斯洛特是哪个物种的？", "content": "LOOKUP ON character WHERE character.name=='兰斯洛特' YIELD properties(vertex).species AS species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "您好，请帮我查找一下 'Tony Parker' 和 'Tim Duncan' 之间的关系，以及 'Grant Hill' 和 'Tracy McGrady' 之间的关系属性。", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "您好，请帮我统计一下名为'Irving'的球员所服务或喜欢的实体数量，关系的距离需要在2到3跳之间。", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "返回球员名为'Tim Duncan'的姓名。", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "找出Tony Parker所喜欢的球员中，效力于Spurs的球员，返回相关的球员与球队。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "嘿，你能帮我查一下年龄在30到40岁之间的 'Ginobili' 的队友和他喜欢的人吗？然后告诉我这些人的年龄和姓名。", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "芙蓉·德拉库尔的妹妹是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妹妹'}]-(n1) WHERE n.character.name=='芙蓉·德拉库尔' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"加布丽·德拉库尔\" :character{marital: \"\", name: \"加布丽·德拉库尔\", dead: \"\", born: \"约1986年\", blood: \"混血媚娃\", species: \"四分之一媚娃血统\", height: \"\", hair: \"银亮\", eye: \"湛蓝\", gender: \"女\"})]']"}
{"prompt": "请问您能帮我找出与 'Tim Duncan' 有 '喜欢' 关系的实体吗？我需要返回这些关系的详细信息。", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "请问您能帮我查找一下2000年开始效力或喜欢名为'Tracy McGrady'的球员所涉及的所有实体和关系吗？", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "Find players aged 40 and return their names.", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "请问您能帮我找到名为'Giannis Antetokounmpo'的球员的姓名吗？", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": " 嘿，你能帮我找一下 'Rajon Rondo' 在2013年至2018年期间效力过的球队吗？我需要知道他的姓名、开始和结束效力的年份，以及球队的名称。", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "米拉贝拉·普伦基特从属于哪个组织？", "content": "MATCH (n:character{name:'米拉贝拉·普伦基特'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"普伦基特家族\" :group{name: \"普伦基特家族\"})]']"}
{"prompt": " 嘿，你能帮我查一下'Boris Diaw'曾效力过的球队吗？我想知道他的姓名、效力起始和结束年份，还有队名。\"", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "安克谢斯·奥斯博特的出生年份是什么？", "content": "LOOKUP ON character WHERE character.name=='安克谢斯·奥斯博特' YIELD properties(vertex).born AS born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"早于1772年\"]']"}
{"prompt": "Obtain the names and age information of 'Boris Diaw' and 'Tony Parker' players to return the results after deduplication.", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "Hey, can you help me find a player named 'Tim Duncan'? I want to know his age and ID, and can you show me his ID and finally tell me what it is?", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "Identify all entities and their relationships that players over the age of 20 have enjoyed after 1 to 2 jumps.", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "Find all 'like' relationships with a rating of 666, and return the starting and ending points of these relationships.", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "得了心脏病推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='心脏病' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"五香蒜苔\"]', '[\"素炒小白菜\"]', '[\"素炒菠菜\"]', '[\"芥菜炒蚕豆\"]', '[\"苦瓜粥\"]', '[\"豌豆绿豆粥\"]', '[\"银耳冬瓜羹\"]', '[\"马兰头菜粥\"]']"}
{"prompt": "周雅从属于哪个组织？", "content": "MATCH (n:character{name:'周雅'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"国际巫师联合会\" :group{name: \"国际巫师联合会\"})]']"}
{"prompt": "找出所有与球员 'Grant Hill' 有两跳 '喜欢' 关系的实体，并返回这些路径。", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "Starting from 'Tim Duncan', through the relationship between 'likes' and' services', find a subgraph with a distance of 2 and return information on nodes and edges.", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "多发性骨骺发育不良推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='多发性骨骺发育不良' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"冬瓜草鱼汤\"]', '[\"凉拌菜花\"]', '[\"小白菜馅包子\"]', '[\"番茄菜花\"]', '[\"白菜包子\"]', '[\"素炒西兰花\"]', '[\"草鱼豆腐\"]', '[\"鲜百合冬菇西兰花汤\"]']"}
{"prompt": "Hello, could you please help me find all the relationship types and quantities of a player named 'Rudy Gay'?", "content": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 1]", "[\"serve\", 4]"]}
{"prompt": "Obtain the name and age attributes of the 'Kidd' player.", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "糖尿病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"8.3%（国际糖尿病联盟统计，2013在20-79岁成人中患病率为8.3%）\"]']"}
{"prompt": "Find all the entities that a player named 'Tim Duncan' likes after 2 to 3 jumps and return all information.", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]"]}
{"prompt": "Identify all entities that have a 'like' relationship with 'Tracy McGrady' and return the IDs of these entities.", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "血红蛋白E病的治疗科室是哪些？", "content": "GO FROM \"血红蛋白E病\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"血液科\"]']"}
{"prompt": "Find the entities that 'Tim Duncan' likes and the entities that this entity likes, and return the names of these three types of entities.", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "请问您能帮我找出所有喜欢Steve Nash的实体，并告诉我与Steve Nash的关系中的目标实体吗？", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "您好，请帮我找一下，从 'Tim Duncan' 到 'Nobody' 或 'Spur' 之间的所有路径，路径上的关系是 '喜欢'，最多可以有3个节点，然后把这些路径返回给我好吗？", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find all players serving the 'Pistons' team and return their names.", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "您好，请帮我找一下年龄为30的球员，然后返回他们的姓名和年龄加1的结果，可以吗？", "content": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kevin Durant\", 31]", "[\"Russell Westbrook\", 31]", "[\"Blake Griffin\", 31]", "[\"DeAndre Jordan\", 31]"]}
{"prompt": "请问您能帮我找出与 'Carmelo Anthony' 有 '喜欢' 关系的路径数量吗？", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "哈桑·穆斯塔发的头发颜色是什么？", "content": "MATCH (n:character{name:'哈桑·穆斯塔发'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"秃顶\"]']"}
{"prompt": "找出 'Boris Diaw' 所在的所有球队，返回球员姓名、效力起始和结束年份以及队名。", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "Find all entities that 'like' and 'Grant Hill', and return the endpoint IDs of their 'like' relationship with 'Grant Hill'.", "content": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]"]}
{"prompt": "泪腺炎的预防措施有哪些？", "content": "MATCH (n:disease{name:\"泪腺炎\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"泪腺炎主要是由各种传染病引起，如腮腺炎、流行性感冒、伤寒、肺炎、急性咽喉炎等，也可以是周围组织炎症蔓延的结果。因为，最重要的预防措施即是远离疾病传染人群，加强体质锻炼。\"]']"}
{"prompt": "找出年龄大于45岁的球员和名为'Spurs'的球队之间最多三跳的最短的路径，并返回路径长度。", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "能帮我返回詹姆·小天狼星·波特到德里安·普塞的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"詹姆·小天狼星·波特\" TO \"德里安·普塞\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "弗雷德·韦斯莱的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='弗雷德·韦斯莱' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"棕色\"]']"}
{"prompt": "统计一条路径的数量，表示球员v1喜欢 'Tim Duncan' 以及 'Tim Duncan' 有效力关系的球队路径。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "Identify all entities related to 'Manu Ginobili' and return their 'likes',' teammate start year ',' service start year ', and endpoint player names.", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "从 'Tim Duncan' 出发，找出距离在两步内 '喜欢' 程度在95到100之间的所有实体和关系子图。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "Can you help me find all the entities that Tony Parker likes?", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "您好，请问您能帮我查找一下与名为'Rudy'的球员节点有0或1跳服务关系的球员姓名吗？", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "查看和胸痛相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"胸痛\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"胸痛\" :symptom{})], [(\"X综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"Ⅰ型免疫母细胞性淋巴腺病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"上腔静脉综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"下呼吸道感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"不动杆菌感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"主动脉夹层\")-[:has_symptom@0{}]->(\"胸痛\"), (\"乳腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"产碱杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"传导性腹痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"假单胞菌感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性心包缺如或缺损\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性肺动静脉瘘\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性肺囊肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性食管重复\")-[:has_symptom@0{}]->(\"胸痛\"), (\"军团菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"冠状动脉供血不足\")-[:has_symptom@0{}]->(\"胸痛\"), (\"创伤性血胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"化学液体吸入\")-[:has_symptom@0{}]->(\"胸痛\"), (\"卡普兰综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"原发性高脂蛋白血症与黄瘤增生病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"双向性室性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"呼吸性碱中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"呼吸性细支气管炎间质肺病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"呼吸性细支气管相关的间质性肺疾病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"嗜酸性细胞增多症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"坏死性结节病样肉芽肿病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"大叶性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"妊娠合并系统性红斑狼疮\")-[:has_symptom@0{}]->(\"胸痛\"), (\"婴幼儿胃食管反流\")-[:has_symptom@0{}]->(\"胸痛\"), (\"实喘\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿下腔静脉阻塞综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿军团病肾病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿埃博拉病毒病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿急性支气管炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿急性气管支气管炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿慢性支气管炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿支原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿热带嗜酸性粒细胞增多症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿纵隔压迫综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿结核性胸膜炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺不张\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺出血-肾炎综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺栓塞\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺水肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺泡性蛋白沉积症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺脓肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺隔离症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿衣原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿韦格纳肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿食管化学性烧伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"左房恶性黏液瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"巴斯德菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"广州管圆线虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弗郎西丝菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"张力性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫型间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫性恶性间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫性胸膜间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫性食管痉挛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包切开术后综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包囊肿与心包憩室\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包积液\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包转移瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心尖肥厚型心肌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心绞痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心肌梗塞并发心室间隔穿破\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏瓣膜关闭不全\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏神经症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏钝性闭合伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏黏液瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心血瘀阻\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性侵袭型肺曲霉病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性冠脉综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性嗜酸性粒细胞性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性感染性心内膜炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性特发性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性肺源性心脏病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"惠普尔病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"感染性肋软骨炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"支气管中心性肉芽肿病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"放射性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"新生儿肺不张\")-[:has_symptom@0{}]->(\"胸痛\"), (\"早期复极综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"束支折返性室性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"枸橼酸杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"柯萨奇病毒疹\")-[:has_symptom@0{}]->(\"胸痛\"), (\"气管支气管异物\")-[:has_symptom@0{}]->(\"胸痛\"), (\"氯气中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"汽油中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"沙眼衣原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"沙门氏菌性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"沙雷菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"流行性斑疹伤寒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"淋巴瘤样肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"淋巴管平滑肌瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"炭疽病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"片吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"特发性含铁血黄素沉着症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"特发性嗜酸性粒细胞增多综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"特发性高嗜酸性细胞综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"猝死型冠心病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"球形肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"甲型H1N1流感\")-[:has_symptom@0{}]->(\"胸痛\"), (\"甲醛中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"痧气\")-[:has_symptom@0{}]->(\"胸痛\"), (\"痰火\")-[:has_symptom@0{}]->(\"胸痛\"), (\"真菌性关节炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"石棉肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"矽肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"硬化剂治疗引起的食管损害\")-[:has_symptom@0{}]->(\"胸痛\"), (\"稳定型心绞痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"窦性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"类肺炎性胸腔积液\")-[:has_symptom@0{}]->(\"胸痛\"), (\"类风湿关节炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"系统性红斑狼疮\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔畸胎瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔脓肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔间叶源性肿瘤及其他肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔非霍奇金恶性淋巴肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔非霍奇金淋巴瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"细粒棘球蚴病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"细菌性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结核性胸膜炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结核病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结肠类癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结节病性心肌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"继发性肺结核\")-[:has_symptom@0{}]->(\"胸痛\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"羌虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人上腔静脉受压综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人乳腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人变异型心绞痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人支原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人病态窦房结综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人肺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人自发性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人阳性杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人院内获得性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肋骨骨折\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肝咳\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肝火犯肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肠球菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺假性淋巴瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺动脉高压\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺动静脉瘘\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺动静脉瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺宫崎肺吸虫症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺并殖吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺曲菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺栓塞\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺栓塞和肺梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺毛霉病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺泡癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺泡蛋白沉着症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺泡蛋白质沉积症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎克雷白杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎性假瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎球菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎衣原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎链球菌性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺爆震伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺真菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺组织细胞增生症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺脓肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺芽生菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺螨病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺诺卡菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺错构瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺隔离症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肿瘤性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胁痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胃扭转\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胆固醇脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"背痈\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸主动脉夹层动脉瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸内异物\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸壁骨肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸椎病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸椎结核椎旁脓肿穿入胸腔\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腔积液\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺囊肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺小细胞癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺类癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸膜间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸长神经卡压症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸降主动脉动脉瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸骨骨折\")-[:has_symptom@0{}]->(\"胸痛\"), (\"脑膜炎奈瑟菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膀胱移行细胞癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膈上食管憩室\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膈扑动\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膈疝\")-[:has_symptom@0{}]->(\"胸痛\"), (\"自发性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"致肠细胞病变人孤儿病毒感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"良性阵发性腹膜炎综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"药物导致的肺部疾病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"获得性免疫缺陷综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血栓形成\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血管损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"诺卡菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"转移性胸膜肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"输血后血小板减少性紫癜\")-[:has_symptom@0{}]->(\"胸痛\"), (\"过度通气综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"遗传性乳腺癌-卵巢癌综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"铁尘肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"铝尘肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"锑末沉着症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"锡尘肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"镍中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"闭合性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"青年心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"非ST段抬高心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"韦格内肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"韦格纳肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"颈椎小关节创伤性退变性关节炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管囊肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管穿孔\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管穿透性损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"麦格综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"鼠疫耶尔森菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\")]]', '[[(\"主动脉夹层\" :disease{}), (\"先天性食管重复\" :disease{}), (\"冠状动脉供血不足\" :symptom{} :disease{}), (\"化学液体吸入\" :disease{}), (\"小儿肺不张\" :disease{}), (\"心脏黏液瘤\" :disease{}), (\"特发性含铁血黄素沉着症\" :disease{}), (\"特发性嗜酸性粒细胞增多综合征\" :disease{}), (\"甲型H1N1流感\" :disease{}), (\"矽肺\" :disease{}), (\"纵隔非霍奇金恶性淋巴肿瘤\" :disease{}), (\"结肠类癌\" :disease{}), (\"老年人上腔静脉受压综合征\" :disease{}), (\"老年人乳腺癌\" :disease{}), (\"老年人肺栓塞\" :disease{}), (\"肺动静脉瘘\" :symptom{} :disease{}), (\"肺动静脉瘤\" :disease{}), (\"肺泡癌\" :disease{}), (\"肺泡蛋白质沉积症\" :disease{}), (\"胸内异物\" :disease{}), (\"胸壁骨肿瘤\" :disease{}), (\"胸降主动脉动脉瘤\" :disease{}), (\"自发性气胸\" :disease{}), (\"血管损伤\" :disease{}), (\"麦格综合征\" :disease{}), (\"Ⅰ型免疫母细胞性淋巴腺病\" :disease{}), (\"不动杆菌感染\" :disease{}), (\"坏死性结节病样肉芽肿病\" :disease{}), (\"小儿埃博拉病毒病\" :disease{}), (\"小儿热带嗜酸性粒细胞增多症\" :disease{}), (\"小儿肺泡性蛋白沉积症\" :disease{}), (\"心尖肥厚型心肌病\" :disease{}), (\"感染性肋软骨炎\" :disease{}), (\"新生儿肺不张\" :disease{}), (\"气管支气管异物\" :disease{}), (\"猝死型冠心病\" :disease{}), (\"窦性心动过速\" :disease{}), (\"系统性红斑狼疮\" :disease{}), (\"缺血性多形性室性心动过速\" :disease{}), (\"老年人变异型心绞痛\" :disease{}), (\"老年人病态窦房结综合征\" :disease{}), (\"肺宫崎肺吸虫症\" :disease{}), (\"肺毛霉病\" :disease{}), (\"肺真菌病\" :disease{}), (\"血栓形成\" :disease{}), (\"过度通气综合征\" :disease{}), (\"鼠疫耶尔森菌肺炎\" :disease{}), (\"乳腺癌\" :disease{}), (\"假单胞菌感染\" :disease{}), (\"小儿支原体肺炎\" :disease{}), (\"小儿肺水肿\" :disease{}), (\"弥漫性胸膜间皮瘤\" :disease{}), (\"心包切开术后综合征\" :disease{}), (\"心脏神经症\" :disease{}), (\"心脏钝性闭合伤\" :disease{}), (\"急性侵袭型肺曲霉病\" :disease{}), (\"急性感染性心内膜炎\" :disease{}), (\"急性特发性心包炎\" :disease{}), (\"惠普尔病\" :disease{}), (\"沙门氏菌性肺炎\" :disease{}), (\"淋巴瘤样肉芽肿\" :disease{}), (\"球形肺炎\" :disease{}), (\"细粒棘球蚴病\" :disease{}), (\"肋骨骨折\" :disease{}), (\"肺动脉高压\" :disease{}), (\"肺损伤\" :disease{}), (\"肺栓塞\" :symptom{} :disease{}), (\"胸椎病\" :disease{}), (\"胸腺癌\" :disease{}), (\"膀胱移行细胞癌\" :disease{}), (\"膈扑动\" :disease{}), (\"呼吸性细支气管炎间质肺病\" :disease{}), (\"小儿急性支气管炎\" :disease{}), (\"小儿气胸\" :disease{}), (\"小儿纵隔压迫综合征\" :disease{}), (\"小儿肺隔离症\" :disease{}), (\"小儿韦格纳肉芽肿\" :disease{}), (\"弥漫性食管痉挛\" :disease{}), (\"心绞痛\" :symptom{} :disease{}), (\"心肌梗死后心包炎\" :disease{}), (\"急性脓胸\" :disease{}), (\"炭疽病\" :disease{}), (\"甲醛中毒\" :disease{}), (\"纵隔畸胎瘤\" :disease{}), (\"纵隔间叶源性肿瘤及其他肿瘤\" :disease{}), (\"结核性胸膜炎\" :disease{}), (\"结核病\" :disease{}), (\"结节病性心肌病\" :disease{}), (\"羌虫病\" :disease{}), (\"肠球菌肺炎\" :disease{}), (\"肺假性淋巴瘤\" :disease{}), (\"肺泡蛋白沉着症\" :disease{}), (\"肺爆震伤\" :disease{}), (\"肺病\" :disease{}), (\"肺组织细胞增生症\" :disease{}), (\"肺诺卡菌病\" :disease{}), (\"肺隔离症\" :disease{}), (\"获得性免疫缺陷综合征\" :disease{}), (\"遗传性乳腺癌-卵巢癌综合征\" :disease{}), (\"铝尘肺\" :disease{}), (\"锑末沉着症\" :disease{}), (\"镍中毒\" :disease{}), (\"韦格内肉芽肿\" :disease{}), (\"军团菌肺炎\" :disease{}), (\"小儿下腔静脉阻塞综合征\" :disease{}), (\"小儿慢性支气管炎\" :disease{}), (\"小儿肺栓塞\" :disease{}), (\"弥漫型间皮瘤\" :disease{}), (\"心包囊肿与心包憩室\" :disease{}), (\"心肌梗塞并发心室间隔穿破\" :disease{}), (\"心血瘀阻\" :disease{}), (\"放射性肺炎\" :disease{}), (\"早期复极综合征\" :disease{}), (\"汽油中毒\" :disease{}), (\"纵隔非霍奇金淋巴瘤\" :disease{}), (\"老年人院内获得性肺炎\" :disease{}), (\"肺脓肿\" :disease{}), (\"胁痛\" :disease{}), (\"胆固醇脓胸\" :disease{}), (\"上腔静脉综合征\" :disease{}), (\"传导性腹痛\" :symptom{} :disease{}), (\"先天性心包缺如或缺损\" :disease{}), (\"创伤性血胸\" :disease{}), (\"呼吸性细支气管相关的间质性肺疾病\" :disease{}), (\"嗜酸性细胞增多症\" :disease{}), (\"婴幼儿胃食管反流\" :disease{}), (\"实喘\" :disease{}), (\"广州管圆线虫病\" :disease{}), (\"弗郎西丝菌肺炎\" :disease{}), (\"张力性气胸\" :disease{}), (\"急性肺源性心脏病\" :disease{}), (\"枸橼酸杆菌肺炎\" :disease{}), (\"柯萨奇病毒疹\" :disease{}), (\"沙雷菌肺炎\" :disease{}), (\"淋巴管平滑肌瘤\" :disease{}), (\"稳定型心绞痛\" :disease{}), (\"类风湿关节炎\" :symptom{} :disease{}), (\"纵隔肿瘤\" :disease{}), (\"老年人支原体肺炎\" :disease{}), (\"老年人阳性杆菌肺炎\" :disease{}), (\"肺并殖吸虫病\" :disease{}), (\"肺炎性假瘤\" :disease{}), (\"肺炎衣原体肺炎\" :disease{}), (\"肺错构瘤\" :disease{}), (\"膈上食管憩室\" :disease{}), (\"妊娠合并系统性红斑狼疮\" :disease{}), (\"小儿军团病肾病\" :disease{}), (\"小儿肺脓肿\" :disease{}), (\"小儿衣原体肺炎\" :disease{}), (\"左房恶性黏液瘤\" :disease{}), (\"心肌梗死\" :symptom{} :disease{}), (\"急性冠脉综合征\" :disease{}), (\"急性嗜酸性粒细胞性肺炎\" :disease{}), (\"片吸虫病\" :disease{}), (\"硬化剂治疗引起的食管损害\" :disease{}), (\"肝咳\" :disease{}), (\"肺炎球菌肺炎\" :disease{}), (\"肺芽生菌病\" :disease{}), (\"胃扭转\" :disease{}), (\"脓胸\" :symptom{} :disease{}), (\"药物导致的肺部疾病\" :disease{}), (\"血气胸\" :disease{}), (\"转移性胸膜肿瘤\" :disease{}), (\"输血后血小板减少性紫癜\" :disease{}), (\"闭合性气胸\" :disease{}), (\"韦格纳肉芽肿\" :disease{}), (\"下呼吸道感染\" :disease{}), (\"呼吸性碱中毒\" :symptom{} :disease{}), (\"小儿结核性胸膜炎\" :disease{}), (\"弥漫性恶性间皮瘤\" :disease{}), (\"心包积液\" :symptom{} :disease{}), (\"心包肿瘤\" :disease{}), (\"心包转移瘤\" :disease{}), (\"急性心包炎\" :disease{}), (\"支气管中心性肉芽肿病\" :disease{}), (\"流行性斑疹伤寒\" :disease{}), (\"特发性高嗜酸性细胞综合征\" :disease{}), (\"痧气\" :disease{}), (\"痰火\" :disease{}), (\"真菌性关节炎\" :disease{}), (\"细菌性心包炎\" :disease{}), (\"缺血性心肌病\" :disease{}), (\"老年人肺癌\" :disease{}), (\"老年人自发性气胸\" :disease{}), (\"肝火犯肺\" :disease{}), (\"肺炎杆菌肺炎\" :disease{}), (\"胸主动脉夹层动脉瘤\" :disease{}), (\"胸腺囊肿\" :disease{}), (\"胸腺小细胞癌\" :disease{}), (\"胸腺类癌\" :disease{}), (\"胸长神经卡压症\" :disease{}), (\"诺卡菌病\" :disease{}), (\"青年心肌梗死\" :disease{}), (\"非ST段抬高心肌梗死\" :disease{}), (\"颈椎小关节创伤性退变性关节炎\" :disease{}), (\"食管损伤\" :disease{}), (\"食管穿孔\" :disease{}), (\"食管穿透性损伤\" :disease{}), (\"X综合征\" :disease{}), (\"产碱杆菌肺炎\" :disease{}), (\"先天性肺囊肿\" :disease{}), (\"原发性高脂蛋白血症与黄瘤增生病\" :disease{}), (\"双向性室性心动过速\" :disease{}), (\"大叶性肺炎\" :disease{}), (\"小儿急性气管支气管炎\" :disease{}), (\"小儿肺出血-肾炎综合征\" :disease{}), (\"小儿脓胸\" :disease{}), (\"小儿食管化学性烧伤\" :disease{}), (\"巴斯德菌肺炎\" :disease{}), (\"心包间皮瘤\" :disease{}), (\"急性心肌梗死\" :disease{}), (\"束支折返性室性心动过速\" :disease{}), (\"石棉肺\" :disease{}), (\"类肺炎性胸腔积液\" :disease{}), (\"胸椎结核椎旁脓肿穿入胸腔\" :disease{}), (\"胸膜间皮瘤\" :disease{}), (\"胸骨骨折\" :disease{}), (\"腺癌\" :disease{}), (\"良性阵发性腹膜炎综合征\" :disease{}), (\"血吸虫病\" :disease{}), (\"锡尘肺\" :disease{}), (\"先天性肺动静脉瘘\" :disease{}), (\"卡普兰综合征\" :disease{}), (\"心脏瓣膜关闭不全\" :disease{}), (\"氯气中毒\" :disease{}), (\"沙眼衣原体肺炎\" :disease{}), (\"纵隔脓肿\" :disease{}), (\"继发性肺结核\" :disease{}), (\"肺吸虫病\" :disease{}), (\"肺曲菌病\" :disease{}), (\"肺栓塞和肺梗死\" :disease{}), (\"肺炎克雷白杆菌肺炎\" :disease{}), (\"肺炎链球菌性肺炎\" :disease{}), (\"肺螨病\" :disease{}), (\"肿瘤性心包炎\" :disease{}), (\"背痈\" :disease{}), (\"胸腔积液\" :symptom{} :disease{}), (\"脑膜炎奈瑟菌肺炎\" :disease{}), (\"膈疝\" :disease{}), (\"致肠细胞病变人孤儿病毒感染\" :disease{}), (\"铁尘肺\" :disease{}), (\"食管囊肿\" :disease{})], [(\"主动脉夹层\")-[:accompany_with@0{}]->(\"主动脉夹层\"), (\"主动脉夹层\")-[:accompany_with@0{}]->(\"血管损伤\"), (\"冠状动脉供血不足\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"冠状动脉供血不足\")-[:accompany_with@0{}]->(\"心绞痛\"), (\"矽肺\")-[:accompany_with@0{}]->(\"自发性气胸\"), (\"老年人上腔静脉受压综合征\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"老年人乳腺癌\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺动静脉瘤\")-[:has_symptom@0{}]->(\"肺动静脉瘘\"), (\"肺动静脉瘤\")-[:accompany_with@0{}]->(\"急性心肌梗死\"), (\"胸内异物\")-[:accompany_with@0{}]->(\"脓胸\"), (\"自发性气胸\")-[:accompany_with@0{}]->(\"血气胸\"), (\"麦格综合征\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心尖肥厚型心肌病\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"新生儿肺不张\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"系统性红斑狼疮\")-[:accompany_with@0{}]->(\"系统性红斑狼疮\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"老年人变异型心绞痛\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"肺宫崎肺吸虫症\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"肺毛霉病\")-[:accompany_with@0{}]->(\"心肌梗死\"), (\"肺真菌病\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"血栓形成\")-[:accompany_with@0{}]->(\"肺栓塞\"), (\"过度通气综合征\")-[:accompany_with@0{}]->(\"呼吸性碱中毒\"), (\"鼠疫耶尔森菌肺炎\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"小儿支原体肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"弥漫性胸膜间皮瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心包切开术后综合征\")-[:has_symptom@0{}]->(\"心包积液\"), (\"心脏神经症\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"急性特发性心包炎\")-[:has_symptom@0{}]->(\"心包积液\"), (\"惠普尔病\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"肋骨骨折\")-[:has_symptom@0{}]->(\"传导性腹痛\"), (\"肺动脉高压\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"小儿气胸\")-[:accompany_with@0{}]->(\"张力性气胸\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"心包积液\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"心肌梗死后心包炎\")-[:accompany_with@0{}]->(\"急性心肌梗死\"), (\"急性脓胸\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"纵隔畸胎瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"纵隔间叶源性肿瘤及其他肿瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"结核性胸膜炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"遗传性乳腺癌-卵巢癌综合征\")-[:accompany_with@0{}]->(\"乳腺癌\"), (\"弥漫型间皮瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"弥漫型间皮瘤\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"心包囊肿与心包憩室\")-[:accompany_with@0{}]->(\"上腔静脉综合征\"), (\"纵隔非霍奇金淋巴瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"老年人院内获得性肺炎\")-[:accompany_with@0{}]->(\"急性心肌梗死\"), (\"老年人院内获得性肺炎\")-[:accompany_with@0{}]->(\"脓胸\"), (\"胆固醇脓胸\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"创伤性血胸\")-[:has_symptom@0{}]->(\"脓胸\"), (\"创伤性血胸\")-[:accompany_with@0{}]->(\"脓胸\"), (\"实喘\")-[:accompany_with@0{}]->(\"实喘\"), (\"弗郎西丝菌肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"弗郎西丝菌肺炎\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"张力性气胸\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"急性肺源性心脏病\")-[:accompany_with@0{}]->(\"肺动脉高压\"), (\"柯萨奇病毒疹\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"淋巴管平滑肌瘤\")-[:has_symptom@0{}]->(\"心包积液\"), (\"老年人支原体肺炎\")-[:accompany_with@0{}]->(\"心包积液\"), (\"肺并殖吸虫病\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺并殖吸虫病\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"膈上食管憩室\")-[:accompany_with@0{}]->(\"弥漫性食管痉挛\"), (\"妊娠合并系统性红斑狼疮\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"小儿肺脓肿\")-[:has_symptom@0{}]->(\"脓胸\"), (\"小儿肺脓肿\")-[:accompany_with@0{}]->(\"脓胸\"), (\"急性冠脉综合征\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"急性冠脉综合征\")-[:accompany_with@0{}]->(\"心肌梗死\"), (\"硬化剂治疗引起的食管损害\")-[:has_symptom@0{}]->(\"脓胸\"), (\"硬化剂治疗引起的食管损害\")-[:accompany_with@0{}]->(\"食管穿孔\"), (\"肺芽生菌病\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺芽生菌病\")-[:accompany_with@0{}]->(\"脓胸\"), (\"胃扭转\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"转移性胸膜肿瘤\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"转移性胸膜肿瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"转移性胸膜肿瘤\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"闭合性气胸\")-[:accompany_with@0{}]->(\"肋骨骨折\"), (\"弥漫性恶性间皮瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心包转移瘤\")-[:has_symptom@0{}]->(\"心包积液\"), (\"细菌性心包炎\")-[:has_symptom@0{}]->(\"脓胸\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"老年人自发性气胸\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"老年人自发性气胸\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"老年人自发性气胸\")-[:accompany_with@0{}]->(\"血气胸\"), (\"胸长神经卡压症\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"胸长神经卡压症\")-[:accompany_with@0{}]->(\"心绞痛\"), (\"青年心肌梗死\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"非ST段抬高心肌梗死\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"食管穿透性损伤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"大叶性肺炎\")-[:accompany_with@0{}]->(\"脓胸\"), (\"小儿脓胸\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"小儿食管化学性烧伤\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"小儿食管化学性烧伤\")-[:accompany_with@0{}]->(\"食管穿孔\"), (\"巴斯德菌肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心包间皮瘤\")-[:has_symptom@0{}]->(\"心包积液\"), (\"心包间皮瘤\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"类肺炎性胸腔积液\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"胸椎结核椎旁脓肿穿入胸腔\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"先天性肺动静脉瘘\")-[:has_symptom@0{}]->(\"肺动静脉瘘\"), (\"卡普兰综合征\")-[:has_symptom@0{}]->(\"类风湿关节炎\"), (\"卡普兰综合征\")-[:accompany_with@0{}]->(\"肺动脉高压\"), (\"沙眼衣原体肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺吸虫病\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"肺栓塞和肺梗死\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"肺栓塞和肺梗死\")-[:accompany_with@0{}]->(\"肺动脉高压\"), (\"肿瘤性心包炎\")-[:has_symptom@0{}]->(\"心包积液\"), (\"脑膜炎奈瑟菌肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\")]]']"}
{"prompt": "Hey, can you help me find someone who has a 'like' relationship with 'Tim Duncan'? And then find out who these people 'serve' for?", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "与埃尔德·沃普尔具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"埃尔德·沃普尔\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Identify the team names and player names associated with 'LaMarcus Aldridge'.", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "雷古勒斯·布莱克的母亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'母亲'}]-(n1) WHERE n.character.name=='雷古勒斯·布莱克' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"沃尔布加·布莱克\" :character{marital: \"丧偶\", name: \"沃尔布加·布莱克\", dead: \"1985年(59或60岁)\", born: \"1925年\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "Hey, can you help me find the entity 'Tim Duncan' that this player likes with a 90 degree preference? Also, can you help me identify all entities and their relationships within a distance of 2 to 3 from him?", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "呼吸系统疾病伴发的精神障碍的治疗药物有哪些？", "content": "GO FROM \"呼吸系统疾病伴发的精神障碍\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"奋乃静片\"]', '[\"氟哌啶醇注射液\"]', '[\"氟哌啶醇片\"]', '[\"氢溴酸加兰他敏分散片\"]', '[\"脑蛋白水解物注射液\"]']"}
{"prompt": "骨外软骨肉瘤的发病原因是什么？", "content": "MATCH (n:disease{name:\"骨外软骨肉瘤\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"本病病因目前尚未完全明白，可由骨骺软骨游离至骨表面生长而成;亦可起源于鼓膜细胞层或起源于肌腱附着的前软骨纤维组织，遗传学方面，8，11，19号染色体机构异常与骨软骨瘤的发生有一定的关系。\"]']"}
{"prompt": "找出喜欢名为'Tim Duncan'的球员且喜好程度为90的所有实体，且与'Tim Duncan'的关系为2到3跳，返回这些实体及它们与该球员的关系。", "content": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")], (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]"]}
{"prompt": "得了心脏病推荐吃什么药？", "content": "GO FROM \"心脏病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"依托红霉素片\"]', '[\"依托红霉素颗粒\"]', '[\"地高辛片\"]', '[\"琥乙红霉素片\"]', '[\"琥乙红霉素颗粒\"]']"}
{"prompt": "能帮我返回哈方·蒙特到约塞利德·瓦德考克的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"哈方·蒙特\" TO \"约塞利德·瓦德考克\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Can you help me find the name of a player named 'Giannis Antetokounmpo'?", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "查看和神经棘红细胞增多症相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"神经棘红细胞增多症\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"神经棘红细胞增多症\" :disease{})], [(\"神经棘红细胞增多症\")-[:need_check@0{}]->(\"棘形红细胞\"), (\"神经棘红细胞增多症\")-[:need_check@0{}]->(\"肌电图\"), (\"神经棘红细胞增多症\")-[:recommend_drug@0{}]->(\"扑米酮片\"), (\"神经棘红细胞增多症\")-[:recommend_drug@0{}]->(\"盐酸苯海拉明注射液\"), (\"神经棘红细胞增多症\")-[:recommend_drug@0{}]->(\"盐酸苯海索片\"), (\"神经棘红细胞增多症\")-[:recommend_drug@0{}]->(\"盐酸金刚烷胺片\"), (\"神经棘红细胞增多症\")-[:cure_department@0{}]->(\"神经内科\"), (\"神经棘红细胞增多症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神经棘红细胞增多症\")-[:has_symptom@0{}]->(\"不自主运动\"), (\"神经棘红细胞增多症\")-[:has_symptom@0{}]->(\"共济失调\"), (\"神经棘红细胞增多症\")-[:has_symptom@0{}]->(\"智能减退\"), (\"神经棘红细胞增多症\")-[:has_symptom@0{}]->(\"进食困难\"), (\"神经棘红细胞增多症\")-[:accompany_with@0{}]->(\"心肌病\"), (\"神经棘红细胞增多症\")-[:common_drug@0{}]->(\"盐酸苯海索片\"), (\"神经棘红细胞增多症\")-[:common_drug@0{}]->(\"盐酸金刚烷胺片\")]]', '[[(\"神经内科\" :department{}), (\"智能减退\" :symptom{}), (\"肌电图\" :check{}), (\"盐酸金刚烷胺片\" :drug{}), (\"心肌病\" :disease{}), (\"盐酸苯海拉明注射液\" :drug{}), (\"扑米酮片\" :drug{}), (\"药物治疗\" :cure{}), (\"进食困难\" :symptom{}), (\"不自主运动\" :symptom{}), (\"盐酸苯海索片\" :drug{}), (\"棘形红细胞\" :check{}), (\"共济失调\" :symptom{} :disease{})], [(\"心肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"共济失调\")-[:need_check@0{}]->(\"肌电图\"), (\"共济失调\")-[:cure_department@0{}]->(\"神经内科\"), (\"共济失调\")-[:cure_way@0{}]->(\"药物治疗\")]]']"}
{"prompt": "Create a 'like' relationship between two entities, with 'Tim Duncan' liking 'Tim Parker' to 99 degrees and 'Tim Parker' liking 'Tony Parker' to 90 degrees.", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find all the entities' Russell Westbrook 'serves' and' likes', and return the IDs of these entities.", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "得了戊型病毒性肝炎的治疗科室是哪些？", "content": "GO FROM \"戊型病毒性肝炎\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"肝病\"]']"}
{"prompt": "您好，请帮我查找一下与名为'Tim Duncan'的球员有关系的关系类型及数量。", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "Find all the entities that the player named 'Damian Lillard' likes and return their age information, sorted by age, and return the top three entities and their ages.", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "Hello, please help me find the attributes of the 'Boris Diaw' player and return the player node.", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "帕金 (追球手II)的父亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='帕金 (追球手II)' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "小肠气痛的发病原因是什么？", "content": "MATCH (n:disease{name:\"小肠气痛\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"腹肌病变(45%) 中老人和多次妊娠者因腹肌部分变性或退行性变腹壁更加脆弱。故当腹部压力长时间较高，腹肌受到过度牵张时，则内脏即由脐周薄弱处脱出。脐疝的囊壁及被覆层较薄，疝内容物似在皮下内容物初期多为大网膜，随后还有小肠和结肠疝内容物与脐疝疝囊之间常发生粘连，形成多房性的间隙有时亦可出现肠梗阻。孕妇或肝硬化伴腹水患者，如伴发脐疝有时会发生自发性或外伤性穿破。 先天性因素(25%) 脐带脱落后，脐部瘢痕区由于胎儿阶段脐带从腹壁穿过，是腹壁一先天性薄弱处;在婴儿期，两侧腹肌未完全在中线合拢，留有缺损，在医学上称为脐环。当哭闹过多、咳嗽、腹泻等促使腹内压力增高时，便会导致腹腔内容物，特别是小肠，连同腹膜、腹壁皮肤一起由脐部逐渐向外顶出，形成脐疝。\"]']"}
{"prompt": "找出与 'Dwight Howard' 通过 '喜欢' 或 '队友' 关系相连的实体，返回这些实体的喜欢程度、队友开始年份和终点实体名称。", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "找出和埃尔德·沃普尔相关的两个人？", "content": "MATCH (n:character{name:'埃尔德·沃普尔'})-[e]-(n1) return n LIMIT 2", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"埃尔德·沃普尔\" :character{name: \"埃尔德·沃普尔\", marital: \"\", born: \"早于1970年\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]']"}
{"prompt": "找出与 'Dwight Howard' 有 '喜欢' 或 '队友' 关系的实体，返回这些实体的喜欢程度、队友开始年份和终点实体名称。", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "老年人支气管扩张的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"老年人支气管扩张\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.0053%\"]']"}
{"prompt": "心脏病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"心脏病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.03%\"]']"}
{"prompt": "小儿糖原贮积病Ⅳ型的主要症状有哪些？", "content": "MATCH (n:disease{name:\"小儿糖原贮积病Ⅳ型\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "维奥莱塔·伯斯德的丈夫是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='维奥莱塔·伯斯德' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"西格纳斯·布莱克二世\" :character{marital: \"已婚\", name: \"西格纳斯·布莱克二世\", dead: \"1943年(54岁)\", born: \"1889年\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "你能帮我找一下'Manu Ginobili'在30到40岁之间的队友和喜欢的人吗？我想知道他们的年龄和姓名。\"", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "Find the vertex with ID 'Paul Gasol' and find all the teams it connects to through the effectiveness relationship. Return the name of this player and the team he serves..", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "芙蓉·德拉库尔的眼睛颜色是什么？", "content": "MATCH (n:character{name:'芙蓉·德拉库尔'}) return n.character.eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"湛蓝\"]']"}
{"prompt": "嘿，你能帮我找出年龄大于38的实体，这些实体与'Tim Duncan'有什么关系和信息吗？", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "杰克·斯劳珀是哪个学院的？", "content": "MATCH (n:character{name:'杰克·斯劳珀'})-[e:learn_from]-(n1:college) return n1.college.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"格兰芬多学院\"]']"}
{"prompt": "找出所有 '喜欢' 'Steve Nash' 的实体，并关系中目标实体。", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "高血压的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"15.8%\"]']"}
{"prompt": "Hey, can you help me find a player named 'Tim Duncan'? I need to know his age and ID, and finally, I need to display his detailed information.", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "弗雷德·韦斯莱是亚瑟·韦斯莱的什么关系？", "content": "MATCH (n:character{name:'亚瑟·韦斯莱'})-[e]-(n1:character{name:'弗雷德·韦斯莱'}) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"弗雷德·韦斯莱\" :character{marital: \"单身\", name: \"弗雷德·韦斯莱\", dead: \"1998年5月2日 (20岁)霍格沃茨城堡，苏格兰，英国\", born: \"1978年4月1日，英国\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"棕色\", gender: \"男\"})]', '[(\"弗雷德·韦斯莱\" :character{marital: \"单身\", name: \"弗雷德·韦斯莱\", dead: \"1998年5月2日 (20岁)霍格沃茨城堡，苏格兰，英国\", born: \"1978年4月1日，英国\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"棕色\", gender: \"男\"})]']"}
{"prompt": "莫瑞根的后裔有哪些？", "content": "MATCH (n:character{name:'莫瑞根'})-[e:kindred{rel_type:'后裔'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"伊索特·塞耶\" :character{marital: \"已婚\", name: \"伊索特·塞耶\", dead: \"晚于1703年年\", born: \"约1603年 伊尔弗莫尼小屋，柯姆洛格拉谷地，凯里郡，爱尔兰 \", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]', '[(\"威廉·塞耶\" :character{marital: \"已婚\", name: \"威廉·塞耶\", dead: \"约1608年\", born: \"\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "得了高血压推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='高血压' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"清盐菜花\"]', '[\"灵芝羹\"]', '[\"素熘菜花\"]', '[\"胡萝卜粥\"]', '[\"芹菜粥\"]', '[\"葛根粉粥\"]', '[\"香脆芹菜叶\"]']"}
{"prompt": "您好，请帮我找一下ID为'Tim Duncan'的球员所喜欢的实体路径数量，然后告诉我。", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "Identify the entities connected to 'Danny Green' through a 'like' relationship, then identify the 'teammates' of these entities, and return the IDs of the source and target nodes of these entities and their relationships.", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "Hey, can you help me check the teammates and people he likes of 'Ginobili' between the ages of 30 and 40? Then tell me the ages and names of these people.", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "查找年龄大于30.5的球员，返回这些球员的ID和年龄。", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "查看和糖尿病相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"糖尿病\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"糖尿病\" :disease{})], [(\"糖尿病\")-[:no_eat@0{}]->(\"冰糖\"), (\"糖尿病\")-[:no_eat@0{}]->(\"糖桂花\"), (\"糖尿病\")-[:no_eat@0{}]->(\"蜂蜜\"), (\"糖尿病\")-[:no_eat@0{}]->(\"麦芽糖\"), (\"糖尿病\")-[:need_check@0{}]->(\"口服葡萄糖耐量试验\"), (\"糖尿病\")-[:need_check@0{}]->(\"尿糖（GLU）\"), (\"糖尿病\")-[:need_check@0{}]->(\"抗胰岛素受体抗体\"), (\"糖尿病\")-[:need_check@0{}]->(\"极低密度脂蛋白胆固醇（VLDL-c，VLDL-ch ）\"), (\"糖尿病\")-[:need_check@0{}]->(\"空腹血葡萄糖\"), (\"糖尿病\")-[:need_check@0{}]->(\"胰岛素\"), (\"糖尿病\")-[:need_check@0{}]->(\"胰岛素原\"), (\"糖尿病\")-[:need_check@0{}]->(\"血清乙酰乙酸\"), (\"糖尿病\")-[:need_check@0{}]->(\"血糖\"), (\"糖尿病\")-[:need_check@0{}]->(\"血糖仪试纸带法\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"伏格列波糖片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"十八味诃子利尿胶囊\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"天麦消渴片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"抗饥消渴片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"消渴平片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"消渴灵片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"渴乐宁胶囊\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"玉泉颗粒\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"米格列醇片\"), (\"糖尿病\")-[:recommend_drug@0{}]->(\"降糖宁胶囊\"), (\"糖尿病\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病\")-[:do_eat@0{}]->(\"芹菜\"), (\"糖尿病\")-[:do_eat@0{}]->(\"茄子\"), (\"糖尿病\")-[:do_eat@0{}]->(\"西葫芦\"), (\"糖尿病\")-[:do_eat@0{}]->(\"青椒\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"五谷糙米粥\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"五豆补益糙米粥\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"山楂核桃茶\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"木耳核桃炖豆腐\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"枸杞核桃粥\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"紫菜芙蓉汤\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"翡翠莲藕片\"), (\"糖尿病\")-[:recommend_eat@0{}]->(\"黄豆莲藕排骨汤\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"口渴\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"多尿\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"多饮\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"尿糖\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"气阴两虚\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"消瘦\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"烦渴多饮\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"血糖值升高\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"血糖升高\"), (\"糖尿病\")-[:has_symptom@0{}]->(\"餐后血糖高\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"尿毒症\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"糖尿病乳酸性酸中毒\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"糖尿病性神经病\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"糖尿病酮症酸中毒\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"高血压\"), (\"三高症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"人免疫缺陷病毒感染性肾损害\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"代谢综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"低血糖综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"假性甲状旁腺功能减退症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"假性黑棘皮病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"内分泌失调\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"分水岭区脑梗死\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"卓－艾氏综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"单纯性肥胖\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"口糜\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"吐失\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"失眠抑郁\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"婴儿腹部远心性脂肪营养不良\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"寒痹\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿共济失调毛细血管扩张综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿常染色体隐性小脑性共济失调\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿弹性假黄瘤\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿肥胖\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"小儿骨肉瘤\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"巨人症与肢端肥大症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"急性女阴溃疡\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"急性胆源性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"急性膀胱炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"慢性黏膜皮肤念珠菌病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"抗-HCVAg阳性\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"无症状性脑梗死\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"燥邪犯肺\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"牙科病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"牙龈炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"珠蛋白生成障碍性贫血\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"生殖器念珠菌病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"甲亢合并妊娠\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"甲状腺结节钙化\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"白癜风\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"皮肤白斑\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"皮肤穿入性毛囊和毛囊周角化病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"绝经期关节炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"绝经期尿路感染\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年人急性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年人甲状腺功能亢进症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年性哮喘\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"联合免疫缺陷病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肌强直性肌病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肠道菌群失调症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肾虚\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰痈\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰石病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰石症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰腺囊性纤维性变\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰腺癌\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"胰腺脓肿\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"自身免疫性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"艾滋病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"蛔虫性急性胰腺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"血色病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"视神经乳头水肿及视盘水肿\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"迟发性皮肤卟啉病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"骨肉瘤\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高泌乳素血症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高甘油三酯血症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高脂蛋白血症Ⅳ型\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"糖尿病\")-[:common_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病\")-[:common_drug@0{}]->(\"降糖宁胶囊\")]]', '[[(\"血糖仪试纸带法\" :check{}), (\"抗饥消渴片\" :drug{}), (\"山楂核桃茶\" :food{}), (\"糖尿病性神经病\" :disease{}), (\"生殖器念珠菌病\" :disease{}), (\"联合免疫缺陷病\" :disease{}), (\"胰痈\" :disease{}), (\"胰石病\" :disease{}), (\"高泌乳素血症\" :disease{}), (\"糖桂花\" :food{}), (\"口服葡萄糖耐量试验\" :check{}), (\"抗胰岛素受体抗体\" :check{}), (\"极低密度脂蛋白胆固醇（VLDL-c，VLDL-ch ）\" :check{}), (\"血糖\" :check{}), (\"米格列醇片\" :drug{}), (\"内分泌科\" :department{}), (\"尿糖\" :symptom{}), (\"消瘦\" :symptom{}), (\"三高症\" :disease{}), (\"假性黑棘皮病\" :disease{}), (\"婴儿腹部远心性脂肪营养不良\" :disease{}), (\"焦磷酸钙沉积病\" :disease{}), (\"绝经期尿路感染\" :disease{}), (\"十八味诃子利尿胶囊\" :drug{}), (\"天麦消渴片\" :drug{}), (\"玉泉颗粒\" :drug{}), (\"西葫芦\" :food{}), (\"口渴\" :symptom{}), (\"餐后血糖高\" :symptom{}), (\"小儿常染色体隐性小脑性共济失调\" :disease{}), (\"急性胆源性胰腺炎\" :disease{}), (\"老年人急性胰腺炎\" :disease{}), (\"自身免疫性胰腺炎\" :disease{}), (\"迟发性皮肤卟啉病\" :disease{}), (\"尿糖（GLU）\" :check{}), (\"血清乙酰乙酸\" :check{}), (\"降糖宁胶囊\" :drug{}), (\"木耳核桃炖豆腐\" :food{}), (\"翡翠莲藕片\" :food{}), (\"多饮\" :symptom{}), (\"尿毒症\" :disease{}), (\"糖尿病酮症酸中毒\" :symptom{} :disease{}), (\"慢性肾盂肾炎\" :disease{}), (\"无症状性脑梗死\" :disease{}), (\"燥邪犯肺\" :disease{}), (\"牙科病\" :disease{}), (\"老年人甲状腺功能亢进症\" :disease{}), (\"老年性哮喘\" :disease{}), (\"胰腺脓肿\" :disease{}), (\"血管性帕金森综合征\" :disease{}), (\"高甘油三酯血症\" :disease{}), (\"蜂蜜\" :food{}), (\"麦芽糖\" :food{}), (\"空腹血葡萄糖\" :check{}), (\"渴乐宁胶囊\" :drug{}), (\"枸杞核桃粥\" :food{}), (\"血糖升高\" :symptom{}), (\"糖尿病乳酸性酸中毒\" :disease{}), (\"人免疫缺陷病毒感染性肾损害\" :disease{}), (\"低血糖综合征\" :disease{}), (\"小儿骨肉瘤\" :disease{}), (\"甲亢合并妊娠\" :disease{}), (\"高尿酸血症肾病\" :disease{}), (\"胰岛素原\" :check{}), (\"消渴平片\" :drug{}), (\"五豆补益糙米粥\" :food{}), (\"代谢综合征\" :disease{}), (\"内分泌失调\" :disease{}), (\"肢端肥大症\" :disease{}), (\"肾虚\" :disease{}), (\"胰腺囊性纤维性变\" :disease{}), (\"艾滋病\" :disease{}), (\"胰岛素\" :check{}), (\"消渴灵片\" :drug{}), (\"药物治疗\" :cure{}), (\"芹菜\" :food{}), (\"气阴两虚\" :symptom{} :disease{}), (\"血糖值升高\" :symptom{}), (\"高血压\" :disease{}), (\"卓－艾氏综合征\" :disease{}), (\"慢性黏膜皮肤念珠菌病\" :disease{}), (\"白癜风\" :disease{}), (\"绝经期关节炎\" :disease{}), (\"肠道菌群失调症\" :disease{}), (\"冰糖\" :food{}), (\"伏格列波糖片\" :drug{}), (\"盐酸二甲双胍片\" :drug{}), (\"茄子\" :food{}), (\"青椒\" :food{}), (\"紫菜芙蓉汤\" :food{}), (\"多尿\" :symptom{}), (\"妊娠合并白血病\" :disease{}), (\"寒痹\" :disease{}), (\"小儿肥胖\" :disease{}), (\"皮肤白斑\" :disease{}), (\"肌强直性肌病\" :disease{}), (\"盐酸二甲双胍缓释片\" :drug{}), (\"黄豆莲藕排骨汤\" :food{}), (\"分水岭区脑梗死\" :disease{}), (\"单纯性肥胖\" :disease{}), (\"口糜\" :disease{}), (\"小儿共济失调毛细血管扩张综合征\" :disease{}), (\"小儿弹性假黄瘤\" :disease{}), (\"巨人症与肢端肥大症\" :disease{}), (\"急性女阴溃疡\" :disease{}), (\"急性膀胱炎\" :disease{}), (\"抗-HCVAg阳性\" :symptom{} :disease{}), (\"甲状腺结节钙化\" :disease{}), (\"皮肤穿入性毛囊和毛囊周角化病\" :disease{}), (\"红斑性肢痛症\" :disease{}), (\"胰石症\" :disease{}), (\"胰腺癌\" :disease{}), (\"血色病\" :disease{}), (\"视神经乳头水肿及视盘水肿\" :disease{}), (\"骨肉瘤\" :disease{}), (\"支持性治疗\" :cure{}), (\"五谷糙米粥\" :food{}), (\"烦渴多饮\" :symptom{}), (\"假性甲状旁腺功能减退症\" :disease{}), (\"吐失\" :disease{}), (\"失眠抑郁\" :disease{}), (\"牙龈炎\" :disease{}), (\"珠蛋白生成障碍性贫血\" :disease{}), (\"老年肺炎\" :disease{}), (\"蛔虫性急性胰腺炎\" :disease{}), (\"高脂蛋白血症Ⅳ型\" :disease{})], [(\"糖尿病性神经病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病性神经病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病性神经病\")-[:has_symptom@0{}]->(\"消瘦\"), (\"糖尿病性神经病\")-[:has_symptom@0{}]->(\"血糖升高\"), (\"生殖器念珠菌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"生殖器念珠菌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"联合免疫缺陷病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"联合免疫缺陷病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰石病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰石病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰石病\")-[:accompany_with@0{}]->(\"胰腺癌\"), (\"高泌乳素血症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"高泌乳素血症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高泌乳素血症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高泌乳素血症\")-[:accompany_with@0{}]->(\"肢端肥大症\"), (\"三高症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"三高症\")-[:do_eat@0{}]->(\"蜂蜜\"), (\"三高症\")-[:has_symptom@0{}]->(\"多尿\"), (\"三高症\")-[:has_symptom@0{}]->(\"多饮\"), (\"假性黑棘皮病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"假性黑棘皮病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"婴儿腹部远心性脂肪营养不良\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"婴儿腹部远心性脂肪营养不良\")-[:cure_way@0{}]->(\"药物治疗\"), (\"婴儿腹部远心性脂肪营养不良\")-[:do_eat@0{}]->(\"蜂蜜\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"高血压\"), (\"绝经期尿路感染\")-[:cure_way@0{}]->(\"药物治疗\"), (\"绝经期尿路感染\")-[:do_eat@0{}]->(\"蜂蜜\"), (\"小儿常染色体隐性小脑性共济失调\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿常染色体隐性小脑性共济失调\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性胆源性胰腺炎\")-[:no_eat@0{}]->(\"蜂蜜\"), (\"急性胆源性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性胆源性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性胆源性胰腺炎\")-[:accompany_with@0{}]->(\"胰腺脓肿\"), (\"老年人急性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人急性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人急性胰腺炎\")-[:recommend_eat@0{}]->(\"紫菜芙蓉汤\"), (\"自身免疫性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"自身免疫性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"迟发性皮肤卟啉病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"迟发性皮肤卟啉病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"尿毒症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病酮症酸中毒\")-[:no_eat@0{}]->(\"冰糖\"), (\"糖尿病酮症酸中毒\")-[:no_eat@0{}]->(\"麦芽糖\"), (\"糖尿病酮症酸中毒\")-[:need_check@0{}]->(\"血清乙酰乙酸\"), (\"糖尿病酮症酸中毒\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病酮症酸中毒\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病酮症酸中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾盂肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"无症状性脑梗死\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"无症状性脑梗死\")-[:cure_way@0{}]->(\"药物治疗\"), (\"燥邪犯肺\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"燥邪犯肺\")-[:cure_way@0{}]->(\"药物治疗\"), (\"牙科病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人甲状腺功能亢进症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"老年人甲状腺功能亢进症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人甲状腺功能亢进症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年性哮喘\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰腺脓肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"高甘油三酯血症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病乳酸性酸中毒\")-[:need_check@0{}]->(\"胰岛素\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"伏格列波糖片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"十八味诃子利尿胶囊\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"天麦消渴片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"抗饥消渴片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"消渴平片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"消渴灵片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"渴乐宁胶囊\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"玉泉颗粒\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"米格列醇片\"), (\"糖尿病乳酸性酸中毒\")-[:recommend_drug@0{}]->(\"降糖宁胶囊\"), (\"糖尿病乳酸性酸中毒\")-[:cure_department@0{}]->(\"内分泌科\"), (\"糖尿病乳酸性酸中毒\")-[:accompany_with@0{}]->(\"糖尿病性神经病\"), (\"糖尿病乳酸性酸中毒\")-[:accompany_with@0{}]->(\"糖尿病酮症酸中毒\"), (\"糖尿病乳酸性酸中毒\")-[:common_drug@0{}]->(\"盐酸二甲双胍片\"), (\"糖尿病乳酸性酸中毒\")-[:common_drug@0{}]->(\"降糖宁胶囊\"), (\"人免疫缺陷病毒感染性肾损害\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"低血糖综合征\")-[:need_check@0{}]->(\"空腹血葡萄糖\"), (\"低血糖综合征\")-[:need_check@0{}]->(\"胰岛素\"), (\"低血糖综合征\")-[:cure_department@0{}]->(\"内分泌科\"), (\"低血糖综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿骨肉瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿骨肉瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲亢合并妊娠\")-[:cure_department@0{}]->(\"内分泌科\"), (\"甲亢合并妊娠\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"甲亢合并妊娠\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲亢合并妊娠\")-[:has_symptom@0{}]->(\"消瘦\"), (\"高尿酸血症肾病\")-[:cure_department@0{}]->(\"内分泌科\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高尿酸血症肾病\")-[:has_symptom@0{}]->(\"多尿\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"代谢综合征\")-[:cure_department@0{}]->(\"内分泌科\"), (\"代谢综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"代谢综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"内分泌失调\")-[:cure_department@0{}]->(\"内分泌科\"), (\"内分泌失调\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾虚\")-[:accompany_with@0{}]->(\"高血压\"), (\"胰腺囊性纤维性变\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰腺囊性纤维性变\")-[:cure_way@0{}]->(\"药物治疗\"), (\"艾滋病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"艾滋病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"气阴两虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"药物治疗\"), (\"卓－艾氏综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性黏膜皮肤念珠菌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"慢性黏膜皮肤念珠菌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"白癜风\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"白癜风\")-[:cure_way@0{}]->(\"药物治疗\"), (\"绝经期关节炎\")-[:cure_department@0{}]->(\"内分泌科\"), (\"绝经期关节炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"绝经期关节炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"绝经期关节炎\")-[:has_symptom@0{}]->(\"血糖升高\"), (\"肠道菌群失调症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"高血压\"), (\"寒痹\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"寒痹\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肥胖\")-[:recommend_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"小儿肥胖\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肥胖\")-[:common_drug@0{}]->(\"盐酸二甲双胍缓释片\"), (\"皮肤白斑\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"皮肤白斑\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肌强直性肌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肌强直性肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"分水岭区脑梗死\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"分水岭区脑梗死\")-[:cure_way@0{}]->(\"药物治疗\"), (\"单纯性肥胖\")-[:need_check@0{}]->(\"胰岛素\"), (\"单纯性肥胖\")-[:cure_department@0{}]->(\"内分泌科\"), (\"单纯性肥胖\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"单纯性肥胖\")-[:cure_way@0{}]->(\"药物治疗\"), (\"口糜\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"口糜\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿共济失调毛细血管扩张综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿共济失调毛细血管扩张综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿弹性假黄瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"巨人症与肢端肥大症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"巨人症与肢端肥大症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"巨人症与肢端肥大症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"巨人症与肢端肥大症\")-[:has_symptom@0{}]->(\"多尿\"), (\"巨人症与肢端肥大症\")-[:has_symptom@0{}]->(\"多饮\"), (\"急性女阴溃疡\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性女阴溃疡\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性女阴溃疡\")-[:has_symptom@0{}]->(\"消瘦\"), (\"急性膀胱炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性膀胱炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"抗-HCVAg阳性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲状腺结节钙化\")-[:cure_department@0{}]->(\"内分泌科\"), (\"甲状腺结节钙化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"皮肤穿入性毛囊和毛囊周角化病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"皮肤穿入性毛囊和毛囊周角化病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"高血压\"), (\"胰石症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰石症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰石症\")-[:has_symptom@0{}]->(\"消瘦\"), (\"胰石症\")-[:accompany_with@0{}]->(\"胰腺癌\"), (\"胰腺癌\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰腺癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰腺癌\")-[:has_symptom@0{}]->(\"消瘦\"), (\"血色病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"血色病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"视神经乳头水肿及视盘水肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"视神经乳头水肿及视盘水肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"骨肉瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"骨肉瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"假性甲状旁腺功能减退症\")-[:cure_department@0{}]->(\"内分泌科\"), (\"假性甲状旁腺功能减退症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"假性甲状旁腺功能减退症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"吐失\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吐失\")-[:cure_way@0{}]->(\"药物治疗\"), (\"失眠抑郁\")-[:cure_way@0{}]->(\"药物治疗\"), (\"牙龈炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"牙龈炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"珠蛋白生成障碍性贫血\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"珠蛋白生成障碍性贫血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"蛔虫性急性胰腺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"蛔虫性急性胰腺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蛔虫性急性胰腺炎\")-[:accompany_with@0{}]->(\"胰腺脓肿\"), (\"高脂蛋白血症Ⅳ型\")-[:cure_department@0{}]->(\"内分泌科\"), (\"高脂蛋白血症Ⅳ型\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高脂蛋白血症Ⅳ型\")-[:cure_way@0{}]->(\"药物治疗\")]]']"}
{"prompt": "找出球员名字在'Grant Hill'和'Yao Ming'之间的所有球员，返回这些球员的信息。", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "Hello, please help me find the player with ID 'Carmelo' and tell me his age.", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "玛莎是哪个组织的成员？", "content": "MATCH (n:character{name:'玛莎'})-[e]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"伍氏孤儿院\" :group{name: \"伍氏孤儿院\"})]']"}
{"prompt": "鲍曼·赖特从属于哪个组织？", "content": "MATCH (n:character{name:'鲍曼·赖特'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"魁地奇\" :group{name: \"魁地奇\"})]']"}
{"prompt": "纵隔非霍奇金淋巴瘤的主要症状是什么？", "content": "MATCH (n:disease{name:\"纵隔非霍奇金淋巴瘤\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "鲁道夫·布兰德从属于哪个组织？", "content": "MATCH (n:character{name:'鲁道夫·布兰德'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"布兰德家庭\" :group{name: \"布兰德家庭\"})]', '[(\"海德堡猎犬队\" :group{name: \"海德堡猎犬队\"})]']"}
{"prompt": "Find a player named 'Jordan' and return the node information of that player.", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "染上高血压可能的原因是什么？", "content": "MATCH (n:disease{name:\"高血压\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"约75%的原发性高血压患者具有遗传素质(genetic predisposition)，同一家族中高血压患者常集中出现。据信原发性高血压是多基因遗传病。据报道，高血压患者及有高血压家族史而血压正常者有跨膜电解质转运紊乱，其血清中有一种激素样物质，可抑制Na+/K+-ATP酶活性，以致钠钾泵功能降低，导致细胞内Na+、Ca2+浓度增加，动脉壁SMC收缩加强，肾上腺素能受体(adrenergic receptor)密度增加，血管反应性加强。这些都有助于动脉血压升高。近来研究发现，血管紧张素(AGT)基因可能有15种缺陷，正常血压的人偶见缺陷，而高血压患者在AGT基因上的3个特定部位均有相同的变异。患高血压的兄弟或姐妹可获得父母的AGT基因的同一拷贝。有这种遗传缺隐的高血压患者，其血浆血管紧张素原水平高于对照组。 一般而言，日均摄盐量高的人群，其血压升高百分率或平均血压高于摄盐量低者。WHO在预防高血压措施中建议每人每日摄盐量应控制在5g以下。一项由32个国家参加共53个中心关于电解质与血压关系的研究结果表明，中国人群尿钠平均值为206mmol/24h，比其它中心高43mmol/24h，尿钠/钾比达6.7，是其它中心的2倍多。尿钠最高的是天津(242mmol/24h)。这与中国膳食的高钠、低钾有关。钾能促进排钠，吃大量蔬菜可增加钾摄入量，有可能保护动脉不受钠的不良作用影响。钙可减轻钠的升压作用，我国膳食普遍低钙，可能加重钠/钾对血压的作用。增加膳食钙摄量的干预研究表明，钙的增加使有些患者血压降低。 据调查表明，社会心理应激与高血压发病有密切关系。应激性生活事件包括：父母早亡、失恋、丧偶、家庭成员车祸死亡、病残、家庭破裂、经济政治冲击等。遭受生活事件刺激者高血压患病率比对照组高。据认为，社会心理应激可改变体内激素平衡，从而影响所有代谢过程。 肾髓质间质细胞分泌抗高血压脂质如前列腺素、抗高血压中性肾髓质脂等分泌失调，排钠功能障碍均可能与高血压发病有关。 一般认为，细动脉的交感神经纤维兴奋性增强是本病发病的重要神经因素。但是，交感神经节后纤维有两类： 1、缩血管纤维，递质为神经肽Y(neuropeptide Y，NPY)及去甲肾上腺素。 2、扩血管纤维，递质为降钙素基因相关肽(calcitonin gene related peptide，CGRP)及P物质。这两种纤维功能失衡，即前者功能强于后者时，才引起血压升高。近年来，中枢神经递质和神经肽，以及各种调节肽与高血压的关系已成为十分活跃的研究领域。据报道，CGRP可能抑制大鼠下丘脑去甲肾上腺素的释放，在外周它可能抑制肾上腺神经受刺激时去甲肾上腺素的释放。有报道，从哺乳动物心脏和脑中分离出利钠肽(A、B及C型)，启示了人体内有一个利钠肽家族。近来在局部肾素-血管紧张素系统(RAS)的研究取得了新进展。将小鼠肾素基因(Ren-2基因)经微注射装置注入大鼠卵细胞，形成了转基因大鼠种系TGR(mREN2)27，这种动物血压极高。用Northern印迹杂交法证明，Ren-2转基因表达在肾上腺、血管、胃肠及脑，并可表达于胸腺、生殖系统和肾。由于其表达于血管壁，可能使血管的血管紧张素形成增加，从而发生高血压和血管SMC肥大。 血压调控机制 多种因素都可以引起血压升高，心脏泵血能力加强(如心脏收缩力增加等)，使每秒钟泵出血液增加，另一种因素是大动脉失去了正常弹性，变得僵硬，当心脏泵出血液时，不能有效扩张，因此，每次心搏泵出的血流通过比正常狭小的空间，导致压力升高，这就是高血压多发生在动脉粥样硬化导致动脉壁增厚和变得僵硬的老年人的原因，由于神经和血液中激素的刺激，全身小动脉可暂时性收缩同样也引起血压的增高，可能导致血压升高的第三个因素是循环中液体容量增加，这常见于肾脏疾病时，肾脏不能充分从体内排出钠盐和水分，体内血容量增加，导致血压增高。 相反，如果心脏泵血能力受限，血管扩张或过多的体液丢失，都可导致血压下降，这些因素主要是通过肾脏功能和自主神经系统(神经系统中自动地调节身体许多功能的部分)的变化来调控。\"]']"}
{"prompt": "Hello, please help me identify entities older than 38 and the edges and information between these entities and 'Tim Duncan'.", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "您好，请帮我创建两个实体之间的'喜欢'关系。具体来说，'Tim Duncan'非常喜欢'Tim Parker'，程度为99，而'Tim Parker'也很喜欢'Tony Parker'，程度为90。", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "May I ask if you could help me find a favorite relationship with a rating of 666? I need to obtain the starting and ending entities of these relationships.", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "外阴银屑病的主要症状是什么？", "content": "MATCH (n:disease{name:\"外阴银屑病\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "染上慢性淋巴细胞性白血病可能的原因是什么？", "content": "MATCH (n:disease{name:\"慢性淋巴细胞性白血病\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"有报告在同一个家庭中多人发生B细胞型CLL，CLL患者第一代子女患CLL或其他恶性淋巴增生性疾病的危险性为普通人3倍，且多在年轻时发病，也提示遗传因素在家族性CLL发病中有重要作用。 p53基因为一种重要的肿瘤抑制基因，位于17p13.1部位，编码53-kD核酸磷酸蛋白。其突变或缺陷可能为近半数肿瘤患者的致病原因。17号染色体短臂缺失仅见于10%～15%的CLL患者。此外，还有10%～15% CLL患者有p53基因突变，伴有p53基因突变患者多为进展型，具有白血病细胞高增生率，生存期短，对一线治疗药物抵抗的临床特点，见于半数Richter综合征和B细胞幼淋细胞白血病，提示p53基因突变可能是某些CLL患者病程中获得性改变。 CLL细胞具有分泌多种细胞因子的能力，如TNF-，TGF-(转移生长因子)、IL-7(白介素-7)、IL-5、IL-2等，这些因子具有直接或间接刺激CLL白血病细胞增生或防止CLL细胞凋亡作用，同时具有抑制正常淋巴细胞和骨髓造血有关细胞增生作用，因而细胞因子与CLL患者发病和疾病进展均相关。 有学者研究后提出反转录病毒、电离辐射可引起该类型白血病。\"]']"}
{"prompt": "Can you help me find 'Manu Ginobili' teammates and loved ones between the ages of 30 and 40? I want to know their age and names. “", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "找出所有 'Boris Diaw' 所 '喜欢' 的实体，并返回这些实体的 ID。", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "染上戊型病毒性肝炎可能的原因是什么？", "content": "MATCH (n:disease{name:\"戊型病毒性肝炎\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"(一)发病原因 1983年Balayan等人首先用免疫电镜从感染者的粪标本中发现了HEV，1989年Reyes等人用分子克隆技术，获得了(HEV)cDNA克隆，并正式命名本病毒为戊型肝炎病毒(HEV)。 HEV为无包膜的圆球状颗粒，直径为27～34nm，表面有突起和缺刻，内部密度不均匀，1989年Reyes等首先得到HEV的基因克隆，研究表明，HEV基因组为单股正链DNA，全长7.2～7.6kb，编码2400～2533个氨基酸，由5′端非结构区(NS)和3′端结构区(S)组成，5′端和3′端各有一非编码区(NC)，其长分别为28bp和68bp，此外，3′端还有一个由150～300个腺苷酸残基组成的多腺苷(A)尾巴，本病毒不稳定，长期保存需放在液氮内，镁或锰离子有助于保持病毒颗粒的完整性，对高盐，氯化铯和氯仿敏感，在碱性环境中比较稳定，HEV的分类归属问题尚未最后肯定，最初曾归属于微小RNA病毒，后发现其在电镜下的形态和生物学特性与萼状病毒类似，因此又将HEV归入萼状病毒，但近来在分析HEV基因组核苷酸序列同源性时又发现其与萼状病毒不同，比较分析NS区基因组序列显示其与风疹病毒和甜菜坏死黄脉病毒相似，故有人建议将HEV归属于风疹病毒族α病毒亚组。 (二)发病机制 对戊肝的确切发病机制，目前知之尚较少，从灵长类动物实验及对志愿者研究结果推测，病毒可能主要经口感染，再由肠道循血运进入肝脏，在肝细胞内增殖复制后排到血及胆汁，最后随粪便排出体外，有无肝外复制暂未获结论，实验还表明，肝脏病变主要为病毒诱发的细胞免疫反应介导肝细胞溶解。 戊肝的病理改变与甲肝类似，可见汇管区有中性多核细胞浸润，Kupffer细胞增生，小叶内可见点状坏死，肝细胞气球样变，嗜酸性变及嗜酸小体，炎症反应轻，肝细胞内淤胆及毛细胆管胆栓形成则较多见，大多数戊肝患者之肝组织病理改变呈中度损坏，偶可见亚大块或大块坏死。\"]']"}
{"prompt": "凯特里奇的头发颜色是什么？", "content": "MATCH (n:character{name:'埃拉朵拉·凯特里奇'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"黑色\"]']"}
{"prompt": "Find the entities that 'Tim Duncan' likes' and the entities that this entity likes, and return the names of these entities, namely 'Player', 'Friend', and 'FoF'.", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "赫尔伯特·斯普林参与了多少个组织？", "content": "MATCH (n:character{name:'赫尔伯特·斯普林'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[2]']"}
{"prompt": "阿尔莫里克·索布里奇的头发颜色是什么？", "content": "MATCH (n:character{name:'阿尔莫里克·索布里奇'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"棕色\"]']"}
{"prompt": "餐后血糖过低症的治愈概率是多少？", "content": "MATCH (n:disease{name:\"餐后血糖过低症\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"75%\"]']"}
{"prompt": "特拉弗斯的血统是什么？", "content": "MATCH (n:character{name:'特拉弗斯'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"纯血统\"]']"}
{"prompt": "返回前两个球员的姓名，按照姓名排序。", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "您好，请问您能帮我找到与'Tim Duncan'有喜欢和效力关系的实体和关系吗？", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "Can you help me identify all entities that like Steve Nash and tell me the target entities in my relationship with Steve Nash?", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "您好，请帮我找一下从 'Yao Ming' 到 'Tony Parker' 的最短路径，路径上要包括喜欢和服务关系，最多经过5个步骤，然后把路径信息给我。", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": " 您好，请帮我查找一下，从 'Tim Duncan' 出发，找出距离在两步内 '喜欢' 程度在95到100之间的所有实体和关系子图，谢谢。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "Can you help me find the names of all the players who play for 'Pistons'?", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "睾丸肿瘤的治愈概率是多少？", "content": "MATCH (n:disease{name:\"睾丸肿瘤\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"10%-30%\"]']"}
{"prompt": "Hey, can you help me find something that the player 'Carmelo Anthony' likes? I want to know his name and age. “", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "Find players older than 30.5 and return their IDs and ages.", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "Can you help me find out the teammates' relationships between players? I need to know the names of Player 1 and Player 2.", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "Find all information about Boris Diaw's service with the 'Haw' team, including player name, service start year, service end year, and team name.", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "与弗雷德·韦斯莱具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"弗雷德·韦斯莱\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"乌尔苏拉·弗林特\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"卡斯帕·克劳奇\"]', '[\"卡莉朵拉·布莱克\"]', '[\"哈方·隆巴顿\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"天狼星·布莱克一世\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"查莉丝·布莱克\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莫丽·普威特\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"菲尼亚斯·奈杰勒斯·布莱克\"]', '[\"菲尼亚斯·布莱克\"]', '[\"西格纳斯·布莱克二世\"]', '[\"贝尔维娜·布莱克\"]', '[\"金妮·韦斯莱\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"卡斯帕·克劳奇\"]', '[\"卡莉朵拉·布莱克\"]', '[\"哈方·隆巴顿\"]', '[\"塞德瑞拉·布莱克\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"查莉丝·布莱克\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莫丽·普威特\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"金妮·韦斯莱\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊格内修斯·普威特\"]', '[\"卢克丽霞·布莱克\"]', '[\"吉迪翁·普威特\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"比利尔斯\"]', '[\"穆丽尔\"]', '[\"莫丽·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊万斯先生\"]', '[\"伊万斯夫人\"]', '[\"伊格诺图斯·佩弗利尔\"]', '[\"佩妮·德思礼\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"尤菲米娅·波特\"]', '[\"弗农·德思礼\"]', '[\"弗利蒙·波特\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德思礼夫人\"]', '[\"斯廷奇库姆的林弗雷德\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"汤姆·里德尔\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易斯·韦斯莱\"]', '[\"达力·德思礼\"]', '[\"达力的孩子\"]', '[\"金妮·波特\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"加布丽·德拉库尔\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德拉库尔先生\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿波琳·德拉库尔\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莫丽·韦斯莱\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"金妮·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫托克·达格沃斯-格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"泰丝\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱二世\"]', '[\"莫丽·韦斯莱，原姓普威特\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊格内修斯·普威特\"]', '[\"卢克丽霞·布莱克\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"比利尔斯\"]', '[\"穆丽尔\"]', '[\"莫丽·韦斯莱\"]', '[\"费比安·普威特\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"加布丽·德拉库尔\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德拉库尔先生\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿波琳·德拉库尔\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"韦斯莱家族\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"安吉利娜·约翰逊的父亲\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"莫丽·韦斯莱\"]']"}
{"prompt": "财政大臣是什么物种？", "content": "MATCH (n:character{name:'财政大臣'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "Please help me find out what 'Tracy McGrady' likes and then find the corresponding IDs for these things.", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "Identify entities older than 38 that 'Tim Duncan' likes' and return information on the relationships and entities between these entities and 'Tim Duncan'.", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "找出球员 Tim Duncan 和球队 Spurs 之间至多3跳的最短的路径，并返回该路径。", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "请问您能帮我查询一下所有球员的姓名和节点吗？", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "Find the players' Tracy McGrady 'likes, and then find the IDs of the players they like.", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "Hello, please help me identify all the entities that 'Russell Westbrook' serves' and 'likes', and return their IDs.", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "哪些人物是鼻涕虫俱乐部的成员？", "content": "MATCH (n:character)-[e]-(n1:group{name:'鼻涕虫俱乐部'}) return n", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Find players aged 40 and return their names.", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Returns the name of a player named 'Tim Duncan'.", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "Returns the player name of the entity with ID 'Jason Kidd'.", "content": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "Find all the entities that a player named 'Carmelo Anthony' likes and return the player's name and age.", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "嘿，你能帮我找出那些被其他球员喜欢过的球员吗？我想知道他们的名字。", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "May I ask if you could help me find the team where 'Carter' likes players? I want to count how many players there are in these teams.", "content": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[63]"]}
{"prompt": "查找名为'Spurs'的团队中的所有球员，并返回这些球员的信息。", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "Identify all players who like 'Tony Parker' and 'Tim Duncan', and return these players and their relationships, but excluding the liking relationships between 'Tony Parker' and 'Tim Duncan'.", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "拉尔斯·伦德克万从属于哪个组织？", "content": "MATCH (n:character{name:'拉尔斯·伦德克万'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"挪威魁地奇国家队\" :group{name: \"挪威魁地奇国家队\"})]']"}
{"prompt": "西莫·斐尼甘的父亲是什么血统？", "content": "MATCH (n:character{name:'西莫·斐尼甘的父亲'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"麻瓜\"]']"}
{"prompt": "返回ID为'Jason Kidd'的实体的球员姓名。", "content": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "霍奇金病的症状有哪些？", "content": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='霍奇金病' return n1.symptom.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"低热\"]', '[\"体重减轻\"]', '[\"恶心\"]', '[\"疱疹\"]', '[\"盗汗\"]', '[\"腹痛\"]', '[\"血小板减少\"]', '[\"食欲减退\"]']"}
{"prompt": "Find the player entity with ID 'Carmelo' and return its age attribute value.", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "得了戊型病毒性肝炎推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='戊型病毒性肝炎' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"双色馒头\"]', '[\"小米素羹\"]', '[\"绿豆杂面条\"]', '[\"茼蒿水饺\"]', '[\"茼蒿粥\"]', '[\"茼蒿豆腐\"]', '[\"荞麦面条\"]', '[\"蛋形馒头\"]']"}
{"prompt": "请问您能帮我查找一下与 'Tim Duncan' 有喜欢关系的实体吗？然后再在这些实体中找出与之有服务关系的实体，并把它们的 ID 返回给我好吗？", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "Identify all entities that 'Russell Westbrook' works for and likes, and return the IDs of these entities.", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "Find teams with a distance of 0 to 3 jumps from the player named 'Tim Duncan' and count the number of players played for these teams.", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[40]"]}
{"prompt": "请问您能帮我找到ID为'Boris Diaw'的球员信息吗？", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "查找名为'abc'的球员所服务的最多距离为3的所有实体，返回这些实体的所有属性。", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Could you please help me find the shortest path between player 'Tim Duncan' and team 'Spurs'? There can only be a maximum of 3 jumping relationships. Thank you!", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "Hello, please help me find out, starting with 'Tim Duncan' and extending 1 to 4 steps outward, to find the 'liking level' and edge information between each edge. Thank you!", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "获取球员 'Grant Hill' 的姓名和年龄属性。", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "巴巴吉德·阿金巴德的性别是什么？", "content": "MATCH (n:character{name:'巴巴吉德·阿金巴德'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": "得了心脏病应该去哪个科室就诊？", "content": "GO FROM \"心脏病\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"心内科\"]']"}
{"prompt": "格奥尔基·兹德拉夫科的性别是什么？", "content": "MATCH (n:character{name:'格奥尔基·兹德拉夫科'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": "找出 'Tim Duncan' 所 '喜欢' 的第一个实体。", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "找出喜欢 'Dejounte Murray' 的所有实体中，球员名称和年龄，并按年龄降序、名称升序排序，跳过前11个结果，返回接下来的3个结果。", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "多少种病能够通过药物治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[6905]']"}
{"prompt": "Hello, could you please help me find players aged 20 and return all the node information of these players?", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "哪些人物是普德米尔联队的成员？", "content": "MATCH (n:character)-[e]-(n1:group{name:'普德米尔联队'}) return n", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Can you help me find out the entities and relationships that a player named 'Tracy McGrady' serves or likes after 2000?", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "Hey, can you help me check out the teams' Boris Diaw 'has played for? I would like to know his name, starting and ending years of service, as well as the team name. “", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "查找名为'Kyrie Irving'的球员有2到3跳所服务或喜欢的实体，返回数量统计结果。", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "Can you help me find players aged 29.5 or older? I need their ID and age information.", "content": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "找出ID为'Boris Diaw'的球员节点并返回。", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "Find all entities that like 'Dejounte Murray', including player names and ages, and sort them in descending age and ascending name order. Skip the first 11 results and return the next 3 results.", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "获取 'Tony Parker' 球员的姓名和年龄属性。", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "霍奇金病的治疗方式有哪些？", "content": "GO FROM \"霍奇金病\" OVER cure_way YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"支持性治疗\"]', '[\"药物治疗\"]']"}
{"prompt": "Identify the players Tony Parker likes who play for Spurs, and return the relevant players and teams.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "Obtain the name of the 'Spurs' team.", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "埃里克·华莱的性别是什么？", "content": "MATCH (n:character{name:'埃里克·华莱'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": "遗传性凝血因子ⅩⅢ缺乏的治疗药物有哪些？", "content": "GO FROM \"遗传性凝血因子ⅩⅢ缺乏\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"人凝血因子Ⅷ\"]', '[\"人纤维蛋白原\"]', '[\"维生素K1注射液\"]', '[\"醋酸甲萘氢醌片\"]']"}
{"prompt": "Identify all entities that have a 'like' relationship with 'Tim Duncan' and return their deduplicated IDs.", "content": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Manu Ginobili\"]", "[\"Tim Parker\"]", "[\"Tony Parker\"]"]}
{"prompt": "您好，请帮我查找一下年龄为40的球员，然后把他们的姓名告诉我好吗？", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Hello, could you please help me find a player named 'Joseph', identify his favorite relationships with other entities, and provide me with the paths to return these entities and relationships?", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "得了戊型病毒性肝炎的注意事项有哪些？", "content": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"与甲型肝炎相同，主要采取以切断传播途径主为的综合性措施，为预防水型传播，主要是保护水源，防止粪便管理;注意食品卫生，改善卫生设施和讲究个人卫生也很重要，使用丙种免疫球蛋白及人胎盘免疫球蛋白预防戊型肝炎多数报告无效，最终要取决于疫苗，HEV分子克隆的成功为研制疫苗提供了基础。\"]']"}
{"prompt": "什么病会伴随着高血压？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'高血压'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"Ⅳ型肾小管性酸中毒\"]', '[\"三叉神经痛\"]', '[\"中风后遗症\"]', '[\"假性高血压\"]', '[\"单纯性肾囊肿\"]', '[\"厥阴头痛\"]', '[\"口腔疾病\"]', '[\"吉兰-巴雷综合征\"]', '[\"吡唑酮类中毒\"]', '[\"吸烟中毒症\"]', '[\"咳嗽\"]', '[\"囊性肾病\"]', '[\"围绝经期综合征\"]', '[\"头风病\"]', '[\"妇女雄激素源性秃发\"]', '[\"妊娠合并甲状旁腺功能亢进\"]', '[\"妊娠合并白血病\"]', '[\"妊娠合并红细胞增多症\"]', '[\"妊娠合并缺铁性贫血\"]', '[\"安卡性肾炎\"]', '[\"家族性载脂蛋白B100缺陷症\"]', '[\"小儿乙型肝炎病毒相关肾炎\"]', '[\"小儿先天性肾盂输尿管连接部梗阻\"]', '[\"小儿原发性膀胱输尿管反流\"]', '[\"小儿尿路感染\"]', '[\"小儿尿路梗阻\"]', '[\"小儿慢性肾小球肾炎\"]', '[\"小儿指甲-髌骨综合征\"]', '[\"小儿狂犬病\"]', '[\"小儿肝豆状核变性\"]', '[\"小儿肾母细胞瘤\"]', '[\"小儿肾淀粉样变性\"]', '[\"小儿肾结核\"]', '[\"小儿膀胱-输尿管反流综合征\"]', '[\"小儿过敏性紫癜肾炎\"]', '[\"小儿阻塞性睡眠呼吸暂停\"]', '[\"小儿麻痹症\"]', '[\"左束支中隔支传导阻滞\"]', '[\"库欣综合征\"]', '[\"急性肾功能不全\"]', '[\"急性肾功能衰竭\"]', '[\"急性肾小球肾炎\"]', '[\"急性肾小管坏死\"]', '[\"急性肾炎\"]', '[\"急性肾炎综合征\"]', '[\"急进性肾小球肾炎\"]', '[\"恶性高血压性小动脉性肾硬化\"]', '[\"慢性肾功能衰竭\"]', '[\"慢性肾小球肾炎\"]', '[\"慢性肾盂肾炎\"]', '[\"慢性酒中毒\"]', '[\"新生儿急性肾功能衰竭\"]', '[\"新疆出血热\"]', '[\"更年期综合征\"]', '[\"未分化结缔组织病\"]', '[\"梗阻性肾病\"]', '[\"烟雾病\"]', '[\"焦磷酸钙沉积病\"]', '[\"狂犬病\"]', '[\"甲状旁腺功能亢进性心肌病\"]', '[\"痰浊眩晕\"]', '[\"短暂性脑缺血发作\"]', '[\"神经母细胞瘤\"]', '[\"糖尿病\"]', '[\"糖尿病性视网膜病变\"]', '[\"红斑性肢痛症\"]', '[\"结节性多动脉炎性巩膜炎\"]', '[\"缺血性结肠炎\"]', '[\"羊水过少\"]', '[\"老年人吸入性肺炎\"]', '[\"老年人急性肾功能衰竭\"]', '[\"老年人痛风\"]', '[\"老年人肥胖症\"]', '[\"老年人脑出血\"]', '[\"老年人非霍奇金恶性淋巴肿瘤\"]', '[\"老年人颅内压增高\"]', '[\"老年肺炎\"]', '[\"肝火眩晕\"]', '[\"肢端肥大症\"]', '[\"肥胖性心肌病\"]', '[\"肾上腺肿瘤\"]', '[\"肾上腺髓质增生\"]', '[\"肾功能不全\"]', '[\"肾功能衰竭\"]', '[\"肾动脉狭窄\"]', '[\"肾动脉瘤\"]', '[\"肾动脉血栓形成和栓塞\"]', '[\"肾囊肿\"]', '[\"肾小球肾炎\"]', '[\"肾癌\"]', '[\"肾积水\"]', '[\"肾胚胎瘤\"]', '[\"肾虚\"]', '[\"肾阴虚\"]', '[\"胰岛素抵抗与代谢综合征\"]', '[\"胼胝体进行性变性\"]', '[\"脂肪肝\"]', '[\"脊椎病\"]', '[\"脊髓灰质炎\"]', '[\"脑出血\"]', '[\"良性高血压性小动脉性肾硬化\"]', '[\"蓝鼓膜与胆固醇肉芽肿\"]', '[\"薄肾小球基底膜病\"]', '[\"血管性帕金森综合征\"]', '[\"过敏性紫癜肾炎\"]', '[\"遗传性肥胖\"]', '[\"酒中毒性小脑变性\"]', '[\"酒中毒性痴呆\"]', '[\"酒精中毒性神经疾病\"]', '[\"镇痛剂肾病\"]', '[\"间质性肾炎\"]', '[\"隐匿型肾炎\"]', '[\"隐匿性肾小球肾炎\"]', '[\"青年人中的成年发病型糖尿病\"]', '[\"项痹\"]', '[\"高原性心脏病\"]', '[\"高原适应不全症\"]', '[\"高尿酸血症肾病\"]']"}
{"prompt": "请问您能帮我找出与 'Carmelo Anthony' 有喜欢关系的路径数量吗？", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "迪米特洛夫从属于哪个组织？", "content": "MATCH (n:character{name:'迪米特洛夫'})-[]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"保加利亚魁地奇国家队\" :group{name: \"保加利亚魁地奇国家队\"})]']"}
{"prompt": "什么病会伴随着糖尿病？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'糖尿病'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"三高症\"]', '[\"人免疫缺陷病毒感染性肾损害\"]', '[\"代谢综合征\"]', '[\"低血糖综合征\"]', '[\"假性甲状旁腺功能减退症\"]', '[\"假性黑棘皮病\"]', '[\"内分泌失调\"]', '[\"分水岭区脑梗死\"]', '[\"卓－艾氏综合征\"]', '[\"单纯性肥胖\"]', '[\"口糜\"]', '[\"吐失\"]', '[\"失眠抑郁\"]', '[\"妊娠合并白血病\"]', '[\"婴儿腹部远心性脂肪营养不良\"]', '[\"寒痹\"]', '[\"小儿共济失调毛细血管扩张综合征\"]', '[\"小儿常染色体隐性小脑性共济失调\"]', '[\"小儿弹性假黄瘤\"]', '[\"小儿肥胖\"]', '[\"小儿骨肉瘤\"]', '[\"巨人症与肢端肥大症\"]', '[\"急性女阴溃疡\"]', '[\"急性胆源性胰腺炎\"]', '[\"急性膀胱炎\"]', '[\"慢性肾盂肾炎\"]', '[\"慢性黏膜皮肤念珠菌病\"]', '[\"抗-HCVAg阳性\"]', '[\"无症状性脑梗死\"]', '[\"焦磷酸钙沉积病\"]', '[\"燥邪犯肺\"]', '[\"牙科病\"]', '[\"牙龈炎\"]', '[\"珠蛋白生成障碍性贫血\"]', '[\"生殖器念珠菌病\"]', '[\"甲亢合并妊娠\"]', '[\"甲状腺结节钙化\"]', '[\"白癜风\"]', '[\"皮肤白斑\"]', '[\"皮肤穿入性毛囊和毛囊周角化病\"]', '[\"红斑性肢痛症\"]', '[\"绝经期关节炎\"]', '[\"绝经期尿路感染\"]', '[\"老年人急性胰腺炎\"]', '[\"老年人甲状腺功能亢进症\"]', '[\"老年性哮喘\"]', '[\"老年肺炎\"]', '[\"联合免疫缺陷病\"]', '[\"肌强直性肌病\"]', '[\"肠道菌群失调症\"]', '[\"肢端肥大症\"]', '[\"肾虚\"]', '[\"胰痈\"]', '[\"胰石病\"]', '[\"胰石症\"]', '[\"胰腺囊性纤维性变\"]', '[\"胰腺癌\"]', '[\"胰腺脓肿\"]', '[\"自身免疫性胰腺炎\"]', '[\"艾滋病\"]', '[\"蛔虫性急性胰腺炎\"]', '[\"血管性帕金森综合征\"]', '[\"血色病\"]', '[\"视神经乳头水肿及视盘水肿\"]', '[\"迟发性皮肤卟啉病\"]', '[\"骨肉瘤\"]', '[\"高尿酸血症肾病\"]', '[\"高泌乳素血症\"]', '[\"高甘油三酯血症\"]', '[\"高脂蛋白血症Ⅳ型\"]']"}
{"prompt": "软组织损伤应该去哪个科室就诊？", "content": "GO FROM \"软组织损伤\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"骨外科\"]']"}
{"prompt": "眼睑热性疱疹的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"眼睑热性疱疹\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1-3个月\"]']"}
{"prompt": "找出 'Boris Diaw' 在 'Haw' 球队服役期间的所有信息，包括球员姓名、服役起始年份、服役结束年份和所在队伍名称。", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "Find all players with names between 'Grant Hill' and 'Yao Ming' and return their information.", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "找出球员 'Tim Duncan' 和球队 'Spurs' 之间至多3跳的最短的路径，并返回该路径。", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "Hello, please help me identify all entities that have likes, services, and teammate relationships with 'Paul Gasol', and tell me the IDs of the target entities for these relationships.", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "与赫尔伯特·斯普林具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"赫尔伯特·斯普林\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Hello, could you please help me find the name of the player with ID 'Jason Kidd'.", "content": "MATCH (v)\nWHERE id(v) == 'Tim Duncan'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "找出 'Russell Westbrook' 所 '服务' 和 '喜欢' 的所有实体，并返回这些实体的 ID。", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "Find the path where player 'LeBron James' belongs to a team called' Cavaliers', and return the relationship type and team name.", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "颜面部疖痈的易感人群是哪些？", "content": "MATCH (n:disease{name:\"颜面部疖痈\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特殊人群\"]']"}
{"prompt": "Hey, can you help me find all the information about 'Boris Diaw' on the 'Haw' team? I need to know his player name, start year of service, end year of service, and team name.", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "请问您能帮我找到所有效力于 'Pistons' 的球员的名字吗？", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "赫普兹巴·史密斯是哪个学院的？", "content": "MATCH (n:character{name:'赫普兹巴·史密斯'})-[e:learn_from]-(n1:college) return n1.college.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"赫奇帕奇学院\"]']"}
{"prompt": "Could you please help me identify the age of entities related to everything that a player named 'Damian Lillard' likes? Then, in chronological order of age, can you return me to the top three entities and their ages?", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "Can you help me find the team where the player who likes' Tim Duncan 'belongs? I want to count the number of players in these teams.", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[40]"]}
{"prompt": "吉姆·麦古的血统是什么？", "content": "MATCH (n:character{name:'吉姆·麦古'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"麻瓜\"]']"}
{"prompt": "多少种病能够通过药物治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[6905]']"}
{"prompt": "找出与 'Carmelo Anthony' 有喜欢关系的路径数量。", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "找出名为'Carmelo Anthony'的球员所喜欢的所有实体，并返回该球员的姓名和年龄。", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "Can you help me find the name of a player named 'Antetokounmpo'?", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "Hello, please help me find the path for the 'like' relationship from 'Tim Duncan' to 'Nobody' or 'Spur', with a maximum of 3 nodes, and return these paths.", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "返回索尔·克罗克周边最多二跳关系的子图？", "content": "GET SUBGRAPH 2 STEPS FROM \"索尔·克罗克\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"索尔·克罗克\" :character{})], [(\"索尔·克罗克\")-[:belong_to@0{}]->(\"魔法部\")]]', '[[(\"魔法部\" :group{})], [(\"伯莎·乔金斯\")-[:belong_to@0{}]->(\"魔法部\"), (\"卡思伯特·莫克里奇\")-[:belong_to@0{}]->(\"魔法部\"), (\"卢修斯·马尔福\")-[:belong_to@0{}]->(\"魔法部\"), (\"卢多·巴格曼\")-[:belong_to@0{}]->(\"魔法部\"), (\"哈米什·麦克法兰\")-[:belong_to@0{}]->(\"魔法部\"), (\"埃尔芬斯通·埃尔科特\")-[:belong_to@0{}]->(\"魔法部\"), (\"埃德里奇·迪戈里\")-[:belong_to@0{}]->(\"魔法部\"), (\"塞普蒂默斯·马尔福\")-[:belong_to@0{}]->(\"魔法部\"), (\"多洛雷斯·乌姆里奇\")-[:belong_to@0{}]->(\"魔法部\"), (\"奈莫恩·拉德福德\")-[:belong_to@0{}]->(\"魔法部\"), (\"德克·克莱斯韦\")-[:belong_to@0{}]->(\"魔法部\"), (\"德拉科·马尔福\")-[:belong_to@0{}]->(\"魔法部\"), (\"格丝尔达·玛奇班\")-[:belong_to@0{}]->(\"魔法部\"), (\"格罗根·斯顿普\")-[:belong_to@0{}]->(\"魔法部\"), (\"汤姆·里德尔\")-[:belong_to@0{}]->(\"魔法部\"), (\"罗恩·韦斯莱\")-[:belong_to@0{}]->(\"魔法部\"), (\"菲波斯·彭罗斯\")-[:belong_to@0{}]->(\"魔法部\"), (\"贾斯特斯·皮利维克\")-[:belong_to@0{}]->(\"魔法部\"), (\"赫敏·格兰杰\")-[:belong_to@0{}]->(\"魔法部\"), (\"迪芙娜·弗马吉\")-[:belong_to@0{}]->(\"魔法部\"), (\"阿拉斯托·穆迪\")-[:belong_to@0{}]->(\"魔法部\"), (\"阿特米希亚·勒夫金\")-[:belong_to@0{}]->(\"魔法部\"), (\"阿诺德·皮斯古德\")-[:belong_to@0{}]->(\"魔法部\"), (\"鲁弗斯·斯克林杰\")-[:belong_to@0{}]->(\"魔法部\"), (\"鲁弗斯·福吉\")-[:belong_to@0{}]->(\"魔法部\")]]', '[[(\"塞普蒂默斯·马尔福\" :character{}), (\"卡思伯特·莫克里奇\" :character{}), (\"哈米什·麦克法兰\" :character{}), (\"埃尔芬斯通·埃尔科特\" :character{}), (\"汤姆·里德尔\" :character{}), (\"菲波斯·彭罗斯\" :character{}), (\"奈莫恩·拉德福德\" :character{}), (\"贾斯特斯·皮利维克\" :character{}), (\"阿拉斯托·穆迪\" :character{}), (\"阿特米希亚·勒夫金\" :character{}), (\"埃德里奇·迪戈里\" :character{}), (\"格丝尔达·玛奇班\" :character{}), (\"卢修斯·马尔福\" :character{}), (\"卢多·巴格曼\" :character{}), (\"德拉科·马尔福\" :group{} :character{}), (\"迪芙娜·弗马吉\" :character{}), (\"伯莎·乔金斯\" :character{}), (\"罗恩·韦斯莱\" :character{}), (\"鲁弗斯·福吉\" :character{}), (\"多洛雷斯·乌姆里奇\" :character{}), (\"德克·克莱斯韦\" :character{}), (\"格罗根·斯顿普\" :character{}), (\"赫敏·格兰杰\" :character{}), (\"阿诺德·皮斯古德\" :character{}), (\"鲁弗斯·斯克林杰\" :character{})], [(\"塞普蒂默斯·马尔福\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"塞普蒂默斯·马尔福\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"卢修斯·马尔福\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"罗恩·韦斯莱\")]]']"}
{"prompt": "Can you help me find the name of the player named 'Tim Duncan'?", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "Hello, please help me count the number of entities that a player named 'Irving' serves or likes, and the distance between relationships needs to be between 2 and 3 hops.", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "查找所有球员之间的队友关系，返回球员的姓名。", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "找出与 'Kobe Bryant' 通过 '喜欢' 关系相连的实体，再返回这些实体的名称，包括两步路径上的实体。", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "心脏穿透伤的主要原因是什么？", "content": "MATCH (n:disease{name:\"三尖瓣闭锁\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"(一)发病原因 一般认为，胚胎在正常发育情况下，心内膜垫融合，将房室管平均分成左右两个管口并参与形成膜部心室间隔和闭合心房间隔第1孔，三尖瓣从心内膜垫和右室心肌分化而成，在这个过程中三尖瓣发育异常，瓣叶退化，变性，瓣叶组织缺乏，瓣孔被纤维组织包围，封闭，最终导致三尖瓣闭锁，(一般认为是胚胎期前后心内膜垫融合部位偏向右侧，心室间隔右移造成房室口分隔不均等，右侧房室管口闭塞则日后形成三尖瓣闭锁，) (二)发病机制 1.病理改变 约90%的三尖瓣闭锁病例，三尖瓣融合成膈膜样的膜，肺动脉总干发育不良，闭锁也可累及右心室流出道和肺动脉总干，而肺动脉瓣严重发育不良，右心室可从严重发育不良到正常大小，甚至扩张，三尖瓣多有程度不等的关闭不全。 在三尖瓣闭锁尸体解剖中发现，左心室往往增大和肥厚，但二尖瓣正常或增大，也有个案报道谓二尖瓣呈多瓣畸形，二尖瓣裂和二尖瓣骑跨于发育不全的右心室。 三尖瓣闭锁通常包括以下几种畸形： ①三尖瓣闭锁，无右心房右心室间的交通; ②房间隔缺损或卵圆孔未闭; ③室间隔缺损或动脉导管未闭。 三尖瓣闭锁是先天性闭合，不存在瓣孔，仅在右心房底部见一小的凹陷，周围被肌纤维所包围，少数为纤维性或膜性结构，心房间的交通80%为卵圆孔未闭，也可能为房间隔缺损，甚至为单心房。 三尖瓣闭锁的右心房与右心室连接类型有5种： ①肌肉型约占76%～84%，在右心房的底部为肌肉，在靠近侧壁有一小的陷窝，直接横跨于左心室而与右心室无连接; ②隔膜型约占8%～12%，右心房与右心室之间为一闭锁的隔膜; ③瓣膜型约占6%，右心房与右心室连接处有一开放的瓣膜，但在其下方有隔膜和肌肉将右心房与右心室完全隔开，形成闭锁; ④Ebstein畸形型约占6%，右心房与右心室间形成闭锁的三尖瓣; ⑤心内膜垫缺损型约占2%，右心房到右心室的共同房室瓣闭锁。 Edward和Burchell首先根据大动脉相互关系，将三尖瓣闭锁分为3种类型，其次根据有无肺动脉闭锁或狭窄，进一步分为Ⅰa型，Ⅰb型，Ⅰc型，Ⅱa型，Ⅱb型，Ⅱc型，Ⅲa型和Ⅲb型8种类型，在三尖瓣闭锁的病例中，以Ⅰb型，Ⅰc型，Ⅱb型，Ⅱc型，以及Ⅲa型最为常见。 Ⅰ型三尖瓣闭锁(69%)：该型特点是大血管关系正常，Ⅰa型，肺动脉闭锁;Ⅰb型，肺动脉狭窄伴小型室间隔缺损;Ⅰc型，肺动脉狭窄伴大型室间隔缺损。 Ⅱ型三尖瓣闭锁(27%)：该型特点是伴完全型大血管转位，Ⅱa型，肺动脉闭锁;Ⅱb型，肺动脉狭窄伴小型室间隔缺损;Ⅱc型，肺动脉正常伴大型室间隔缺损。 Ⅲ型三尖瓣闭锁(4%)：Ⅲ型的特点是伴矫正型大血管转位，Ⅲa型，肺动脉瓣狭窄;Ⅲb型，主动脉瓣下狭窄，合并肺动脉瓣闭锁者(即Ⅰa，Ⅱa型)，于婴儿期即死亡，合并肺动脉瓣狭窄者(Ⅰb，Ⅱb，Ⅲa型)者，占儿童期病例的70%，成年期病例的100%。 三尖瓣闭锁可能同时合并多种心脏与大血管的畸形，心房间的交通总是存在，其中卵圆孔未闭占80%，其余为房间隔缺损，22%的病人合并有左上腔静脉，通常引流至冠状静脉窦，偶尔直接引流到左心房，肺静脉异位引流和冠状动脉畸形较少见，先天性肺动脉缺如的病人常合并膜性三尖瓣闭锁，20%三尖瓣闭锁病人合并并列心耳，还可能合并主动脉缩窄，发育不良或闭锁，主动脉弓离断，主动脉瓣闭锁。 2.病理生理 三尖瓣闭锁病人，体循环静脉回流血液不能直接汇入右心室腔，右心房的血液只能通过心房间交通到达左心房，左心房就成为体，肺循环静脉血混合的心腔，混合血通过较正常为大的二尖瓣口进入左心室，而后经过正常连接的主动脉瓣口和主动脉离开左心室，因此，所有的病人均有不同程度的动脉血氧饱和度降低，其降低程度取决于肺血流阻塞的轻重，若肺部血流正常或增多，肺静脉回心血量正常或增多，则动脉血氧饱和度仅较正常稍低，临床上可无发绀或轻度发绀，若肺部血流减少，肺静脉回心血量减少，则动脉血氧饱和度明显降低，70%出现低氧血症，临床上有明显发绀，如房间隔缺损小，右到左分流受限，生后即出现严重体静脉高压和右心衰竭。 由于右心室发育不全，左心室单独承担体，肺循环的泵血工作，左心室需额外做功以推动大量肺循环的血液流动，持续超负荷的运转可导致左心肥大，左心衰竭，在肺血流减少的病例，左心室仅增加少量的容量负荷，往往不产生心力衰竭，但在肺血流增多的病例，左心室常因慢性容量负荷增加，左心室舒张末期容量增加和心肌收缩功能降低，进而左心室扩大，心力衰竭，如有主动脉缩窄或主动脉离断，更促进左心室肥大和心力衰竭的发生。 心脏右心室的发育状况随室间隔缺损大小和肺动脉狭窄程度而不同，一般多有肺动脉狭窄和小型室间隔缺损，少部分血液从左心室经室间隔缺损进入发育不良的右心室，然后通过狭窄的肺动脉入肺，使肺血流量减少，少数患者仅有轻度或无肺动脉狭窄，而伴有大型室间隔缺损，较多的血液从左心室进入发育良好的右心室和肺动脉，使到达肺部的血流量增多，罕见的情况是无室间隔缺损，有肺动脉瓣闭锁，血液到达肺部的惟一通道是未闭的动脉导管或支气管动脉。\"]']"}
{"prompt": "请问您能帮我查找一下2013年至2018年期间'Rajon Rondo'所效力的球队吗？我需要知道球员的姓名、开始年份、结束年份和球队名称。", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "请问您能帮我找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体的 ID 吗？", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "Returns the edge type and quantity associated with a player named 'Rudy Gay'.", "content": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 1]", "[\"serve\", 4]"]}
{"prompt": "小儿营养不良性消瘦的发病原因是什么？", "content": "MATCH (n:disease{name:\"小儿营养不良性消瘦\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"婴幼儿生长发育迅速，必须供给足够的营养物质，尤其是具有优良生物利用价值的蛋白质才能满足需要，如因母乳不足又未及时补充乳类制品或人工喂养调配不当如牛奶或奶粉调配浓度太低;或以谷类为主食;或仓促断奶后不再给吃乳制品，或断奶后辅食添加不当，随大人进食等。 疾病常为诱发因素如患先天性唇，腭裂影响哺乳;患腹泻或胃肠炎长期限制进食;慢性代谢性疾病影响消化吸收;各种感染性疾病如麻疹，百日咳，痢疾，肺炎，婴儿肝炎等，尤以慢性肠炎为最重要，后者由于长期消化吸收障碍，慢性消耗及摄入不足导致营养不良。 多见于胎儿营养不良引起的低出生体重儿，足月小样儿以及双胎，多胎及早产儿等。 较重的营养不良大多由多种原因所致。 发病机制 轻度营养不良的病理变化表现为皮下脂肪减少，糖原储备不足及肌肉轻度萎缩，重度营养不良可见肠壁变薄，黏膜皱襞消失，心肌纤维混浊肿胀，肝脂肪浸润，淋巴组织和胸腺萎缩以及各脏器缩小等，其病理生理改变如下： 1.组织器官功能低下 (1)消化系统改变：胃肠黏膜萎缩变薄，致皱襞消失，肠绒毛变短，黏膜上皮细胞成扁平，细胞数量减少，唾液腺，肠壁消化腺均有严重萎缩，退化，胰腺变小，空泡萎缩，内含颗粒减少，脂肪变性，各种消化酶活力低下，消化吸收功能显著减退，肠蠕动减少，大便中出现乳糖和蔗糖，易引起高张性腹泻，严重者单糖亦不能耐受。 (2)中枢神经系统改变：脑体积变小，重量减轻，脑细胞不仅数量减少，成分亦有改变，类脂质，卵磷脂，胆固醇的量都下降，如营养不良发生在胎儿期，新生儿期及婴儿期等脑发育的关键期，可导致不可逆的改变，乃至影响日后的智力及行为。 (3)循环系统：心肌细胞虽萎缩不明显，但肌纤维混浊肿胀，心肌收缩力减弱，心搏出量少，心电图示低电压，血压亦偏低。 (4)肾脏：肾脏出现肾小管混浊肿胀，脂肪变性，致使尿比重下降。 2.新陈代谢失调 (1)糖代谢失常：营养不良儿食欲低下，摄入量少，糖原不足或消耗过多，常表现血糖偏低。 (2)脂肪代谢失调：由于本病患儿体内脂肪大量消耗，故血清胆固醇下降，体内脂肪消耗过多，超过肝脏的代谢能力时，可导致肝脂肪浸润及变性。 (3)蛋白质代谢失调：由于蛋白质摄入不足，蛋白质处于负氮平衡，血清总蛋白和白蛋白减少，总蛋白低于40g/L，白蛋白低于20g/L时，可发生低蛋白水肿。 (4)水盐代谢失常：由于ATP合成减少可影响细胞膜上钠泵的转运，使钠在细胞内潴留，故营养不良时全身总液量相对为多，细胞外液一般呈低渗性，在肠胃功能紊乱时易出现低渗性脱水酸中毒，低血钾和低血糖。 3.免疫功能受损 中至重度营养不良时胸腺淋巴组织萎缩，脾脏，淋巴结，扁桃体，肠及阑尾淋巴组织萎缩，非特异性及特异性免疫功能低下如皮肤屏障功能，白细胞吞噬功能及补体功能等，细胞免疫功能及体液免疫功能均降低，淋巴细胞增殖分化低下，淋巴免疫因子如白细胞介素，肿瘤坏死因子均降低，IgG，IgM，IgA亦降低，近有报道营养不良可伴有IgG亚类缺陷，多为IgG2和IgG4，从而易致B型流感杆菌和肺炎链球菌感染，T淋巴细胞减少，常伴随T细胞亚群改变，CD4/CD8比值明显降低，T细胞在抗原刺激下产生的干扰素明显减少，由于回忆反应及皮肤迟发型超敏反应减弱，表现出OT反应及硬结大为减小。\"]']"}
{"prompt": "Identify all teammates and favorite entities of 'Ginobili' between the ages of 30 and 40, and return the ages and names of these entities.", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "Can you help me find the shortest path between Tim Duncan and the Spurs team?", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "您好，请问您能帮我查找一下球员'LeBron James'所在的球队' Cavaliers'的关系类型和球队名称吗？", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "梅林达·波宾从属于哪些组织？", "content": "MATCH (n:character{name:'梅林达·波宾'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"波宾家庭\" :group{name: \"波宾家庭\"})]', '[(\"鼻涕虫俱乐部\" :group{name: \"鼻涕虫俱乐部\"})]']"}
{"prompt": "Find the first entity that Tim Duncan likes.", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "霍奇金病的检查项目有哪些？", "content": "GO FROM \"霍奇金病\" OVER need_check YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"四肢的骨和关节平片\"]', '[\"胸部平片\"]', '[\"苏丹黑B染色\"]', '[\"血清前白蛋白\"]', '[\"血清前白蛋白（PA）\"]', '[\"血清甲状腺素结合前白蛋白\"]', '[\"血清精氨酰琥珀酸裂解酶（ASAL)\"]', '[\"血清血管紧张素I转化酶活性\"]', '[\"血管造影\"]', '[\"静脉肾盂造影（IVP）\"]']"}
{"prompt": "赫伯特·博克是哪个家族的成员？", "content": "MATCH (n:character{name:'赫伯特·博克'})-[e]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"博克家族\" :group{name: \"博克家族\"})]', '[(\"布莱克家族\" :group{name: \"布莱克家族\"})]']"}
{"prompt": "返回杜格德·麦克费尔周边最多二跳关系的子图？", "content": "GET SUBGRAPH 2 STEPS FROM \"杜格德·麦克费尔\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"杜格德·麦克费尔\" :character{})], [(\"杜格德·麦克费尔\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"杜格德·麦克费尔\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"杜格德·麦克费尔\")-[:learn_from@0{}]->(\"赫奇帕奇学院\")]]', '[[(\"霍格沃茨魔法学校\" ), (\"赫奇帕奇学院\" :college{} :group{}), (\"英国魔法部\" :group{})], [(\"C.沃林顿\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"S.卡珀\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"乔治·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"亚瑟·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"伊格内希娅·怀尔德史密斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"佩内洛·克里瓦特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"兰科罗斯·卡尔佩\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"卡多根\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"卡西欧佩娅·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"卢修斯·马尔福\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"卢娜·洛夫古德\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"厄克特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"厄尼·麦克米兰\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"吉德罗·洛哈特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"吉米·珀克斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"哈罗德·丁戈\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"埃尔德·沃普尔\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"埃德里奇·迪戈里\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"塞德里克·迪戈里\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"塞蒂娜·沃贝克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"夏比\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"多洛雷斯·乌姆里奇\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"奥利夫·洪贝\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"奥利弗·伍德\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"奥罗拉·辛尼斯塔\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"奥赖恩·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"威基·泰克罗斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"威尔克斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"威尔米娜·格拉普兰\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"安东尼·戈德斯坦\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"安妮·博林\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"安布罗修·弗鲁姆\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"安德鲁·柯克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"小天狼星·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"尤安·阿伯克龙比\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"尤普拉西娅·摩尔\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"尼古拉斯·德·敏西-波平顿\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"尼法朵拉·唐克斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"巴希达·巴沙特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"布丽奇特·温洛克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"帕特里克·德莱尼-波德摩\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"帕翠霞·斯廷森\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"弗利蒙·波特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"弗雷德·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"德克·克莱斯韦\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"德拉科·马尔福\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"德里安·普塞\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"德雷克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"怪人尤里克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"戈德里克·格兰芬多\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"戴丽丝·德文特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"戴维·格杰恩\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"扎卡赖斯·史密斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"拉弗恩·德·蒙莫朗西\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"曼蒂·布洛贺\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"杰克·斯劳珀\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"杰弗里·胡珀\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"杰玛·法利\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"查理·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"查莉丝·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"格韦诺格·琼斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"桃金娘·沃伦\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"梅林\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"比尔·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"汉娜·艾博\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"汤姆·里德尔\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"沃尔布加·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"波佩图阿·范考特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"泰瑞·布特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"洛肯·麦克莱德\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"爱洛伊丝·米德根\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"特伦斯·希格斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"特罗卡\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"玛丽·麦克唐纳\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"皮皮鬼\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"秋·张\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"米里森·巴格诺\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"糊涂波里斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"纽特·斯卡曼德\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"罗丝·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"罗伊纳·拉文克劳\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"罗恩·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"肯尼思·托勒\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"胖修士\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"艾琳·普林斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"芭斯谢达·巴布林\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"苏珊·博恩斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"莉莉·伊万斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"莉莎·杜平\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"莎莉安·波克斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"莫恩\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"莫拉格·麦克道格\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"莱姆斯·卢平\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"菲尼亚斯·奈杰勒斯·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"萨拉查·斯莱特林\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"蒙太\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"血人巴罗\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"西尔瓦努斯·凯特尔伯恩\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"西弗勒斯·斯内普\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"西格纳斯·布莱克三世\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"西比尔·特里劳尼\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"西莫·斐尼甘\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"詹姆·小天狼星·波特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"詹姆·波特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"赫尔加·赫奇帕奇\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"赫敏·格兰杰\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"达芙妮·格林格拉斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"金妮·韦斯莱\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿不思·西弗勒斯·波特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿不福思·邓布利多\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿布拉克萨斯·马尔福\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿拉斯托·穆迪\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"阿格斯·费尔奇\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"雷古勒斯·布莱克\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"韦恩·霍普金斯\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"马库斯·弗林特\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\"), (\"伍德克罗夫特的汉吉斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"加布里埃尔·杜鲁门\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"劳拉·马德莱\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"厄尼·麦克米兰\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"埃莉诺·布兰斯通\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"塞德里克·迪戈里\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"夏比\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"尼法朵拉·唐克斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"布丽奇特·温洛克\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"忒修斯·斯卡曼德\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"扎卡赖斯·史密斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"斯特宾斯 (1980年代)\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"格罗根·斯顿普\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"汉娜·艾博\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"纽特·斯卡曼德\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"罗丝·泽勒\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"胖修士\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"苏珊·博恩斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"萨默斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"西尔瓦努斯·凯特尔伯恩\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"赫尔加·赫奇帕奇\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"赫普兹巴·史密斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"阿特米希亚·勒夫金\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"韦恩·霍普金斯\")-[:learn_from@0{}]->(\"赫奇帕奇学院\"), (\"厄尼·麦克米兰\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"塞德里克·迪戈里\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"夏比\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"扎卡赖斯·史密斯\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"汉娜·艾博\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"纽特·斯卡曼德\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"苏珊·博恩斯\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"西尔瓦努斯·凯特尔伯恩\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"赫尔加·赫奇帕奇\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"韦恩·霍普金斯\")-[:belong_to@0{}]->(\"赫奇帕奇学院\"), (\"亚瑟·韦斯莱\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"伊万杰琳·奥平顿\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"伊格内修斯·塔夫特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"伦纳德·斯潘塞-莫恩\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"哈罗德·明彻姆\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"奥古斯特·卢克伍德\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"奥塔莱恩·甘布尔\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"威基·泰克罗斯\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"威尔米娜·塔夫特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"安克谢斯·奥斯博特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"尤里克·甘普\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"尤金尼娅·詹肯斯\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"尼法朵拉·唐克斯\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"巴兹尔·弗莱克\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"忒修斯·斯卡曼德\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"拉道夫斯·莱斯特兰奇\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"普里西拉·杜邦\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"法里斯·斯帕文\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"波蒂厄斯·纳奇布尔\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"洛肯·麦克莱德\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"爱洛伊丝·敏塔布\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"特拉弗斯\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"珀尔修斯·帕金森\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"秋·张的母亲\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"秋·张的父亲\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"米里森·巴格诺\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"约瑟芬娜·弗林特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"纽特·斯卡曼德\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"维努西亚·奎克利\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"艾伯特·布特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"诺比·利奇\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"赫克托·弗利\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"赫斯菲斯托斯·戈尔\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"达摩克利斯·罗尔\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"阿不思·邓布利多\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"阿切尔·埃弗蒙德\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"阿莫斯·迪戈里\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"霍滕西亚·米里法特\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"马克西米兰·克劳迪\")-[:belong_to@0{}]->(\"英国魔法部\"), (\"马法尔达·霍普柯克\")-[:belong_to@0{}]->(\"英国魔法部\")]]', '[[(\"亚瑟·韦斯莱\" :character{}), (\"佩内洛·克里瓦特\" :character{}), (\"厄克特\" :character{}), (\"安东尼·戈德斯坦\" :character{}), (\"尤普拉西娅·摩尔\" :character{}), (\"德里安·普塞\" :character{}), (\"戴丽丝·德文特\" :character{}), (\"扎卡赖斯·史密斯\" :character{}), (\"拉弗恩·德·蒙莫朗西\" :character{}), (\"查理·韦斯莱\" :character{}), (\"比尔·韦斯莱\" :character{}), (\"玛丽·麦克唐纳\" :character{}), (\"艾琳·普林斯\" :character{}), (\"西格纳斯·布莱克三世\" :character{}), (\"西莫·斐尼甘\" :character{}), (\"金妮·韦斯莱\" :character{}), (\"阿不思·西弗勒斯·波特\" :character{}), (\"达摩克利斯·罗尔\" :character{}), (\"乔治·韦斯莱\" :character{}), (\"塞蒂娜·沃贝克\" :character{}), (\"多洛雷斯·乌姆里奇\" :character{}), (\"威尔米娜·格拉普兰\" :character{}), (\"巴希达·巴沙特\" :character{}), (\"德克·克莱斯韦\" :character{}), (\"罗丝·韦斯莱\" :character{}), (\"罗伊纳·拉文克劳\" :character{}), (\"芭斯谢达·巴布林\" :character{}), (\"菲尼亚斯·奈杰勒斯·布莱克\" :character{}), (\"西弗勒斯·斯内普\" :character{}), (\"贝拉特里克斯·莱斯特兰奇\" :character{}), (\"赫敏·格兰杰\" :character{}), (\"斯特宾斯 (1980年代)\" :character{}), (\"格罗根·斯顿普\" :character{}), (\"赫普兹巴·史密斯\" :group{} :character{}), (\"安克谢斯·奥斯博特\" :character{}), (\"艾伯特·布特\" :character{}), (\"卡西欧佩娅·布莱克\" :character{}), (\"卢修斯·马尔福\" :character{}), (\"安妮·博林\" :character{}), (\"帕翠霞·斯廷森\" :character{}), (\"弗雷德·韦斯莱\" :character{}), (\"德拉科·马尔福\" :group{} :character{}), (\"杰克·斯劳珀\" :character{}), (\"特罗卡\" :character{}), (\"米勒娃·麦格\" :character{}), (\"米里森·巴格诺\" :character{}), (\"莉莎·杜平\" :character{}), (\"莫恩\" :character{}), (\"蒙太\" :character{}), (\"阿不思·邓布利多\" :group{} :character{}), (\"韦恩·霍普金斯\" :character{}), (\"阿莫斯·迪戈里\" :character{}), (\"吉米·珀克斯\" :character{}), (\"奥赖恩·布莱克\" :character{}), (\"尼法朵拉·唐克斯\" :character{}), (\"弗利蒙·波特\" :character{}), (\"戈德里克·格兰芬多\" :character{}), (\"格韦诺格·琼斯\" :character{}), (\"沃尔布加·布莱克\" :character{}), (\"洛肯·麦克莱德\" :character{}), (\"皮皮鬼\" :character{}), (\"罗恩·韦斯莱\" :character{}), (\"莉莉·伊万斯\" :group{} :character{}), (\"莎莉安·波克斯\" :character{}), (\"莫拉格·麦克道格\" :character{}), (\"萨拉查·斯莱特林\" :character{}), (\"阿布拉克萨斯·马尔福\" :character{}), (\"劳拉·马德莱\" :character{}), (\"忒修斯·斯卡曼德\" :character{}), (\"伊万杰琳·奥平顿\" :character{}), (\"尤里克·甘普\" :character{}), (\"巴兹尔·弗莱克\" :character{}), (\"拉道夫斯·莱斯特兰奇\" :character{}), (\"普里西拉·杜邦\" :character{}), (\"法里斯·斯帕文\" :character{}), (\"珀尔修斯·帕金森\" :character{}), (\"吉德罗·洛哈特\" :character{}), (\"哈罗德·丁戈\" :character{}), (\"埃尔德·沃普尔\" :character{}), (\"威尔克斯\" :character{}), (\"尤安·阿伯克龙比\" :character{}), (\"布丽奇特·温洛克\" :character{}), (\"杰玛·法利\" :character{}), (\"汉娜·艾博\" :character{}), (\"波佩图阿·范考特\" :character{}), (\"胖修士\" :character{}), (\"血人巴罗\" :character{}), (\"詹姆·小天狼星·波特\" :character{}), (\"雷古勒斯·布莱克\" :character{}), (\"伊格内修斯·塔夫特\" :character{}), (\"奥古斯特·卢克伍德\" :character{}), (\"爱洛伊丝·敏塔布\" :character{}), (\"秋·张的母亲\" :character{}), (\"诺比·利奇\" :character{}), (\"阿切尔·埃弗蒙德\" :character{}), (\"霍滕西亚·米里法特\" :character{}), (\"厄尼·麦克米兰\" :character{}), (\"威基·泰克罗斯\" :character{}), (\"安布罗修·弗鲁姆\" :character{}), (\"怪人尤里克\" :character{}), (\"戴维·格杰恩\" :character{}), (\"桃金娘·沃伦\" :character{}), (\"汤姆·里德尔\" :character{}), (\"泰瑞·布特\" :character{}), (\"糊涂波里斯\" :character{}), (\"西比尔·特里劳尼\" :character{}), (\"詹姆·波特\" :character{}), (\"阿格斯·费尔奇\" :character{}), (\"尤金尼娅·詹肯斯\" :character{}), (\"秋·张的父亲\" :character{}), (\"维努西亚·奎克利\" :character{}), (\"马法尔达·霍普柯克\" :character{}), (\"塞德里克·迪戈里\" :character{}), (\"查莉丝·布莱克\" :character{}), (\"梅林\" :character{}), (\"纽特·斯卡曼德\" :character{}), (\"肯尼思·托勒\" :character{}), (\"阿拉斯托·穆迪\" :character{}), (\"马库斯·弗林特\" :character{}), (\"伍德克罗夫特的汉吉斯\" :character{}), (\"埃莉诺·布兰斯通\" :character{}), (\"阿特米希亚·勒夫金\" :character{}), (\"特拉弗斯\" :character{}), (\"赫克托·弗利\" :character{}), (\"马克西米兰·克劳迪\" :character{}), (\"S.卡珀\" :character{}), (\"兰科罗斯·卡尔佩\" :character{}), (\"哈利·波特\" :group{} :character{}), (\"夏比\" :character{}), (\"奥罗拉·辛尼斯塔\" :character{}), (\"帕特里克·德莱尼-波德摩\" :character{}), (\"德雷克\" :character{}), (\"爱洛伊丝·米德根\" :character{}), (\"赫尔加·赫奇帕奇\" :character{}), (\"加布里埃尔·杜鲁门\" :character{}), (\"伦纳德·斯潘塞-莫恩\" :character{}), (\"C.沃林顿\" :character{}), (\"卢娜·洛夫古德\" :character{}), (\"埃德里奇·迪戈里\" :character{}), (\"奥利夫·洪贝\" :character{}), (\"尼古拉斯·德·敏西-波平顿\" :character{}), (\"曼蒂·布洛贺\" :character{}), (\"秋·张\" :character{}), (\"苏珊·博恩斯\" :character{}), (\"莱姆斯·卢平\" :character{}), (\"达芙妮·格林格拉斯\" :character{}), (\"萨默斯\" :character{}), (\"哈罗德·明彻姆\" :character{}), (\"奥塔莱恩·甘布尔\" :character{}), (\"波蒂厄斯·纳奇布尔\" :character{}), (\"约瑟芬娜·弗林特\" :character{}), (\"伊格内希娅·怀尔德史密斯\" :character{}), (\"卡多根\" :character{}), (\"奥利弗·伍德\" :character{}), (\"安德鲁·柯克\" :character{}), (\"小天狼星·布莱克\" :character{}), (\"杰弗里·胡珀\" :character{}), (\"特伦斯·希格斯\" :character{}), (\"西尔瓦努斯·凯特尔伯恩\" :character{}), (\"阿不福思·邓布利多\" :character{}), (\"鲁伯·海格\" :character{}), (\"罗丝·泽勒\" :character{}), (\"威尔米娜·塔夫特\" :character{}), (\"赫斯菲斯托斯·戈尔\" :character{})], [(\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"亚瑟·韦斯莱\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"查理·韦斯莱\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"比尔·韦斯莱\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"艾琳·普林斯\")-[:kindred@0{}]->(\"西弗勒斯·斯内普\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"奥赖恩·布莱克\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"小天狼星·布莱克\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"尼法朵拉·唐克斯\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"沃尔布加·布莱克\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"西格纳斯·布莱克三世\")-[:kindred@0{}]->(\"雷古勒斯·布莱克\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"詹姆·波特\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"金妮·韦斯莱\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"哈利·波特\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"莉莉·伊万斯\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"詹姆·波特\"), (\"阿不思·西弗勒斯·波特\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"乔治·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"罗丝·韦斯莱\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"菲尼亚斯·奈杰勒斯·布莱克\")-[:kindred@0{}]->(\"卡西欧佩娅·布莱克\"), (\"菲尼亚斯·奈杰勒斯·布莱克\")-[:kindred@0{}]->(\"查莉丝·布莱克\"), (\"西弗勒斯·斯内普\")-[:kindred@0{}]->(\"艾琳·普林斯\"), (\"西弗勒斯·斯内普\")-[:belong_to@0{}]->(\"莉莉·伊万斯\"), (\"西弗勒斯·斯内普\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:kindred@0{}]->(\"小天狼星·布莱克\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:kindred@0{}]->(\"尼法朵拉·唐克斯\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"贝拉特里克斯·莱斯特兰奇\")-[:kindred@0{}]->(\"雷古勒斯·布莱克\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"哈利·波特\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"赫敏·格兰杰\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"赫敏·格兰杰\")-[:belong_to@0{}]->(\"哈利·波特\"), (\"赫普兹巴·史密斯\")-[:kindred@0{}]->(\"扎卡赖斯·史密斯\"), (\"赫普兹巴·史密斯\")-[:kindred@0{}]->(\"赫尔加·赫奇帕奇\"), (\"卡西欧佩娅·布莱克\")-[:kindred@0{}]->(\"沃尔布加·布莱克\"), (\"卡西欧佩娅·布莱克\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"卢修斯·马尔福\")-[:kindred@0{}]->(\"尼法朵拉·唐克斯\"), (\"卢修斯·马尔福\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"卢修斯·马尔福\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"卢修斯·马尔福\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"卢修斯·马尔福\")-[:kindred@0{}]->(\"阿布拉克萨斯·马尔福\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"弗雷德·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"尼法朵拉·唐克斯\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"达芙妮·格林格拉斯\"), (\"德拉科·马尔福\")-[:kindred@0{}]->(\"阿布拉克萨斯·马尔福\"), (\"米勒娃·麦格\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"莫恩\")-[:kindred@0{}]->(\"伦纳德·斯潘塞-莫恩\"), (\"阿不思·邓布利多\")-[:kindred@0{}]->(\"阿不福思·邓布利多\"), (\"阿莫斯·迪戈里\")-[:kindred@0{}]->(\"塞德里克·迪戈里\"), (\"奥赖恩·布莱克\")-[:kindred@0{}]->(\"小天狼星·布莱克\"), (\"奥赖恩·布莱克\")-[:kindred@0{}]->(\"沃尔布加·布莱克\"), (\"奥赖恩·布莱克\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"奥赖恩·布莱克\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"奥赖恩·布莱克\")-[:kindred@0{}]->(\"雷古勒斯·布莱克\"), (\"尼法朵拉·唐克斯\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"尼法朵拉·唐克斯\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"尼法朵拉·唐克斯\")-[:kindred@0{}]->(\"莱姆斯·卢平\"), (\"尼法朵拉·唐克斯\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"尼法朵拉·唐克斯\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"弗利蒙·波特\")-[:kindred@0{}]->(\"哈利·波特\"), (\"弗利蒙·波特\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"弗利蒙·波特\")-[:kindred@0{}]->(\"詹姆·波特\"), (\"弗利蒙·波特\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"沃尔布加·布莱克\")-[:kindred@0{}]->(\"卡西欧佩娅·布莱克\"), (\"沃尔布加·布莱克\")-[:kindred@0{}]->(\"奥赖恩·布莱克\"), (\"沃尔布加·布莱克\")-[:kindred@0{}]->(\"小天狼星·布莱克\"), (\"沃尔布加·布莱克\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"沃尔布加·布莱克\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"沃尔布加·布莱克\")-[:kindred@0{}]->(\"雷古勒斯·布莱克\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"哈利·波特\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"罗恩·韦斯莱\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"罗恩·韦斯莱\")-[:belong_to@0{}]->(\"哈利·波特\"), (\"莉莉·伊万斯\")-[:kindred@0{}]->(\"哈利·波特\"), (\"莉莉·伊万斯\")-[:kindred@0{}]->(\"弗利蒙·波特\"), (\"莉莉·伊万斯\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"莉莉·伊万斯\")-[:kindred@0{}]->(\"詹姆·波特\"), (\"莉莉·伊万斯\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"莉莉·伊万斯\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"阿布拉克萨斯·马尔福\")-[:kindred@0{}]->(\"卢修斯·马尔福\"), (\"阿布拉克萨斯·马尔福\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"忒修斯·斯卡曼德\")-[:kindred@0{}]->(\"纽特·斯卡曼德\"), (\"詹姆·小天狼星·波特\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"詹姆·小天狼星·波特\")-[:kindred@0{}]->(\"哈利·波特\"), (\"詹姆·小天狼星·波特\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"詹姆·小天狼星·波特\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"詹姆·小天狼星·波特\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"詹姆·小天狼星·波特\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"雷古勒斯·布莱克\")-[:kindred@0{}]->(\"奥赖恩·布莱克\"), (\"雷古勒斯·布莱克\")-[:kindred@0{}]->(\"小天狼星·布莱克\"), (\"雷古勒斯·布莱克\")-[:kindred@0{}]->(\"沃尔布加·布莱克\"), (\"雷古勒斯·布莱克\")-[:kindred@0{}]->(\"菲尼亚斯·奈杰勒斯·布莱克\"), (\"雷古勒斯·布莱克\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"伊格内修斯·塔夫特\")-[:kindred@0{}]->(\"威尔米娜·塔夫特\"), (\"秋·张的母亲\")-[:kindred@0{}]->(\"秋·张\"), (\"桃金娘·沃伦\")-[:belong_to@0{}]->(\"哈利·波特\"), (\"桃金娘·沃伦\")-[:belong_to@0{}]->(\"德拉科·马尔福\"), (\"汤姆·里德尔\")-[:kindred@0{}]->(\"哈利·波特\"), (\"汤姆·里德尔\")-[:kindred@0{}]->(\"萨拉查·斯莱特林\"), (\"汤姆·里德尔\")-[:kindred@0{}]->(\"詹姆·波特\"), (\"泰瑞·布特\")-[:kindred@0{}]->(\"艾伯特·布特\"), (\"詹姆·波特\")-[:kindred@0{}]->(\"哈利·波特\"), (\"詹姆·波特\")-[:kindred@0{}]->(\"弗利蒙·波特\"), (\"詹姆·波特\")-[:kindred@0{}]->(\"莉莉·伊万斯\"), (\"詹姆·波特\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"詹姆·波特\")-[:kindred@0{}]->(\"金妮·韦斯莱\"), (\"詹姆·波特\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"秋·张的父亲\")-[:kindred@0{}]->(\"秋·张\"), (\"塞德里克·迪戈里\")-[:kindred@0{}]->(\"埃德里奇·迪戈里\"), (\"塞德里克·迪戈里\")-[:kindred@0{}]->(\"阿莫斯·迪戈里\"), (\"查莉丝·布莱克\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"查莉丝·布莱克\")-[:kindred@0{}]->(\"菲尼亚斯·奈杰勒斯·布莱克\"), (\"纽特·斯卡曼德\")-[:kindred@0{}]->(\"卢娜·洛夫古德\"), (\"纽特·斯卡曼德\")-[:kindred@0{}]->(\"忒修斯·斯卡曼德\"), (\"哈利·波特\")-[:kindred@0{}]->(\"乔治·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"亚瑟·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"弗利蒙·波特\"), (\"哈利·波特\")-[:kindred@0{}]->(\"弗雷德·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"查理·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"比尔·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"汤姆·里德尔\"), (\"哈利·波特\")-[:kindred@0{}]->(\"罗丝·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"罗恩·韦斯莱\"), (\"哈利·波特\")-[:kindred@0{}]->(\"詹姆·小天狼星·波特\"), (\"哈利·波特\")-[:kindred@0{}]->(\"詹姆·波特\"), (\"哈利·波特\")-[:kindred@0{}]->(\"赫敏·格兰杰\"), (\"哈利·波特\")-[:kindred@0{}]->(\"阿不思·西弗勒斯·波特\"), (\"哈利·波特\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"赫尔加·赫奇帕奇\")-[:kindred@0{}]->(\"赫普兹巴·史密斯\"), (\"伦纳德·斯潘塞-莫恩\")-[:kindred@0{}]->(\"莫恩\"), (\"卢娜·洛夫古德\")-[:kindred@0{}]->(\"纽特·斯卡曼德\"), (\"埃德里奇·迪戈里\")-[:kindred@0{}]->(\"塞德里克·迪戈里\"), (\"埃德里奇·迪戈里\")-[:kindred@0{}]->(\"阿莫斯·迪戈里\"), (\"莱姆斯·卢平\")-[:kindred@0{}]->(\"尼法朵拉·唐克斯\"), (\"达芙妮·格林格拉斯\")-[:kindred@0{}]->(\"德拉科·马尔福\"), (\"小天狼星·布莱克\")-[:kindred@0{}]->(\"奥赖恩·布莱克\"), (\"小天狼星·布莱克\")-[:kindred@0{}]->(\"沃尔布加·布莱克\"), (\"小天狼星·布莱克\")-[:kindred@0{}]->(\"菲尼亚斯·奈杰勒斯·布莱克\"), (\"小天狼星·布莱克\")-[:kindred@0{}]->(\"西格纳斯·布莱克三世\"), (\"小天狼星·布莱克\")-[:kindred@0{}]->(\"贝拉特里克斯·莱斯特兰奇\"), (\"小天狼星·布莱克\")-[:kindred@0{}]->(\"雷古勒斯·布莱克\"), (\"阿不福思·邓布利多\")-[:kindred@0{}]->(\"阿不思·邓布利多\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"哈利·波特\"), (\"鲁伯·海格\")-[:belong_to@0{}]->(\"阿不思·邓布利多\"), (\"威尔米娜·塔夫特\")-[:kindred@0{}]->(\"伊格内修斯·塔夫特\")]]']"}
{"prompt": "统计名为'Irving'的球员所服务或喜欢的实体数量，关系的距离为2到3跳。", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": " 您好，我想查询一下'Tracy McGrady'喜欢的实体，喜欢程度为90。能否帮我找出这些实体以及它们之间的关系呢？", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "Find all entities with a distance of 2 jumps and a 'like' relationship with player 'Grant Hill' and return to the relevant path.", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "Identify entities older than 38 that 'Tim Duncan' likes' and return information on the edges and entities between these entities and 'Tim Duncan'.", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Can you help me identify the number of paths that have a 'like' relationship with 'Carmelo Anthony'?", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "Hello, could you please help me find all the entities that a player named 'Tony Parker' likes and return them to me?", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": " 您好，请帮我查找一下名为'Duncan'的球员所喜欢的实体，可以包括2到3层关系吗？能否返回这些关系和实体给我呢？", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "上巴恩顿的汉吉斯的逝世日期是什么？", "content": "MATCH (n:character{name:'上巴恩顿的汉吉斯'}) return n.character.dead", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"不晚于1441年\"]']"}
{"prompt": "与卡桑德拉·瓦布拉斯基具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"卡桑德拉·瓦布拉斯基\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "酒精中毒性神经疾病的症状有哪些？", "content": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='酒精中毒性神经疾病' return n1.symptom.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"仪平\"]', '[\"共济失调\"]', '[\"抽搐\"]', '[\"昏迷\"]', '[\"木僵\"]', '[\"病理性醉酒\"]', '[\"痴呆\"]', '[\"胎儿酒精综合征\"]']"}
{"prompt": "巴巴吉德·阿金巴德从属于哪个组织？", "content": "MATCH (n:character{name:'巴巴吉德·阿金巴德'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"国际巫师联合会\" :group{name: \"国际巫师联合会\"})]']"}
{"prompt": "Identify the entities connected to 'Kobe Bryant' through a 'like' relationship, and then return the names of these entities, including those on the two-step path.", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "软组织损伤的预防措施有哪些？", "content": "MATCH (n:disease{name:\"软组织损伤\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"日常预防 1、不要抽烟，喝酒，应该少吃甜食，油性和辣的食物。这些都会影响病情的发展。 2、平时一定要多喝水，经常喝一些绿豆汤，菊花茶之类的，有清热解毒的作用。 3、养成良好的卫生习惯，一定要勤洗手，洗澡，保持衣服的干净，保持良好的心态。 4、保持皮肤干燥清爽，汗腺通畅，是防止机体发生化脓性感染的有效措施。 5、尽量房间干净，不要有蚊子，昆虫之类的，避免玻璃、钉子割伤刺伤以及水火烫伤等，防止感染。 6、患有瘙痒性皮肤病者，一定要积极治疗，避免搔抓，不可任意挤压排脓，以免炎症扩散。\"]']"}
{"prompt": "小儿中暑和暑热症的预防措施有哪些？", "content": "MATCH (n:disease{name:\"小儿中暑和暑热症\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"一般预防 在炎热的夏季尽量减少孩子在烈日下或通风不好的地方游玩;不要穿戴厚而通气性能差的衣服;出汗多时应经常口服略有咸味的盐水，并利用通风设备使皮肤保持凉爽;对酷热下参加农业劳动的中小学生，要合理安排劳动时间，劳动时要戴草帽，并及时供应凉盐开水或绿豆汤;发现孩子有中暑先兆时，应使其迅速离开现场;对有暑热症病史的小儿，到夏季尽可能移居到比较阴凉的地区。\"]']"}
{"prompt": "获取 'Boris Diaw' 和 'Tony Parker' 两个球员的姓名和年龄信息，并去重返回。", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "您好，请帮我找到ID为'Carmelo'的球员，然后告诉我他的年龄是多少。", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "查看和胸痛相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"胸痛\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"胸痛\" :symptom{})], [(\"X综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"Ⅰ型免疫母细胞性淋巴腺病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"上腔静脉综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"下呼吸道感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"不动杆菌感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"主动脉夹层\")-[:has_symptom@0{}]->(\"胸痛\"), (\"乳腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"产碱杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"传导性腹痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"假单胞菌感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性心包缺如或缺损\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性肺动静脉瘘\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性肺囊肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"先天性食管重复\")-[:has_symptom@0{}]->(\"胸痛\"), (\"军团菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"冠状动脉供血不足\")-[:has_symptom@0{}]->(\"胸痛\"), (\"创伤性血胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"化学液体吸入\")-[:has_symptom@0{}]->(\"胸痛\"), (\"卡普兰综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"原发性高脂蛋白血症与黄瘤增生病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"双向性室性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"呼吸性碱中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"呼吸性细支气管炎间质肺病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"呼吸性细支气管相关的间质性肺疾病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"嗜酸性细胞增多症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"坏死性结节病样肉芽肿病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"大叶性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"妊娠合并系统性红斑狼疮\")-[:has_symptom@0{}]->(\"胸痛\"), (\"婴幼儿胃食管反流\")-[:has_symptom@0{}]->(\"胸痛\"), (\"实喘\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿下腔静脉阻塞综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿军团病肾病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿埃博拉病毒病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿急性支气管炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿急性气管支气管炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿慢性支气管炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿支原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿热带嗜酸性粒细胞增多症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿纵隔压迫综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿结核性胸膜炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺不张\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺出血-肾炎综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺栓塞\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺水肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺泡性蛋白沉积症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺脓肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿肺隔离症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿衣原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿韦格纳肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"小儿食管化学性烧伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"左房恶性黏液瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"巴斯德菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"广州管圆线虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弗郎西丝菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"张力性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫型间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫性恶性间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫性胸膜间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"弥漫性食管痉挛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包切开术后综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包囊肿与心包憩室\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包积液\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包转移瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心包间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心尖肥厚型心肌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心绞痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心肌梗塞并发心室间隔穿破\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏瓣膜关闭不全\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏神经症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏钝性闭合伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心脏黏液瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"心血瘀阻\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性侵袭型肺曲霉病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性冠脉综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性嗜酸性粒细胞性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性感染性心内膜炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性特发性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性肺源性心脏病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"急性脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"惠普尔病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"感染性肋软骨炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"支气管中心性肉芽肿病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"放射性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"新生儿肺不张\")-[:has_symptom@0{}]->(\"胸痛\"), (\"早期复极综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"束支折返性室性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"枸橼酸杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"柯萨奇病毒疹\")-[:has_symptom@0{}]->(\"胸痛\"), (\"气管支气管异物\")-[:has_symptom@0{}]->(\"胸痛\"), (\"氯气中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"汽油中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"沙眼衣原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"沙门氏菌性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"沙雷菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"流行性斑疹伤寒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"淋巴瘤样肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"淋巴管平滑肌瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"炭疽病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"片吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"特发性含铁血黄素沉着症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"特发性嗜酸性粒细胞增多综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"特发性高嗜酸性细胞综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"猝死型冠心病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"球形肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"甲型H1N1流感\")-[:has_symptom@0{}]->(\"胸痛\"), (\"甲醛中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"痧气\")-[:has_symptom@0{}]->(\"胸痛\"), (\"痰火\")-[:has_symptom@0{}]->(\"胸痛\"), (\"真菌性关节炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"石棉肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"矽肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"硬化剂治疗引起的食管损害\")-[:has_symptom@0{}]->(\"胸痛\"), (\"稳定型心绞痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"窦性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"类肺炎性胸腔积液\")-[:has_symptom@0{}]->(\"胸痛\"), (\"类风湿关节炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"系统性红斑狼疮\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔畸胎瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔脓肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔间叶源性肿瘤及其他肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔非霍奇金恶性淋巴肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"纵隔非霍奇金淋巴瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"细粒棘球蚴病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"细菌性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结核性胸膜炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结核病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结肠类癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"结节病性心肌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"继发性肺结核\")-[:has_symptom@0{}]->(\"胸痛\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"胸痛\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"羌虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人上腔静脉受压综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人乳腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人变异型心绞痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人支原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人病态窦房结综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人肺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人自发性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人阳性杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"老年人院内获得性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肋骨骨折\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肝咳\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肝火犯肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肠球菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺假性淋巴瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺动脉高压\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺动静脉瘘\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺动静脉瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺宫崎肺吸虫症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺并殖吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺曲菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺栓塞\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺栓塞和肺梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺毛霉病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺泡癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺泡蛋白沉着症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺泡蛋白质沉积症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎克雷白杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎性假瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎杆菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎球菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎衣原体肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺炎链球菌性肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺爆震伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺真菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺组织细胞增生症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺脓肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺芽生菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺螨病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺诺卡菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺错构瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肺隔离症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"肿瘤性心包炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胁痛\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胃扭转\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胆固醇脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"背痈\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸主动脉夹层动脉瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸内异物\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸壁骨肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸椎病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸椎结核椎旁脓肿穿入胸腔\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腔积液\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺囊肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺小细胞癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸腺类癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸膜间皮瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸长神经卡压症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸降主动脉动脉瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"胸骨骨折\")-[:has_symptom@0{}]->(\"胸痛\"), (\"脑膜炎奈瑟菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"脓胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"腺癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膀胱移行细胞癌\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膈上食管憩室\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膈扑动\")-[:has_symptom@0{}]->(\"胸痛\"), (\"膈疝\")-[:has_symptom@0{}]->(\"胸痛\"), (\"自发性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"致肠细胞病变人孤儿病毒感染\")-[:has_symptom@0{}]->(\"胸痛\"), (\"良性阵发性腹膜炎综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"药物导致的肺部疾病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"获得性免疫缺陷综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血吸虫病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血栓形成\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"血管损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"诺卡菌病\")-[:has_symptom@0{}]->(\"胸痛\"), (\"转移性胸膜肿瘤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"输血后血小板减少性紫癜\")-[:has_symptom@0{}]->(\"胸痛\"), (\"过度通气综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"遗传性乳腺癌-卵巢癌综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"铁尘肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"铝尘肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"锑末沉着症\")-[:has_symptom@0{}]->(\"胸痛\"), (\"锡尘肺\")-[:has_symptom@0{}]->(\"胸痛\"), (\"镍中毒\")-[:has_symptom@0{}]->(\"胸痛\"), (\"闭合性气胸\")-[:has_symptom@0{}]->(\"胸痛\"), (\"青年心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"非ST段抬高心肌梗死\")-[:has_symptom@0{}]->(\"胸痛\"), (\"韦格内肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"韦格纳肉芽肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"颈椎小关节创伤性退变性关节炎\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管囊肿\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管穿孔\")-[:has_symptom@0{}]->(\"胸痛\"), (\"食管穿透性损伤\")-[:has_symptom@0{}]->(\"胸痛\"), (\"麦格综合征\")-[:has_symptom@0{}]->(\"胸痛\"), (\"鼠疫耶尔森菌肺炎\")-[:has_symptom@0{}]->(\"胸痛\")]]', '[[(\"主动脉夹层\" :disease{}), (\"先天性食管重复\" :disease{}), (\"冠状动脉供血不足\" :symptom{} :disease{}), (\"化学液体吸入\" :disease{}), (\"小儿肺不张\" :disease{}), (\"心脏黏液瘤\" :disease{}), (\"特发性含铁血黄素沉着症\" :disease{}), (\"特发性嗜酸性粒细胞增多综合征\" :disease{}), (\"甲型H1N1流感\" :disease{}), (\"矽肺\" :disease{}), (\"纵隔非霍奇金恶性淋巴肿瘤\" :disease{}), (\"结肠类癌\" :disease{}), (\"老年人上腔静脉受压综合征\" :disease{}), (\"老年人乳腺癌\" :disease{}), (\"老年人肺栓塞\" :disease{}), (\"肺动静脉瘘\" :symptom{} :disease{}), (\"肺动静脉瘤\" :disease{}), (\"肺泡癌\" :disease{}), (\"肺泡蛋白质沉积症\" :disease{}), (\"胸内异物\" :disease{}), (\"胸壁骨肿瘤\" :disease{}), (\"胸降主动脉动脉瘤\" :disease{}), (\"自发性气胸\" :disease{}), (\"血管损伤\" :disease{}), (\"麦格综合征\" :disease{}), (\"Ⅰ型免疫母细胞性淋巴腺病\" :disease{}), (\"不动杆菌感染\" :disease{}), (\"坏死性结节病样肉芽肿病\" :disease{}), (\"小儿埃博拉病毒病\" :disease{}), (\"小儿热带嗜酸性粒细胞增多症\" :disease{}), (\"小儿肺泡性蛋白沉积症\" :disease{}), (\"心尖肥厚型心肌病\" :disease{}), (\"感染性肋软骨炎\" :disease{}), (\"新生儿肺不张\" :disease{}), (\"气管支气管异物\" :disease{}), (\"猝死型冠心病\" :disease{}), (\"窦性心动过速\" :disease{}), (\"系统性红斑狼疮\" :disease{}), (\"缺血性多形性室性心动过速\" :disease{}), (\"老年人变异型心绞痛\" :disease{}), (\"老年人病态窦房结综合征\" :disease{}), (\"肺宫崎肺吸虫症\" :disease{}), (\"肺毛霉病\" :disease{}), (\"肺真菌病\" :disease{}), (\"血栓形成\" :disease{}), (\"过度通气综合征\" :disease{}), (\"鼠疫耶尔森菌肺炎\" :disease{}), (\"乳腺癌\" :disease{}), (\"假单胞菌感染\" :disease{}), (\"小儿支原体肺炎\" :disease{}), (\"小儿肺水肿\" :disease{}), (\"弥漫性胸膜间皮瘤\" :disease{}), (\"心包切开术后综合征\" :disease{}), (\"心脏神经症\" :disease{}), (\"心脏钝性闭合伤\" :disease{}), (\"急性侵袭型肺曲霉病\" :disease{}), (\"急性感染性心内膜炎\" :disease{}), (\"急性特发性心包炎\" :disease{}), (\"惠普尔病\" :disease{}), (\"沙门氏菌性肺炎\" :disease{}), (\"淋巴瘤样肉芽肿\" :disease{}), (\"球形肺炎\" :disease{}), (\"细粒棘球蚴病\" :disease{}), (\"肋骨骨折\" :disease{}), (\"肺动脉高压\" :disease{}), (\"肺损伤\" :disease{}), (\"肺栓塞\" :symptom{} :disease{}), (\"胸椎病\" :disease{}), (\"胸腺癌\" :disease{}), (\"膀胱移行细胞癌\" :disease{}), (\"膈扑动\" :disease{}), (\"呼吸性细支气管炎间质肺病\" :disease{}), (\"小儿急性支气管炎\" :disease{}), (\"小儿气胸\" :disease{}), (\"小儿纵隔压迫综合征\" :disease{}), (\"小儿肺隔离症\" :disease{}), (\"小儿韦格纳肉芽肿\" :disease{}), (\"弥漫性食管痉挛\" :disease{}), (\"心绞痛\" :symptom{} :disease{}), (\"心肌梗死后心包炎\" :disease{}), (\"急性脓胸\" :disease{}), (\"炭疽病\" :disease{}), (\"甲醛中毒\" :disease{}), (\"纵隔畸胎瘤\" :disease{}), (\"纵隔间叶源性肿瘤及其他肿瘤\" :disease{}), (\"结核性胸膜炎\" :disease{}), (\"结核病\" :disease{}), (\"结节病性心肌病\" :disease{}), (\"羌虫病\" :disease{}), (\"肠球菌肺炎\" :disease{}), (\"肺假性淋巴瘤\" :disease{}), (\"肺泡蛋白沉着症\" :disease{}), (\"肺爆震伤\" :disease{}), (\"肺病\" :disease{}), (\"肺组织细胞增生症\" :disease{}), (\"肺诺卡菌病\" :disease{}), (\"肺隔离症\" :disease{}), (\"获得性免疫缺陷综合征\" :disease{}), (\"遗传性乳腺癌-卵巢癌综合征\" :disease{}), (\"铝尘肺\" :disease{}), (\"锑末沉着症\" :disease{}), (\"镍中毒\" :disease{}), (\"韦格内肉芽肿\" :disease{}), (\"军团菌肺炎\" :disease{}), (\"小儿下腔静脉阻塞综合征\" :disease{}), (\"小儿慢性支气管炎\" :disease{}), (\"小儿肺栓塞\" :disease{}), (\"弥漫型间皮瘤\" :disease{}), (\"心包囊肿与心包憩室\" :disease{}), (\"心肌梗塞并发心室间隔穿破\" :disease{}), (\"心血瘀阻\" :disease{}), (\"放射性肺炎\" :disease{}), (\"早期复极综合征\" :disease{}), (\"汽油中毒\" :disease{}), (\"纵隔非霍奇金淋巴瘤\" :disease{}), (\"老年人院内获得性肺炎\" :disease{}), (\"肺脓肿\" :disease{}), (\"胁痛\" :disease{}), (\"胆固醇脓胸\" :disease{}), (\"上腔静脉综合征\" :disease{}), (\"传导性腹痛\" :symptom{} :disease{}), (\"先天性心包缺如或缺损\" :disease{}), (\"创伤性血胸\" :disease{}), (\"呼吸性细支气管相关的间质性肺疾病\" :disease{}), (\"嗜酸性细胞增多症\" :disease{}), (\"婴幼儿胃食管反流\" :disease{}), (\"实喘\" :disease{}), (\"广州管圆线虫病\" :disease{}), (\"弗郎西丝菌肺炎\" :disease{}), (\"张力性气胸\" :disease{}), (\"急性肺源性心脏病\" :disease{}), (\"枸橼酸杆菌肺炎\" :disease{}), (\"柯萨奇病毒疹\" :disease{}), (\"沙雷菌肺炎\" :disease{}), (\"淋巴管平滑肌瘤\" :disease{}), (\"稳定型心绞痛\" :disease{}), (\"类风湿关节炎\" :symptom{} :disease{}), (\"纵隔肿瘤\" :disease{}), (\"老年人支原体肺炎\" :disease{}), (\"老年人阳性杆菌肺炎\" :disease{}), (\"肺并殖吸虫病\" :disease{}), (\"肺炎性假瘤\" :disease{}), (\"肺炎衣原体肺炎\" :disease{}), (\"肺错构瘤\" :disease{}), (\"膈上食管憩室\" :disease{}), (\"妊娠合并系统性红斑狼疮\" :disease{}), (\"小儿军团病肾病\" :disease{}), (\"小儿肺脓肿\" :disease{}), (\"小儿衣原体肺炎\" :disease{}), (\"左房恶性黏液瘤\" :disease{}), (\"心肌梗死\" :symptom{} :disease{}), (\"急性冠脉综合征\" :disease{}), (\"急性嗜酸性粒细胞性肺炎\" :disease{}), (\"片吸虫病\" :disease{}), (\"硬化剂治疗引起的食管损害\" :disease{}), (\"肝咳\" :disease{}), (\"肺炎球菌肺炎\" :disease{}), (\"肺芽生菌病\" :disease{}), (\"胃扭转\" :disease{}), (\"脓胸\" :symptom{} :disease{}), (\"药物导致的肺部疾病\" :disease{}), (\"血气胸\" :disease{}), (\"转移性胸膜肿瘤\" :disease{}), (\"输血后血小板减少性紫癜\" :disease{}), (\"闭合性气胸\" :disease{}), (\"韦格纳肉芽肿\" :disease{}), (\"下呼吸道感染\" :disease{}), (\"呼吸性碱中毒\" :symptom{} :disease{}), (\"小儿结核性胸膜炎\" :disease{}), (\"弥漫性恶性间皮瘤\" :disease{}), (\"心包积液\" :symptom{} :disease{}), (\"心包肿瘤\" :disease{}), (\"心包转移瘤\" :disease{}), (\"急性心包炎\" :disease{}), (\"支气管中心性肉芽肿病\" :disease{}), (\"流行性斑疹伤寒\" :disease{}), (\"特发性高嗜酸性细胞综合征\" :disease{}), (\"痧气\" :disease{}), (\"痰火\" :disease{}), (\"真菌性关节炎\" :disease{}), (\"细菌性心包炎\" :disease{}), (\"缺血性心肌病\" :disease{}), (\"老年人肺癌\" :disease{}), (\"老年人自发性气胸\" :disease{}), (\"肝火犯肺\" :disease{}), (\"肺炎杆菌肺炎\" :disease{}), (\"胸主动脉夹层动脉瘤\" :disease{}), (\"胸腺囊肿\" :disease{}), (\"胸腺小细胞癌\" :disease{}), (\"胸腺类癌\" :disease{}), (\"胸长神经卡压症\" :disease{}), (\"诺卡菌病\" :disease{}), (\"青年心肌梗死\" :disease{}), (\"非ST段抬高心肌梗死\" :disease{}), (\"颈椎小关节创伤性退变性关节炎\" :disease{}), (\"食管损伤\" :disease{}), (\"食管穿孔\" :disease{}), (\"食管穿透性损伤\" :disease{}), (\"X综合征\" :disease{}), (\"产碱杆菌肺炎\" :disease{}), (\"先天性肺囊肿\" :disease{}), (\"原发性高脂蛋白血症与黄瘤增生病\" :disease{}), (\"双向性室性心动过速\" :disease{}), (\"大叶性肺炎\" :disease{}), (\"小儿急性气管支气管炎\" :disease{}), (\"小儿肺出血-肾炎综合征\" :disease{}), (\"小儿脓胸\" :disease{}), (\"小儿食管化学性烧伤\" :disease{}), (\"巴斯德菌肺炎\" :disease{}), (\"心包间皮瘤\" :disease{}), (\"急性心肌梗死\" :disease{}), (\"束支折返性室性心动过速\" :disease{}), (\"石棉肺\" :disease{}), (\"类肺炎性胸腔积液\" :disease{}), (\"胸椎结核椎旁脓肿穿入胸腔\" :disease{}), (\"胸膜间皮瘤\" :disease{}), (\"胸骨骨折\" :disease{}), (\"腺癌\" :disease{}), (\"良性阵发性腹膜炎综合征\" :disease{}), (\"血吸虫病\" :disease{}), (\"锡尘肺\" :disease{}), (\"先天性肺动静脉瘘\" :disease{}), (\"卡普兰综合征\" :disease{}), (\"心脏瓣膜关闭不全\" :disease{}), (\"氯气中毒\" :disease{}), (\"沙眼衣原体肺炎\" :disease{}), (\"纵隔脓肿\" :disease{}), (\"继发性肺结核\" :disease{}), (\"肺吸虫病\" :disease{}), (\"肺曲菌病\" :disease{}), (\"肺栓塞和肺梗死\" :disease{}), (\"肺炎克雷白杆菌肺炎\" :disease{}), (\"肺炎链球菌性肺炎\" :disease{}), (\"肺螨病\" :disease{}), (\"肿瘤性心包炎\" :disease{}), (\"背痈\" :disease{}), (\"胸腔积液\" :symptom{} :disease{}), (\"脑膜炎奈瑟菌肺炎\" :disease{}), (\"膈疝\" :disease{}), (\"致肠细胞病变人孤儿病毒感染\" :disease{}), (\"铁尘肺\" :disease{}), (\"食管囊肿\" :disease{})], [(\"主动脉夹层\")-[:accompany_with@0{}]->(\"主动脉夹层\"), (\"主动脉夹层\")-[:accompany_with@0{}]->(\"血管损伤\"), (\"冠状动脉供血不足\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"冠状动脉供血不足\")-[:accompany_with@0{}]->(\"心绞痛\"), (\"矽肺\")-[:accompany_with@0{}]->(\"自发性气胸\"), (\"老年人上腔静脉受压综合征\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"老年人乳腺癌\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺动静脉瘤\")-[:has_symptom@0{}]->(\"肺动静脉瘘\"), (\"肺动静脉瘤\")-[:accompany_with@0{}]->(\"急性心肌梗死\"), (\"胸内异物\")-[:accompany_with@0{}]->(\"脓胸\"), (\"自发性气胸\")-[:accompany_with@0{}]->(\"血气胸\"), (\"麦格综合征\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心尖肥厚型心肌病\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"新生儿肺不张\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"系统性红斑狼疮\")-[:accompany_with@0{}]->(\"系统性红斑狼疮\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"老年人变异型心绞痛\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"肺宫崎肺吸虫症\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"肺毛霉病\")-[:accompany_with@0{}]->(\"心肌梗死\"), (\"肺真菌病\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"血栓形成\")-[:accompany_with@0{}]->(\"肺栓塞\"), (\"过度通气综合征\")-[:accompany_with@0{}]->(\"呼吸性碱中毒\"), (\"鼠疫耶尔森菌肺炎\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"小儿支原体肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"弥漫性胸膜间皮瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心包切开术后综合征\")-[:has_symptom@0{}]->(\"心包积液\"), (\"心脏神经症\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"急性特发性心包炎\")-[:has_symptom@0{}]->(\"心包积液\"), (\"惠普尔病\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"肋骨骨折\")-[:has_symptom@0{}]->(\"传导性腹痛\"), (\"肺动脉高压\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"小儿气胸\")-[:accompany_with@0{}]->(\"张力性气胸\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"心包积液\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"心肌梗死后心包炎\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"心肌梗死后心包炎\")-[:accompany_with@0{}]->(\"急性心肌梗死\"), (\"急性脓胸\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"纵隔畸胎瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"纵隔间叶源性肿瘤及其他肿瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"结核性胸膜炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"遗传性乳腺癌-卵巢癌综合征\")-[:accompany_with@0{}]->(\"乳腺癌\"), (\"弥漫型间皮瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"弥漫型间皮瘤\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"心包囊肿与心包憩室\")-[:accompany_with@0{}]->(\"上腔静脉综合征\"), (\"纵隔非霍奇金淋巴瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"老年人院内获得性肺炎\")-[:accompany_with@0{}]->(\"急性心肌梗死\"), (\"老年人院内获得性肺炎\")-[:accompany_with@0{}]->(\"脓胸\"), (\"胆固醇脓胸\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"创伤性血胸\")-[:has_symptom@0{}]->(\"脓胸\"), (\"创伤性血胸\")-[:accompany_with@0{}]->(\"脓胸\"), (\"实喘\")-[:accompany_with@0{}]->(\"实喘\"), (\"弗郎西丝菌肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"弗郎西丝菌肺炎\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"张力性气胸\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"急性肺源性心脏病\")-[:accompany_with@0{}]->(\"肺动脉高压\"), (\"柯萨奇病毒疹\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"淋巴管平滑肌瘤\")-[:has_symptom@0{}]->(\"心包积液\"), (\"老年人支原体肺炎\")-[:accompany_with@0{}]->(\"心包积液\"), (\"肺并殖吸虫病\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺并殖吸虫病\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"膈上食管憩室\")-[:accompany_with@0{}]->(\"弥漫性食管痉挛\"), (\"妊娠合并系统性红斑狼疮\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"小儿肺脓肿\")-[:has_symptom@0{}]->(\"脓胸\"), (\"小儿肺脓肿\")-[:accompany_with@0{}]->(\"脓胸\"), (\"急性冠脉综合征\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"急性冠脉综合征\")-[:accompany_with@0{}]->(\"心肌梗死\"), (\"硬化剂治疗引起的食管损害\")-[:has_symptom@0{}]->(\"脓胸\"), (\"硬化剂治疗引起的食管损害\")-[:accompany_with@0{}]->(\"食管穿孔\"), (\"肺芽生菌病\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺芽生菌病\")-[:accompany_with@0{}]->(\"脓胸\"), (\"胃扭转\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"转移性胸膜肿瘤\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"转移性胸膜肿瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"转移性胸膜肿瘤\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"闭合性气胸\")-[:accompany_with@0{}]->(\"肋骨骨折\"), (\"弥漫性恶性间皮瘤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心包转移瘤\")-[:has_symptom@0{}]->(\"心包积液\"), (\"细菌性心包炎\")-[:has_symptom@0{}]->(\"脓胸\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"缺血性心肌病\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"老年人自发性气胸\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"老年人自发性气胸\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"老年人自发性气胸\")-[:accompany_with@0{}]->(\"血气胸\"), (\"胸长神经卡压症\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"胸长神经卡压症\")-[:accompany_with@0{}]->(\"心绞痛\"), (\"青年心肌梗死\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"非ST段抬高心肌梗死\")-[:has_symptom@0{}]->(\"心绞痛\"), (\"食管穿透性损伤\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"大叶性肺炎\")-[:accompany_with@0{}]->(\"脓胸\"), (\"小儿脓胸\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"小儿食管化学性烧伤\")-[:accompany_with@0{}]->(\"肺脓肿\"), (\"小儿食管化学性烧伤\")-[:accompany_with@0{}]->(\"食管穿孔\"), (\"巴斯德菌肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"心包间皮瘤\")-[:has_symptom@0{}]->(\"心包积液\"), (\"心包间皮瘤\")-[:has_symptom@0{}]->(\"心肌梗死\"), (\"类肺炎性胸腔积液\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"胸椎结核椎旁脓肿穿入胸腔\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"先天性肺动静脉瘘\")-[:has_symptom@0{}]->(\"肺动静脉瘘\"), (\"卡普兰综合征\")-[:has_symptom@0{}]->(\"类风湿关节炎\"), (\"卡普兰综合征\")-[:accompany_with@0{}]->(\"肺动脉高压\"), (\"沙眼衣原体肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\"), (\"肺吸虫病\")-[:accompany_with@0{}]->(\"胸腔积液\"), (\"肺栓塞和肺梗死\")-[:has_symptom@0{}]->(\"肺栓塞\"), (\"肺栓塞和肺梗死\")-[:accompany_with@0{}]->(\"肺动脉高压\"), (\"肿瘤性心包炎\")-[:has_symptom@0{}]->(\"心包积液\"), (\"脑膜炎奈瑟菌肺炎\")-[:has_symptom@0{}]->(\"胸腔积液\")]]']"}
{"prompt": "Identify all entities that like 'Tony Parker' and 'Tim Duncan', and return these entities and their relationships, but exclude the relationships between 'Tony Parker' and 'Tim Duncan'.", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "梅林达·波宾的血统是什么？", "content": "MATCH (n:character{name:'梅林达·波宾'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"纯血统或混血统\"]']"}
{"prompt": "Find all the physical paths that can be reached through a maximum of 5 steps starting from 'Tim Duncan' through the 'like' and 'service' relationships, and sort them by path length to return to the top 10 paths.", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "忒修斯·斯卡曼德的未婚妻是谁？", "content": "MATCH (n:character{name:'忒修斯·斯卡曼德'})-[e:kindred{rel_type:'未婚妻'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "嘿，你能帮我查一下有没有关于'Kyrie Irving'的球员有2到3跳所服务或喜欢的实体吗？然后告诉我统计结果。", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "Identify entities that have a 'liking' relationship with 'Tim Duncan', and then identify the entities that these entities serve.", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "疰夏的注意事项有哪些？", "content": "MATCH (n:disease{name:\"疰夏\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"专业指导 1.家长要时常注意空气的温度和湿度，做好防暑降温、降湿工作，尽可能地给孩子创造一个舒适的学习和生活环境。夏季使用空调时，居室内温度应控制在２５℃－３０℃，与室外的温差不宜超过５℃，空气湿度应保持在５０％左右。 2.夏季孩子的穿着宜宽松，衣料宜选择柔软、透气、吸湿力较强的棉织品；婴儿的尿布也要用棉织品。孩子外出，要避免在烈日下暴晒（可使用遮阳伞、太阳帽），同时还要备些防暑用品，如清凉油、人丹、藿香正气水等。炎热之时，孩子要勤洗澡、勤换衣，但室外活动的时间要适当控制，不可放任自流。 3.要让孩子多喝水，婴儿须在两次喂奶之间加喂一次水。夏季里，儿童一般都爱吃冷饮，家长要选择那些既有消暑效果、营养价值又比较高的冷饮品种，如冰淇淋、酸牛奶、果汁等，适时、适量地供孩子饮食，而汽水、棒棒冰等纯粹解暑的冷饮，宜不吃或少吃。要注意饮食卫生，杜绝胃肠道疾病的发生。 4.对于疰夏症状较重的儿童，可在医生的指导下，实施一些“饮食疗法”，或服用一些药物，如香沙六君丸、六味地黄丸等。同时，还要特别关注天气条件。\"]']"}
{"prompt": "查找年龄为40的球员，并返回他们的姓名。", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Hello, could you please help me find the name of a player named 'Tim Duncan'?", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "Find the player entity with ID 'Carmelo Anthony' and return its age attribute value.", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "厥脱的治疗科室是哪些？", "content": "GO FROM \"厥脱\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"中医综合\"]']"}
{"prompt": "Hello, please help me find the player node for 'Boris Diaw' and return it to me.", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "找出 'Rajon Rondo' 在2013年至2018年期间所效力的球队，返回球员姓名、开始年份、结束年份和球队名称。", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "从 'Tim Duncan' 开始，通过喜欢和效力关系，获取两步内的所有实体和关系。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "脑血康丸能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'脑血康丸'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"基底节血肿\"]', '[\"多发性颅内血肿\"]', '[\"心脏直视手术所致神经疾病\"]', '[\"急性及亚急性脑内血肿\"]', '[\"急性脑内血肿\"]', '[\"迟发性外伤性脑内血肿\"]', '[\"颅后窝血肿\"]']"}
{"prompt": "Returns the name of the player named 'Tim Duncan'.", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "西莫·斐尼甘的父亲的妻子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='西莫·斐尼甘的父亲' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "莫恩的出生日期是什么？", "content": "MATCH (n:character{name:'莫恩'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"1979年9月2日至1980年9月1日间英国或爱尔兰\"]']"}
{"prompt": "雅各布·科瓦尔斯基的兄弟是什么物种？", "content": "MATCH (n:character{name:'雅各布·科瓦尔斯基的兄弟'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "阿布拉克萨斯·马尔福的血统是什么？", "content": "LOOKUP ON character WHERE character.name=='阿布拉克萨斯·马尔福' YIELD properties(vertex).blood AS blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"纯血统\"]']"}
{"prompt": "Starting from the entity of 'Tim Duncan', extend the 'like' relationship outward 1 to 4 steps, and return the 'like degree' and edge information between each edge.", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "查找ID为'Carmelo Anthony'的球员实体，并返回其年龄属性值。", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体，并返回这些实体的 ID。", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "前列通片能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'前列通片'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"前列腺增生\"]']"}
{"prompt": "帕金 (追球手II)的父亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='帕金 (追球手II)' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "吉米·珀克斯是哪个学院的？", "content": "MATCH (n:character{name:'吉米·珀克斯'})-[e:learn_from]-(n1:college) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]']"}
{"prompt": "得了心脏病应该去哪个科室就诊？", "content": "GO FROM \"心脏病\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"心内科\"]']"}
{"prompt": "Identify player entities aged 29.5 or older and return their ID and age information.", "content": "LOOKUP ON player WHERE player.age >= 29.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "找出所有球员之间的队友关系，返回球员1的姓名和球员2的姓名。", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "罗恩·韦斯莱的父亲是谁？", "content": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:kindred{rel_type:'父亲'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"亚瑟·韦斯莱\" :character{marital: \"已婚\", name: \"亚瑟·韦斯莱\", dead: \"\", born: \"1950年2月6日英国或爱尔兰\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"\", gender: \"男\"})]', '[(\"罗丝·韦斯莱\" :character{marital: \"\", name: \"罗丝·韦斯莱\", dead: \"\", born: \"约2006年，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"\", gender: \"女\"})]', '[(\"雨果·韦斯莱\" :character{marital: \"\", name: \"雨果·韦斯莱\", dead: \"\", born: \"约2007年或2008年，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"棕色\", eye: \"蓝色\", gender: \"男\"})]']"}
{"prompt": "Hello, please help me find a 40 year old player and give me their name and age plus 1.", "content": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 41]", "[\"Kobe Bryant\", 41]"]}
{"prompt": "西莫·斐尼甘从属于哪个组织？", "content": "MATCH (n:character{name:'西莫·斐尼甘'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"斐尼甘家庭\" :group{name: \"斐尼甘家庭\"})]', '[(\"爱尔兰\" :group{name: \"爱尔兰\"})]', '[(\"邓布利多军\" :group{name: \"邓布利多军\"})]']"}
{"prompt": "获取 'Kidd' 球员的姓名和年龄属性。", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "请问您能帮我找到 'Kristaps Porzingis' 喜欢的人吗？我需要他们的 vid。", "content": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "找出与 'Manu Ginobili' 有关系的所有实体，并返回这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份'和终点球员名。", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "戴西·多德里奇的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='戴西·多德里奇' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"蓝色\"]']"}
{"prompt": "Find all entities that like a player named 'Tim Duncan' with a preference level of 90, and have a relationship with 'Tim Duncan' of 2 to 3 hops. Return these entities and their relationship with the player.", "content": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")], (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]"]}
{"prompt": "迁延性昏迷的易感人群是哪些？", "content": "MATCH (n:disease{name:\"迁延性昏迷\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特定人群\"]']"}
{"prompt": "Returns the type and quantity of relationship between a player named 'Tim Duncan' and it.", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "找出从 'Yao Ming' 到 'Tony Parker' 的最短路径，路径上可以经过 '喜欢' 和 '服务' 关系，最多经过5个步骤，并返回路径信息。", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "得了戊型病毒性肝炎的治愈概率是多少？", "content": "FETCH PROP ON disease \"戊型病毒性肝炎\" YIELD properties(vertex).cured_prob as prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"70%\"]']"}
{"prompt": "约拉·布莱克的嫂子是谁？", "content": "MATCH (n:character)-[e:Kindred{rel_type:'嫂子'}]-(n1) WHERE n.character.name=='约拉·布莱克' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "得了白血病推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='白血病' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"拌生菜\"]', '[\"海带粳米粥\"]', '[\"清蒸蛋羹\"]', '[\"番茄西米粥\"]', '[\"白米粥\"]', '[\"红豆糯米粥\"]', '[\"芝麻酱拌生菜\"]', '[\"香椿蒸蛋羹\"]']"}
{"prompt": "您好，请帮我找出2001年加入球队的球员以及他们所在的球队名称。", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "Identify all entities that have a 'like' relationship with 'Tracy McGrady' and return the IDs of these entities.", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "从 'Tim Duncan' 出发，找出两步内 '喜欢' 程度在95到100之间的所有实体和关系。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "获取球员 'Grant Hill' 的姓名和年龄。", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "您好，请帮我查找一下名为'Tim Duncan'的球员的姓名好吗？", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系最短的路径，最多5步，按路径长度排序，返回前10条路径。", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "找出 'Tony Parker' 喜欢的实体，距离为双向0到2，且去重，返回这些实体的 ID。", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "Hey, can you help me find a player I like named 'Tim Duncan'? Their preference level is all 90, and their relationship with 'Tim Duncan' should be between 2 and 3 jumps. Can you tell me all about these players and their relationship with 'Tim Duncan'?", "content": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")], (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]"]}
{"prompt": "查找名为'Yao Ming'的球员所服务的球队或球员，并返回原始实体姓名。", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "霍奇金病的治愈概率是多少？", "content": "FETCH PROP ON disease \"霍奇金病\" YIELD properties(vertex).cured_prob as prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"5年生存率50%\"]']"}
{"prompt": "从 'Tim Duncan' 出发，找出两步内所有与其有 '喜欢' 关系的实体，并返回这些关系的详细信息。", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "Can you help me find all the entities that Porzingis likes and give me their IDs?", "content": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Luka Doncic\"]"]}
{"prompt": "您好，请问您能帮我获取一下'Kidd'球员的姓名和年龄属性吗？", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "得了软纤维瘤推荐吃什么药？", "content": "GO FROM \"软纤维瘤\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"地塞米松片\"]', '[\"地塞米松磷酸钠注射液\"]', '[\"狼疮丸\"]', '[\"磷酸氯喹片\"]', '[\"醋酸地塞米松片\"]', '[\"醋酸泼尼松片\"]']"}
{"prompt": " 嘿，你能帮我找一下与 'Tim Duncan' 有 '喜欢' 关系的人吗？然后再找出这些人所为谁 '服务' 的呢？", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "Hello, please help me identify the entities that have a two hop 'like' relationship with player 'Grant Hill' and return these paths to me.", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "Find the player named 'Yao Ming' and all the entities it serves, and return the name of the original entity.", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "凯文·布罗德莫的弟弟是谁？", "content": "MATCH (n:character{name:'凯文·布罗德莫'})-[e]-(n1) WHERE e.rel_type=='弟弟' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"卡尔·布罗德莫\" :character{marital: \"\", name: \"卡尔·布罗德莫\", dead: \"\", born: \"早于1941年\", blood: \"\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "找出和利奥波迪娜·斯梅绥克相关的两个人？", "content": "MATCH (n:character{name:'利奥波迪娜·斯梅绥克'})-[]-(n1) return n1 LIMIT 2", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"希伯克拉特·斯梅绥克\" :character{marital: \"\", name: \"希伯克拉特·斯梅绥克\", dead: \"\", born: \"早于1977年\", blood: \"\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]', '[(\"斯梅绥克家族\" :group{name: \"斯梅绥克家族\"})]']"}
{"prompt": "多少种病能够通过药物治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[6905]']"}
{"prompt": "温迪克·温瑞迪安参与了多少个组织？", "content": "MATCH (n:character{name:'温迪克·温瑞迪安'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[0]']"}
{"prompt": "Find the name of a player named 'Ray Allen'.", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "找出从 'Yao Ming' 到 'Tony Parker' 的最短路径，路径上包括喜欢和服务关系，最多经过5个步骤，并返回路径信息。", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "Hey, can you help me check which team the player named 'Yao Ming' plays for? Also, can you tell me his real name?", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "找出与 'Kobe Bryant' 相关联的实体，包括两步以内的 '喜欢' 关系的所有实体，并返回这些实体的名称。", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "莫瑞根是什么血统？", "content": "MATCH (n:character{name:'莫瑞根'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"纯血统\"]']"}
{"prompt": "请问您能帮我获取一下'Tony Parker'球员的姓名和年龄属性吗？", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "找出名为'Cory Joseph'的球员有喜欢关系的所有实体，并返回这些实体之间的关系路径。", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "您好，请帮我找一下与 'Manu Ginobili' 有 '喜欢' 或 '队友' 关系的实体。如果是 '喜欢' 的话，请确保喜欢程度大于90，并返回这些实体的喜欢程度、与 'Manu Ginobili' 成为队友的起始年份以及实体名称。", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": " 请问您能帮我查找一下名字叫'abc'的球员所服务的最多距离为3的所有实体，并返回它们的所有属性吗？", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find playing teams with a distance of 0 to 3 hops that are favored by players known as' Carter ', and count the total number of players served by these teams.", "content": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[63]"]}
{"prompt": "Hello, please help me identify all the players who like 'Tony Parker' and 'Tim Duncan', and give me their relationships, but do not include the likes between 'Tony Parker' and 'Tim Duncan'.", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find all the entities that Boris Diaw likes and return their IDs.", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "阿布拉克萨斯·马尔福的祖先有哪些？", "content": "GO 2 STEPS FROM \"阿布拉克萨斯·马尔福\" OVER kindred WHERE kindred.rel_type=='祖先' YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"卢修斯·马尔福一世\"]', '[\"尼古拉斯·马尔福\"]', '[\"阿曼德·马尔福\"]', '[\"卢修斯·马尔福一世\"]', '[\"布鲁图斯·马尔福\"]', '[\"阿曼德·马尔福\"]', '[\"阿曼德·马尔福\"]', '[\"卢修斯·马尔福 I\"]', '[\"尼古拉斯·马尔福\"]', '[\"布鲁图斯·马尔福\"]', '[\"阿曼德·马尔福\"]']"}
{"prompt": "尼可·勒梅的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='尼可·勒梅' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"深色\"]']"}
{"prompt": "下消化道出血的治愈概率是多少？", "content": "MATCH (n:disease{name:\"下消化道出血\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"60-80%\"]']"}
{"prompt": "您好，请帮我找出与 'Tim Duncan' 有 '喜欢' 关系的实体，它们与 'Tim Duncan' 的距离为2步。能否返回这些关系的边信息呢？", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "找出和蒂尔登·图茨相关的两个人？", "content": "MATCH (n:character{name:'蒂尔登·图茨'})-[e]-(n1) return n LIMIT 2", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"蒂尔登·图茨\" :character{name: \"蒂尔登·图茨\", marital: \"已婚\", born: \"1959年\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"蓝色\", height: \"\", hair: \"棕色\"})]', '[(\"蒂尔登·图茨\" :character{name: \"蒂尔登·图茨\", marital: \"已婚\", born: \"1959年\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"蓝色\", height: \"\", hair: \"棕色\"})]']"}
{"prompt": "返回与名为'Rudy'的球员节点所距0或1跳的服务关系的球员姓名。", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "弗利蒙·波特的妻子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='弗利蒙·波特' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"尤菲米娅·波特\" :character{marital: \"已婚\", name: \"尤菲米娅·波特\", dead: \"1978年6月到1980年7月31日间\", born: \"\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "帕金 (追球手II)有多少个兄妹？", "content": "MATCH (n:character{name:'帕金 (追球手II)'})-[e]-(n1:character) WHERE e.rel_type=='兄妹' return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[0]']"}
{"prompt": "找出 'Porzingis' 所 '喜欢' 的所有实体，并返回这些实体的 ID。", "content": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Luka Doncic\"]"]}
{"prompt": "Can you help me find the name of the team 'Spurs'?", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "找出所有 '喜欢' 'Steve Nash' 的实体，并返回这些实体与 'Steve Nash' 的关系中的目标实体。", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "您好，请帮我查找一下，从 'Ricky Rubio' 出发，沿着 '喜欢' 的边，距离在1到2步之间的所有实体的ID、关系权重和名称。", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "足外翻的症状有哪些？", "content": "MATCH (n:disease)-[e:has_symptom]->(n1:symptom) WHERE n.disease.name=='足外翻' return n1.symptom.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"下肢神经性疼痛\"]', '[\"肌肉跳动\"]', '[\"脚后跟长骨刺\"]']"}
{"prompt": "嘿，你能帮我找一下'Tracy McGrady'喜欢的东西吗？喜欢程度是90。然后把这些东西和他们的关系都给我返回一下。", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系，最多经过5步可到达的所有实体路径，并按路径长度排序，返回前10条路径。", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "下消化道出血的发病原因是什么？", "content": "MATCH (n:disease{name:\"下消化道出血\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"痔、肛裂、肛瘘。直肠疾病直肠的损伤、非特异性直肠炎、结核性直肠炎、直肠肿瘤、直肠类癌、邻近恶性肿瘤或脓肿侵入直肠。 细菌性痢疾、阿米巴痢疾、慢性非特异性溃疡性结肠炎、憩室、息肉、癌肿和血管畸形。小肠疾病急性出血性坏死性肠炎、肠结核、克隆病、空肠憩室炎或溃疡、肠套叠、小肠肿瘤、胃肠息肉病、小肠血管瘤及血管畸形。\"]']"}
{"prompt": "肌纤维组织炎的治疗药物有哪些？", "content": "GO FROM \"肌纤维组织炎\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"依托芬那酯凝胶\"]', '[\"樟脑醑\"]', '[\"萘丁美酮胶囊\"]', '[\"萘普生分散片\"]']"}
{"prompt": "Can you help me find out the teams' Rajon Rondo 'played for from 2013 to 2018? I need to know the player's name, start year, end year, and team name.", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "嘿，你能帮我找一下为 'Pistons' 队效力的球员吗？我想知道他们的名字。", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": " 您好，请帮我查找一下名为‘Yao Ming’的球员以及他所从事的所有职务，然后将原始实体的名称返回给我。", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "请问您能帮我找一下，和 'Danny Green' 有 '喜欢' 关系的人吗？然后再找出这些人的 '队友'，并告诉我这些人和他们的队友的ID。", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "找出 'Tony Parker' 所 '喜欢' 的所有实体，并返回这些实体的 ID。", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": " 嘿，能帮我找出年龄超过35岁的球员吗？然后统计一下他们的数量、年龄总和、最大年龄、最小年龄，还有平均年龄再加1，还有他们的所属标签。最后按照id、数量、最大年龄、最小年龄的顺序排序，跳过前10个结果，给我返回20个结果。", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "Could you please help me search for entities that have a liking or teammate relationship with 'Dwight Howard'? I need to know the level of liking of these entities, the starting year of my teammates, and the name of the endpoint entity.", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "找出 'Russell Westbrook' 所效力和喜欢的所有实体，并返回这些实体的 ID。", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "呼吸系统疾病伴发的精神障碍的治愈概率是多少？", "content": "MATCH (n:disease{name:\"呼吸系统疾病伴发的精神障碍\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"65%\"]']"}
{"prompt": "法尔科·艾萨伦的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='法尔科·艾萨伦' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"\"]']"}
{"prompt": "找出与 'Manu Ginobili' 有关系的实体，并返回这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份' 和 '球员姓名'。", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "密德莉的眼睛颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='密德莉' YIELD properties(vertex).eye AS eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"蓝色\"]']"}
{"prompt": "找出球员 'Tracy McGrady' 喜欢的球员，再找出这些球员所喜欢的球员的ID。", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "冈希尔达·尼恩的婚姻状况是什么？", "content": "MATCH (n:character{name:'冈希尔达·尼恩'}) return n.character.marital", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"已婚\"]']"}
{"prompt": "高血压的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"15.8%\"]']"}
{"prompt": "Find the shortest path from 'Yao Ming' to 'Tony Parker', which can go through 'like' and 'service' relationships, and can take up to 5 steps, and return path information.", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "全鹿丸能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'全鹿丸'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"前列腺增生\"]', '[\"绝经后骨质疏松\"]', '[\"老年人前列腺增生症\"]', '[\"老年人骨质疏松\"]', '[\"良性前列腺增生\"]', '[\"退变性关节病\"]', '[\"骨质疏松\"]']"}
{"prompt": "Find players older than 30.5 and return their ID and age information.", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "Can you help me find all the people who like Grant Hill? I need the endpoint ID for their favorite relationship with Grant Hill.", "content": "GO FROM \"Grant Hill\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]"]}
{"prompt": "找出 'Kristaps Porzingis' 所 '喜欢' 的所有人，并返回这些人的 vid。", "content": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "Hello, could you please help me check the information about LeBron James' team? The team name is Cavaliers. Can you tell me the path, relationship type, and team name?", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "迪芙娜·弗马吉的头发颜色是什么？", "content": "LOOKUP ON character WHERE character.name=='迪芙娜·弗马吉' YIELD properties(vertex).hair AS hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"红色\"]']"}
{"prompt": "Returns the type and number of relationships between a player named 'Tim Duncan' and their ownership.", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "Hello, please help me find entities related to 'Manu Ginobili' and provide me with their 'likes',' teammate start year ',' service start year ', and' player name '.", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "查找年龄为40的球员，并返回这些球员的姓名。", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "哈利波特是伊格诺图斯的什么关系？", "content": "MATCH (n:character{name:'伊格诺图斯·佩弗利尔'})-[e]-(n1:character{name:'哈利·波特'}) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"哈利·波特\" :group{name: \"哈利·波特\"} :character{marital: \"已婚\", name: \"哈利·波特\", dead: \"\", born: \"1980年7月31日，戈德里克山谷，英格兰西南部，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"乌黑\", eye: \"翠绿\", gender: \"男\"})]', '[(\"哈利·波特\" :group{name: \"哈利·波特\"} :character{marital: \"已婚\", name: \"哈利·波特\", dead: \"\", born: \"1980年7月31日，戈德里克山谷，英格兰西南部，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"乌黑\", eye: \"翠绿\", gender: \"男\"})]']"}
{"prompt": "拉道夫斯·莱斯特兰奇的出生时间是什么？", "content": "MATCH (n:character{name:'拉道夫斯·莱斯特兰奇'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"早于1818年\"]']"}
{"prompt": "Hey, can you help me insert an edge with a liking level of 99 from 'Tim Duncan' to 'Tim Parker'? There is also an edge with a liking level of 90 from 'Tim Parker' to 'Tony Parker' that needs to be inserted!", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "得了白血病推荐吃什么药？", "content": "GO FROM \"白血病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"乌苯美司片\"]', '[\"乌苯美司胶囊\"]', '[\"消癌平口服液\"]', '[\"消癌平片\"]', '[\"消癌平胶囊\"]', '[\"硫唑嘌呤片\"]', '[\"醋酸地塞米松片\"]', '[\"醋酸泼尼松片\"]']"}
{"prompt": " 您好，请帮我获取'Boris Diaw'和'Tony Parker'这两位球员的姓名和年龄信息，并确保没有重复的返回给我。", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "Identify entities related to 'Manu Ginobili' and return their 'likes',' teammate start year ',' service start year ', and' player name '.", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "请问您能帮我查找一下'Boris Diaw'曾效力过的球队和他在每个球队的服务时间吗？我需要知道他的姓名、效力起始和结束年份以及队名。", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "奥塔莱恩·甘布尔的性别是什么？", "content": "MATCH (n:character{name:'奥塔莱恩·甘布尔'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"女\"]']"}
{"prompt": "血稠的治愈概率是多少？", "content": "MATCH (n:disease{name:\"血稠\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"90%\"]']"}
{"prompt": "Find the shortest path from 'Yao Ming' to 'Tony Parker', which includes likes and service relationships. Go through a maximum of 5 steps and return path information.", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "Obtain the name and age of the player with ID 'Carmelo Anthony'.", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "嘿，你能帮我找出所有喜欢Tony Parker的实体吗？并且返回这些实体与Tony Parker之间喜欢关系的实体ID。", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "请问您能帮我找到所有球员的姓名和节点信息吗？", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "返回球员'LeBron James'所在的球队' Cavaliers'的关系类型和球队名称。", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "Find the shortest path starting from 'Tim Duncan' through the relationship between 'likes' and' services', with a maximum of 5 steps, sorted by path length, and return to the top 10 paths.", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "得了糖尿病应该去哪个科室就诊？", "content": "GO FROM \"糖尿病\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"内分泌科\"]']"}
{"prompt": "Find the entity that a player named 'Carmelo Anthony' likes and return the player's name and age.", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "获取 'Tony Parker' 喜欢 'Tim Duncan' 和 'Grant Hill' 喜欢 'Tracy McGrady' 的关系属性，并返回这些属性。", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "找出ID为'Paul Gasol'的顶点，且通过'serve'关系连接的所有球队，返回这个球员的名字和他效力的球队名称。", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "Returns the name of the player in the service relationship that is 0 or 1 jump away from the player node named 'Rudy'.", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "请问您能帮我找一下，从 'Tim Duncan' 到 'Tony Parker' 的最多三步反向 '喜欢' 关系的路径信息吗？", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "乔治·韦斯莱的妻子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='乔治·韦斯莱' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "您好，请帮我查找一下'Tony Parker'喜欢'Tim Duncan'和'Grant Hill'喜欢'Tracy McGrady'之间的关系属性，能帮我返回这些属性吗？", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "与詹姆·小天狼星·波特具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"詹姆·小天狼星·波特\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"亚瑟·韦斯莱\"]', '[\"伊格诺图斯·佩弗利尔\"]', '[\"哈利·波特\"]', '[\"罗丝·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莉莉·伊万斯\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"赫敏·格兰杰\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"卡德摩斯·佩弗利尔\"]', '[\"哈利·波特\"]', '[\"安提俄克·佩弗利尔\"]', '[\"弗利蒙·波特\"]', '[\"莉莉·卢娜·波特\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊万斯先生\"]', '[\"伊万斯夫人\"]', '[\"伊格诺图斯·佩弗利尔\"]', '[\"佩妮·德思礼\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"尤菲米娅·波特\"]', '[\"弗农·德思礼\"]', '[\"弗利蒙·波特\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德思礼夫人\"]', '[\"斯廷奇库姆的林弗雷德\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"汤姆·里德尔\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易斯·韦斯莱\"]', '[\"达力·德思礼\"]', '[\"达力的孩子\"]', '[\"金妮·波特\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊格诺图斯·佩弗利尔\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"斯廷奇库姆的林弗雷德\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·伊万斯\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"罗恩·韦斯莱\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫敏·格兰杰\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"泰丝\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱二世\"]', '[\"莫丽·韦斯莱，原姓普威特\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"哈利·波特\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫敏·格兰杰\"]', '[\"金妮·波特\"]', '[\"阿不思·西弗勒斯·波特\"]']"}
{"prompt": "嘿，你能帮我找到'Boris Diaw'在'Haw'球队的所有信息吗？我需要知道他的球员姓名、服役起始年份、服役结束年份和所在队伍名称。", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "龙虎人丹能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'龙虎人丹'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"中暑\"]', '[\"中暑痉挛\"]', '[\"中暑衰竭\"]', '[\"温热\"]', '[\"热射病\"]', '[\"热痉挛\"]', '[\"热衰竭\"]', '[\"疰夏\"]', '[\"中暑\"]', '[\"中暑痉挛\"]', '[\"中暑衰竭\"]', '[\"久泄\"]', '[\"五更泄\"]', '[\"代谢性酸中毒\"]', '[\"休息痢\"]', '[\"小儿迁延与慢性腹泻\"]', '[\"旅行者腹泻\"]', '[\"晕动病\"]', '[\"暴泻\"]', '[\"母乳性腹泻\"]', '[\"温热\"]', '[\"湿热痢\"]', '[\"热射病\"]', '[\"热带性口炎性腹泻\"]', '[\"热痉挛\"]', '[\"热衰竭\"]', '[\"疰夏\"]', '[\"白痢\"]', '[\"眩晕症\"]', '[\"脾虚泄泻\"]', '[\"腹泻\"]', '[\"赤痢\"]']"}
{"prompt": "您好，请帮我查找一下，从'Ricky Rubio'开始，沿着'喜欢'的关系，向外扩展1到2步，返回所有实体的ID、关系权重和名称，可以吗？", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "Obtain the name and age of the player for 'Carmelo'.", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "糖尿病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"糖尿病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"8.3%（国际糖尿病联盟统计，2013在20-79岁成人中患病率为8.3%）\"]']"}
{"prompt": "Obtain the names and age information of two players, 'Boris Diaw' and 'Tony Parker', and go back.", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "找出从 'Tim Duncan' 到 'Nobody' 或 'Spur' 的 '喜欢' 关系的路径，最多包含3个节点，并返回这些路径。", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "返回拉福尔周边最多二跳关系的子图？", "content": "GET SUBGRAPH 2 STEPS FROM \"菲菲·拉福尔\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"菲菲·拉福尔\" :character{})], []]']"}
{"prompt": "Hello, could you please help me find all the paths from 'Tim Duncan' to 'Nobody' or 'Spur'? The relationship on the path is' like ', and there can be up to 3 nodes. Can you return these paths to me?", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "赫普兹巴·史密斯的头发颜色是什么？", "content": "MATCH (n:character{name:'赫普兹巴·史密斯'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"姜黄色（假发）\"]']"}
{"prompt": "您好，请帮我查找一下，从 'Tony Parker' 出发，沿着双向 '喜欢' 关系，经过 0 到 2 步，返回所有不重复的实体的 ID。", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "找出年龄在30到40岁之间的 'Ginobili' 的所有队友和 '喜欢' 的实体，并返回这些实体的年龄和姓名。", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "Identify all entities with a distance of 3 that have a 'like' and 'service' relationship with 'Tim Duncan' and are labeled and aged over 40, and return these entities.", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": " 您好，请帮我找一下年龄超过30.5岁的球员，然后给我他们的ID和年龄信息。", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "得了糖尿病推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='糖尿病' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"五谷糙米粥\"]', '[\"五豆补益糙米粥\"]', '[\"山楂核桃茶\"]', '[\"木耳核桃炖豆腐\"]', '[\"枸杞核桃粥\"]', '[\"紫菜芙蓉汤\"]', '[\"翡翠莲藕片\"]', '[\"黄豆莲藕排骨汤\"]']"}
{"prompt": "Return the name attributes of the first two players and sort them by name attribute.", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "Hello, could you please help me find out which entities can be reached through the 'like' and 'serve' relationships of a jump starting from 'Tim Duncan'? And at most three jumps can be made to associate the two. Can you return these paths to me?", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND ALL PATH FROM $-.src TO $-.dst OVER like UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"LaMarcus Aldridge\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"LaMarcus Aldridge\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"LaMarcus Aldridge\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "请问您能帮我找到2001年加入球队的球员名称和他们所在的球队名称吗？", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "Hello, please help me identify all entities that have a 'like' relationship with 'Tracy McGrady' and return their IDs.", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "请问您能帮我查找一下，2000年之后，名为'Tracy McGrady'的球员所服务或喜欢的实体及其关系吗？", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "找出年龄在30到40岁之间的'Manu Ginobili'的所有队友和喜欢的实体，返回这些实体的年龄和姓名。", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE $$.player.age > 30 and $$.player.age < 40\nYIELD DISTINCT $$.player.age, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[36, \"Tony Parker\"]", "[34, \"Tiago Splitter\"]"]}
{"prompt": "找到ID为'Carmelo'的球员实体，返回其年龄属性值。", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "Search for teammate relationships between all players and return their names.", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "偏头痛的预防措施有哪些？", "content": "MATCH (n:disease{name:\"偏头痛\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"由于许多因素可诱发偏头痛，在生活起居中注意调护，避免这些因素对身体的侵袭，慎起居，调理饮食，情志等在一定程度可以预防偏头痛发作。 偏头痛生活调理 1、注意气侯的影响，风，燥，湿热，暴风雨，明亮耀眼的阳光，寒冷，雷声等气候变化均可诱发偏头痛发作，注意避风寒，保暖，不要暴晒淋雨，防止诱发致病。 2、注意睡眠，运动或过劳的影响，注意规律的睡眠，运动，加强工作计划性，条理性，注意劳逸结合，注意眼睛调节，保护对敏感病人来说是重要的预防措施。 3、注意室内通风，戒烟酒。 4、注意药物的影响，可诱发偏头痛药物如避孕药，硝酸甘油，组织胺，利血平，肼苯达嗪，雌激素，过量VitA等。\"]']"}
{"prompt": "从'Tim Duncan'的实体出发，沿着'喜欢'关系向外扩展1到4步，返回每个边之间的'喜欢程度'和边的信息。", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "Returns the type and number of players named 'Rudy Gay' and their ownership relationships.", "content": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 1]", "[\"serve\", 4]"]}
{"prompt": "查看和高血压相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"高血压\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"高血压\" :disease{})], [(\"高血压\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"高血压\")-[:no_eat@0{}]->(\"杏仁\"), (\"高血压\")-[:no_eat@0{}]->(\"腐竹\"), (\"高血压\")-[:no_eat@0{}]->(\"鸡肝\"), (\"高血压\")-[:need_check@0{}]->(\"动态血压监测(ABPM)\"), (\"高血压\")-[:need_check@0{}]->(\"心电图\"), (\"高血压\")-[:need_check@0{}]->(\"甘油三酯\"), (\"高血压\")-[:need_check@0{}]->(\"白细胞介素4（iL-4）\"), (\"高血压\")-[:need_check@0{}]->(\"紧张度与动脉壁状态\"), (\"高血压\")-[:need_check@0{}]->(\"红细胞聚集性\"), (\"高血压\")-[:need_check@0{}]->(\"血压\"), (\"高血压\")-[:need_check@0{}]->(\"血清白细胞介素3\"), (\"高血压\")-[:need_check@0{}]->(\"血管紧张素Ⅱ\"), (\"高血压\")-[:need_check@0{}]->(\"速尿激发试验\"), (\"高血压\")-[:recommend_drug@0{}]->(\"Ⅰ\"), (\"高血压\")-[:recommend_drug@0{}]->(\"二十五味珊瑚丸\"), (\"高血压\")-[:recommend_drug@0{}]->(\"卡维地洛片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"厄贝沙坦片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"吲达帕胺滴丸\"), (\"高血压\")-[:recommend_drug@0{}]->(\"回心康片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"复方天麻蜜环糖肽片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"替米沙坦片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"盐酸乐卡地平片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"盐酸拉贝洛尔片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"盐酸贝那普利片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"硝苯地平缓释片Ⅰ\"), (\"高血压\")-[:recommend_drug@0{}]->(\"缬沙坦胶囊\"), (\"高血压\")-[:recommend_drug@0{}]->(\"脑立清丸\"), (\"高血压\")-[:recommend_drug@0{}]->(\"苯磺酸氨氯地平胶囊\"), (\"高血压\")-[:recommend_drug@0{}]->(\"薯蓣皂苷片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"赖诺普利片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"马来酸依那普利片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"马来酸氨氯地平片\"), (\"高血压\")-[:cure_department@0{}]->(\"心内科\"), (\"高血压\")-[:cure_way@0{}]->(\"手术治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高血压\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"高血压\")-[:do_eat@0{}]->(\"松子仁\"), (\"高血压\")-[:do_eat@0{}]->(\"芝麻\"), (\"高血压\")-[:do_eat@0{}]->(\"鸡肉\"), (\"高血压\")-[:recommend_eat@0{}]->(\"清盐菜花\"), (\"高血压\")-[:recommend_eat@0{}]->(\"灵芝羹\"), (\"高血压\")-[:recommend_eat@0{}]->(\"素熘菜花\"), (\"高血压\")-[:recommend_eat@0{}]->(\"胡萝卜粥\"), (\"高血压\")-[:recommend_eat@0{}]->(\"芹菜粥\"), (\"高血压\")-[:recommend_eat@0{}]->(\"葛根粉粥\"), (\"高血压\")-[:recommend_eat@0{}]->(\"香脆芹菜叶\"), (\"高血压\")-[:has_symptom@0{}]->(\"乏力\"), (\"高血压\")-[:has_symptom@0{}]->(\"头晕\"), (\"高血压\")-[:has_symptom@0{}]->(\"头晕目眩\"), (\"高血压\")-[:has_symptom@0{}]->(\"心脏主动脉瓣返流\"), (\"高血压\")-[:has_symptom@0{}]->(\"眼花\"), (\"高血压\")-[:has_symptom@0{}]->(\"神经性呕吐\"), (\"高血压\")-[:has_symptom@0{}]->(\"血压高\"), (\"高血压\")-[:has_symptom@0{}]->(\"重压感、紧箍感...\"), (\"高血压\")-[:has_symptom@0{}]->(\"颈部搏动\"), (\"高血压\")-[:accompany_with@0{}]->(\"中风\"), (\"Ⅳ型肾小管性酸中毒\")-[:accompany_with@0{}]->(\"高血压\"), (\"三叉神经痛\")-[:accompany_with@0{}]->(\"高血压\"), (\"中风后遗症\")-[:accompany_with@0{}]->(\"高血压\"), (\"假性高血压\")-[:accompany_with@0{}]->(\"高血压\"), (\"单纯性肾囊肿\")-[:accompany_with@0{}]->(\"高血压\"), (\"厥阴头痛\")-[:accompany_with@0{}]->(\"高血压\"), (\"口腔疾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"吉兰-巴雷综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"吡唑酮类中毒\")-[:accompany_with@0{}]->(\"高血压\"), (\"吸烟中毒症\")-[:accompany_with@0{}]->(\"高血压\"), (\"咳嗽\")-[:accompany_with@0{}]->(\"高血压\"), (\"囊性肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"围绝经期综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"头风病\")-[:accompany_with@0{}]->(\"高血压\"), (\"妇女雄激素源性秃发\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并甲状旁腺功能亢进\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并红细胞增多症\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并缺铁性贫血\")-[:accompany_with@0{}]->(\"高血压\"), (\"安卡性肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"家族性载脂蛋白B100缺陷症\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿先天性肾盂输尿管连接部梗阻\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿原发性膀胱输尿管反流\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿尿路感染\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿尿路梗阻\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿指甲-髌骨综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿狂犬病\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肝豆状核变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肾母细胞瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肾淀粉样变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肾结核\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿膀胱-输尿管反流综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿过敏性紫癜肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿麻痹症\")-[:accompany_with@0{}]->(\"高血压\"), (\"左束支中隔支传导阻滞\")-[:accompany_with@0{}]->(\"高血压\"), (\"库欣综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾功能不全\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾小管坏死\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾炎综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"急进性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"恶性高血压性小动脉性肾硬化\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性酒中毒\")-[:accompany_with@0{}]->(\"高血压\"), (\"新生儿急性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"新疆出血热\")-[:accompany_with@0{}]->(\"高血压\"), (\"更年期综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"未分化结缔组织病\")-[:accompany_with@0{}]->(\"高血压\"), (\"梗阻性肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"烟雾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"高血压\"), (\"狂犬病\")-[:accompany_with@0{}]->(\"高血压\"), (\"甲状旁腺功能亢进性心肌病\")-[:accompany_with@0{}]->(\"高血压\"), (\"痰浊眩晕\")-[:accompany_with@0{}]->(\"高血压\"), (\"短暂性脑缺血发作\")-[:accompany_with@0{}]->(\"高血压\"), (\"神经母细胞瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"高血压\"), (\"糖尿病性视网膜病变\")-[:accompany_with@0{}]->(\"高血压\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"高血压\"), (\"结节性多动脉炎性巩膜炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"缺血性结肠炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"羊水过少\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人吸入性肺炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人急性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人痛风\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人肥胖症\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人脑出血\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人颅内压增高\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"肝火眩晕\")-[:accompany_with@0{}]->(\"高血压\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"高血压\"), (\"肥胖性心肌病\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾上腺肿瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾上腺髓质增生\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾功能不全\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾动脉狭窄\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾动脉瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾动脉血栓形成和栓塞\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾囊肿\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾癌\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾积水\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾胚胎瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾虚\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾阴虚\")-[:accompany_with@0{}]->(\"高血压\"), (\"胰岛素抵抗与代谢综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"胼胝体进行性变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"脂肪肝\")-[:accompany_with@0{}]->(\"高血压\"), (\"脊椎病\")-[:accompany_with@0{}]->(\"高血压\"), (\"脊髓灰质炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"脑出血\")-[:accompany_with@0{}]->(\"高血压\"), (\"良性高血压性小动脉性肾硬化\")-[:accompany_with@0{}]->(\"高血压\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:accompany_with@0{}]->(\"高血压\"), (\"薄肾小球基底膜病\")-[:accompany_with@0{}]->(\"高血压\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"过敏性紫癜肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"遗传性肥胖\")-[:accompany_with@0{}]->(\"高血压\"), (\"酒中毒性小脑变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"酒中毒性痴呆\")-[:accompany_with@0{}]->(\"高血压\"), (\"酒精中毒性神经疾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"镇痛剂肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"间质性肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"隐匿型肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"隐匿性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"青年人中的成年发病型糖尿病\")-[:accompany_with@0{}]->(\"高血压\"), (\"项痹\")-[:accompany_with@0{}]->(\"高血压\"), (\"高原性心脏病\")-[:accompany_with@0{}]->(\"高血压\"), (\"高原适应不全症\")-[:accompany_with@0{}]->(\"高血压\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"高血压\")-[:common_drug@0{}]->(\"二十五味珊瑚丸\"), (\"高血压\")-[:common_drug@0{}]->(\"厄贝沙坦片\")]]', '[[(\"血压\" :check{}), (\"卡维地洛片\" :drug{}), (\"回心康片\" :drug{}), (\"赖诺普利片\" :drug{}), (\"中风后遗症\" :disease{}), (\"吡唑酮类中毒\" :disease{}), (\"头风病\" :disease{}), (\"妊娠合并缺铁性贫血\" :disease{}), (\"慢性肾小球肾炎\" :disease{}), (\"糖尿病性视网膜病变\" :disease{}), (\"红斑性肢痛症\" :disease{}), (\"结节性多动脉炎性巩膜炎\" :disease{}), (\"肾上腺肿瘤\" :disease{}), (\"肾上腺髓质增生\" :disease{}), (\"肾功能衰竭\" :symptom{} :disease{}), (\"肾动脉血栓形成和栓塞\" :disease{}), (\"蓝鼓膜与胆固醇肉芽肿\" :disease{}), (\"腐竹\" :food{}), (\"甘油三酯\" :check{}), (\"芝麻\" :food{}), (\"清盐菜花\" :food{}), (\"素熘菜花\" :food{}), (\"葛根粉粥\" :food{}), (\"妊娠合并甲状旁腺功能亢进\" :disease{}), (\"妊娠合并白血病\" :disease{}), (\"妊娠合并红细胞增多症\" :disease{}), (\"小儿尿路梗阻\" :disease{}), (\"小儿指甲-髌骨综合征\" :disease{}), (\"小儿肾母细胞瘤\" :disease{}), (\"小儿肾淀粉样变性\" :disease{}), (\"小儿阻塞性睡眠呼吸暂停\" :disease{}), (\"恶性高血压性小动脉性肾硬化\" :disease{}), (\"未分化结缔组织病\" :disease{}), (\"痰浊眩晕\" :disease{}), (\"老年人脑出血\" :disease{}), (\"老年人非霍奇金恶性淋巴肿瘤\" :disease{}), (\"胼胝体进行性变性\" :disease{}), (\"隐匿型肾炎\" :disease{}), (\"高原适应不全症\" :disease{}), (\"血清白细胞介素3\" :check{}), (\"速尿激发试验\" :check{}), (\"复方天麻蜜环糖肽片\" :drug{}), (\"盐酸拉贝洛尔片\" :drug{}), (\"支持性治疗\" :cure{}), (\"吉兰-巴雷综合征\" :disease{}), (\"妇女雄激素源性秃发\" :disease{}), (\"急性肾小球肾炎\" :disease{}), (\"狂犬病\" :disease{}), (\"老年肺炎\" :disease{}), (\"肾小球肾炎\" :disease{}), (\"镇痛剂肾病\" :disease{}), (\"吲达帕胺滴丸\" :drug{}), (\"马来酸依那普利片\" :drug{}), (\"马来酸氨氯地平片\" :drug{}), (\"药物治疗\" :cure{}), (\"胡萝卜粥\" :food{}), (\"血压高\" :symptom{}), (\"颈部搏动\" :symptom{}), (\"囊性肾病\" :disease{}), (\"小儿尿路感染\" :disease{}), (\"小儿慢性肾小球肾炎\" :disease{}), (\"库欣综合征\" :symptom{} :disease{}), (\"急性肾炎综合征\" :disease{}), (\"慢性酒中毒\" :disease{}), (\"新生儿急性肾功能衰竭\" :disease{}), (\"短暂性脑缺血发作\" :disease{}), (\"神经母细胞瘤\" :disease{}), (\"羊水过少\" :disease{}), (\"老年人吸入性肺炎\" :disease{}), (\"老年人急性肾功能衰竭\" :disease{}), (\"肾动脉狭窄\" :symptom{} :disease{}), (\"肾癌\" :disease{}), (\"酒中毒性小脑变性\" :disease{}), (\"间质性肾炎\" :disease{}), (\"项痹\" :disease{}), (\"心电图\" :check{}), (\"紧张度与动脉壁状态\" :check{}), (\"盐酸乐卡地平片\" :drug{}), (\"硝苯地平缓释片Ⅰ\" :drug{}), (\"脑立清丸\" :drug{}), (\"手术治疗\" :cure{}), (\"香脆芹菜叶\" :food{}), (\"三叉神经痛\" :disease{}), (\"安卡性肾炎\" :disease{}), (\"小儿膀胱-输尿管反流综合征\" :disease{}), (\"急性肾功能衰竭\" :disease{}), (\"缺血性结肠炎\" :disease{}), (\"脂肪肝\" :disease{}), (\"脑出血\" :disease{}), (\"酒中毒性痴呆\" :disease{}), (\"鸡肝\" :food{}), (\"心脏主动脉瓣返流\" :symptom{}), (\"眼花\" :symptom{}), (\"咳嗽\" :symptom{} :disease{}), (\"小儿过敏性紫癜肾炎\" :disease{}), (\"急性肾小管坏死\" :disease{}), (\"急性肾炎\" :disease{}), (\"梗阻性肾病\" :disease{}), (\"焦磷酸钙沉积病\" :disease{}), (\"肝火眩晕\" :disease{}), (\"肾囊肿\" :disease{}), (\"肾阴虚\" :disease{}), (\"脊髓灰质炎\" :disease{}), (\"良性高血压性小动脉性肾硬化\" :disease{}), (\"青年人中的成年发病型糖尿病\" :disease{}), (\"红细胞聚集性\" :check{}), (\"二十五味珊瑚丸\" :drug{}), (\"替米沙坦片\" :drug{}), (\"松子仁\" :food{}), (\"神经性呕吐\" :symptom{} :disease{}), (\"中风\" :disease{}), (\"小儿先天性肾盂输尿管连接部梗阻\" :disease{}), (\"小儿肝豆状核变性\" :disease{}), (\"左束支中隔支传导阻滞\" :disease{}), (\"新疆出血热\" :disease{}), (\"肾动脉瘤\" :disease{}), (\"肾积水\" :disease{}), (\"杏仁\" :food{}), (\"白细胞介素4（iL-4）\" :check{}), (\"厄贝沙坦片\" :drug{}), (\"心内科\" :department{}), (\"灵芝羹\" :food{}), (\"头晕目眩\" :symptom{}), (\"单纯性肾囊肿\" :disease{}), (\"吸烟中毒症\" :disease{}), (\"围绝经期综合征\" :disease{}), (\"小儿原发性膀胱输尿管反流\" :disease{}), (\"小儿麻痹症\" :disease{}), (\"甲状旁腺功能亢进性心肌病\" :disease{}), (\"老年人痛风\" :disease{}), (\"老年人颅内压增高\" :disease{}), (\"肥胖性心肌病\" :disease{}), (\"肾胚胎瘤\" :disease{}), (\"胰岛素抵抗与代谢综合征\" :disease{}), (\"脊椎病\" :disease{}), (\"薄肾小球基底膜病\" :disease{}), (\"酒精中毒性神经疾病\" :disease{}), (\"高原性心脏病\" :disease{}), (\"高尿酸血症肾病\" :disease{}), (\"咸鸭蛋\" :food{}), (\"血管紧张素Ⅱ\" :check{}), (\"盐酸贝那普利片\" :drug{}), (\"苯磺酸氨氯地平胶囊\" :drug{}), (\"乏力\" :symptom{}), (\"头晕\" :symptom{}), (\"Ⅳ型肾小管性酸中毒\" :disease{}), (\"小儿乙型肝炎病毒相关肾炎\" :disease{}), (\"小儿肾结核\" :disease{}), (\"急进性肾小球肾炎\" :disease{}), (\"慢性肾盂肾炎\" :disease{}), (\"老年人肥胖症\" :disease{}), (\"肾功能不全\" :disease{}), (\"血管性帕金森综合征\" :disease{}), (\"过敏性紫癜肾炎\" :disease{}), (\"隐匿性肾小球肾炎\" :disease{}), (\"动态血压监测(ABPM)\" :check{}), (\"Ⅰ\" :drug{}), (\"缬沙坦胶囊\" :drug{}), (\"薯蓣皂苷片\" :drug{}), (\"南瓜子仁\" :food{}), (\"鸡肉\" :food{}), (\"芹菜粥\" :food{}), (\"重压感、紧箍感...\" :symptom{}), (\"假性高血压\" :disease{}), (\"厥阴头痛\" :disease{}), (\"口腔疾病\" :disease{}), (\"家族性载脂蛋白B100缺陷症\" :disease{}), (\"小儿狂犬病\" :disease{}), (\"急性肾功能不全\" :disease{}), (\"慢性肾功能衰竭\" :disease{}), (\"更年期综合征\" :disease{}), (\"烟雾病\" :disease{}), (\"糖尿病\" :disease{}), (\"肢端肥大症\" :disease{}), (\"肾虚\" :disease{}), (\"遗传性肥胖\" :symptom{} :disease{})], [(\"中风后遗症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"中风后遗症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"吡唑酮类中毒\")-[:no_eat@0{}]->(\"杏仁\"), (\"吡唑酮类中毒\")-[:no_eat@0{}]->(\"鸡肝\"), (\"吡唑酮类中毒\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吡唑酮类中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"吡唑酮类中毒\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"头风病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"头风病\")-[:has_symptom@0{}]->(\"头晕\"), (\"妊娠合并缺铁性贫血\")-[:need_check@0{}]->(\"心电图\"), (\"妊娠合并缺铁性贫血\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并缺铁性贫血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并缺铁性贫血\")-[:do_eat@0{}]->(\"鸡肉\"), (\"妊娠合并缺铁性贫血\")-[:has_symptom@0{}]->(\"乏力\"), (\"妊娠合并缺铁性贫血\")-[:has_symptom@0{}]->(\"头晕\"), (\"慢性肾小球肾炎\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"慢性肾小球肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"慢性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"肾功能不全\"), (\"糖尿病性视网膜病变\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"糖尿病性视网膜病变\")-[:cure_way@0{}]->(\"手术治疗\"), (\"糖尿病性视网膜病变\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病性视网膜病变\")-[:do_eat@0{}]->(\"鸡肉\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"结节性多动脉炎性巩膜炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"结节性多动脉炎性巩膜炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"结节性多动脉炎性巩膜炎\")-[:has_symptom@0{}]->(\"乏力\"), (\"肾上腺肿瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾上腺肿瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾上腺肿瘤\")-[:has_symptom@0{}]->(\"头晕\"), (\"肾上腺髓质增生\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"肾上腺髓质增生\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾上腺髓质增生\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾上腺髓质增生\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"肾上腺髓质增生\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾上腺髓质增生\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾功能衰竭\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾功能衰竭\")-[:do_eat@0{}]->(\"鸡肝\"), (\"肾动脉血栓形成和栓塞\")-[:need_check@0{}]->(\"心电图\"), (\"肾动脉血栓形成和栓塞\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾动脉血栓形成和栓塞\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:no_eat@0{}]->(\"杏仁\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:no_eat@0{}]->(\"腐竹\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:do_eat@0{}]->(\"鸡肉\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:recommend_eat@0{}]->(\"胡萝卜粥\"), (\"妊娠合并甲状旁腺功能亢进\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并甲状旁腺功能亢进\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:need_check@0{}]->(\"心电图\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:do_eat@0{}]->(\"鸡肉\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"妊娠合并红细胞增多症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并红细胞增多症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并红细胞增多症\")-[:do_eat@0{}]->(\"鸡肉\"), (\"小儿尿路梗阻\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿尿路梗阻\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿尿路梗阻\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"小儿尿路梗阻\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿指甲-髌骨综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿指甲-髌骨综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿指甲-髌骨综合征\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"小儿肾母细胞瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿肾母细胞瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾淀粉样变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾淀粉样变性\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:need_check@0{}]->(\"心电图\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:has_symptom@0{}]->(\"乏力\"), (\"恶性高血压性小动脉性肾硬化\")-[:need_check@0{}]->(\"心电图\"), (\"恶性高血压性小动脉性肾硬化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"未分化结缔组织病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"未分化结缔组织病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"未分化结缔组织病\")-[:accompany_with@0{}]->(\"肾动脉狭窄\"), (\"痰浊眩晕\")-[:need_check@0{}]->(\"心电图\"), (\"痰浊眩晕\")-[:recommend_drug@0{}]->(\"回心康片\"), (\"痰浊眩晕\")-[:recommend_drug@0{}]->(\"复方天麻蜜环糖肽片\"), (\"痰浊眩晕\")-[:recommend_drug@0{}]->(\"脑立清丸\"), (\"痰浊眩晕\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"痰浊眩晕\")-[:common_drug@0{}]->(\"脑立清丸\"), (\"老年人脑出血\")-[:need_check@0{}]->(\"心电图\"), (\"老年人脑出血\")-[:cure_department@0{}]->(\"心内科\"), (\"老年人脑出血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人脑出血\")-[:do_eat@0{}]->(\"芝麻\"), (\"老年人脑出血\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"胼胝体进行性变性\")-[:need_check@0{}]->(\"心电图\"), (\"胼胝体进行性变性\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胼胝体进行性变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"隐匿型肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高原适应不全症\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"高原适应不全症\")-[:do_eat@0{}]->(\"鸡肝\"), (\"吉兰-巴雷综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妇女雄激素源性秃发\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妇女雄激素源性秃发\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾小球肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾小球肾炎\")-[:has_symptom@0{}]->(\"头晕\"), (\"急性肾小球肾炎\")-[:accompany_with@0{}]->(\"咳嗽\"), (\"急性肾小球肾炎\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"狂犬病\")-[:need_check@0{}]->(\"心电图\"), (\"狂犬病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"狂犬病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"老年肺炎\")-[:do_eat@0{}]->(\"芝麻\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肾小球肾炎\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"镇痛剂肾病\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"镇痛剂肾病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"镇痛剂肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"镇痛剂肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"镇痛剂肾病\")-[:do_eat@0{}]->(\"芝麻\"), (\"镇痛剂肾病\")-[:has_symptom@0{}]->(\"头晕\"), (\"囊性肾病\")-[:cure_way@0{}]->(\"手术治疗\"), (\"囊性肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"囊性肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿尿路感染\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"小儿尿路感染\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿尿路感染\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿尿路感染\")-[:accompany_with@0{}]->(\"慢性肾功能衰竭\"), (\"小儿慢性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"库欣综合征\")-[:no_eat@0{}]->(\"杏仁\"), (\"库欣综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"库欣综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性肾炎综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎综合征\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急性肾炎综合征\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"慢性酒中毒\")-[:need_check@0{}]->(\"心电图\"), (\"慢性酒中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性酒中毒\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"新生儿急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"短暂性脑缺血发作\")-[:need_check@0{}]->(\"心电图\"), (\"短暂性脑缺血发作\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"短暂性脑缺血发作\")-[:cure_way@0{}]->(\"药物治疗\"), (\"短暂性脑缺血发作\")-[:do_eat@0{}]->(\"松子仁\"), (\"短暂性脑缺血发作\")-[:do_eat@0{}]->(\"芝麻\"), (\"短暂性脑缺血发作\")-[:do_eat@0{}]->(\"鸡肉\"), (\"神经母细胞瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"神经母细胞瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"羊水过少\")-[:no_eat@0{}]->(\"鸡肝\"), (\"羊水过少\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"羊水过少\")-[:cure_way@0{}]->(\"药物治疗\"), (\"羊水过少\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"羊水过少\")-[:do_eat@0{}]->(\"鸡肉\"), (\"老年人吸入性肺炎\")-[:need_check@0{}]->(\"心电图\"), (\"老年人吸入性肺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人吸入性肺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人急性肾功能衰竭\")-[:no_eat@0{}]->(\"腐竹\"), (\"老年人急性肾功能衰竭\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人急性肾功能衰竭\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾动脉狭窄\")-[:need_check@0{}]->(\"血管紧张素Ⅱ\"), (\"肾动脉狭窄\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾动脉狭窄\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾动脉狭窄\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾癌\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"肾癌\")-[:no_eat@0{}]->(\"腐竹\"), (\"肾癌\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾癌\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾癌\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"肾癌\")-[:do_eat@0{}]->(\"杏仁\"), (\"酒中毒性小脑变性\")-[:no_eat@0{}]->(\"腐竹\"), (\"酒中毒性小脑变性\")-[:no_eat@0{}]->(\"鸡肝\"), (\"酒中毒性小脑变性\")-[:need_check@0{}]->(\"心电图\"), (\"酒中毒性小脑变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒中毒性小脑变性\")-[:do_eat@0{}]->(\"松子仁\"), (\"酒中毒性小脑变性\")-[:do_eat@0{}]->(\"鸡肉\"), (\"间质性肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"项痹\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"项痹\")-[:has_symptom@0{}]->(\"乏力\"), (\"三叉神经痛\")-[:no_eat@0{}]->(\"杏仁\"), (\"三叉神经痛\")-[:no_eat@0{}]->(\"腐竹\"), (\"三叉神经痛\")-[:need_check@0{}]->(\"心电图\"), (\"三叉神经痛\")-[:recommend_drug@0{}]->(\"二十五味珊瑚丸\"), (\"三叉神经痛\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"三叉神经痛\")-[:do_eat@0{}]->(\"芝麻\"), (\"三叉神经痛\")-[:common_drug@0{}]->(\"二十五味珊瑚丸\"), (\"安卡性肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"安卡性肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿膀胱-输尿管反流综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿膀胱-输尿管反流综合征\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急性肾功能衰竭\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾功能衰竭\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急性肾功能衰竭\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"缺血性结肠炎\")-[:no_eat@0{}]->(\"南瓜子仁\"), (\"缺血性结肠炎\")-[:cure_way@0{}]->(\"手术治疗\"), (\"缺血性结肠炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脂肪肝\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脂肪肝\")-[:do_eat@0{}]->(\"松子仁\"), (\"脂肪肝\")-[:do_eat@0{}]->(\"芝麻\"), (\"脂肪肝\")-[:has_symptom@0{}]->(\"乏力\"), (\"脑出血\")-[:cure_way@0{}]->(\"手术治疗\"), (\"脑出血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脑出血\")-[:do_eat@0{}]->(\"芝麻\"), (\"脑出血\")-[:has_symptom@0{}]->(\"血压高\"), (\"酒中毒性痴呆\")-[:no_eat@0{}]->(\"腐竹\"), (\"酒中毒性痴呆\")-[:no_eat@0{}]->(\"鸡肝\"), (\"酒中毒性痴呆\")-[:need_check@0{}]->(\"心电图\"), (\"酒中毒性痴呆\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"酒中毒性痴呆\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒中毒性痴呆\")-[:accompany_with@0{}]->(\"慢性酒中毒\"), (\"咳嗽\")-[:no_eat@0{}]->(\"松子仁\"), (\"咳嗽\")-[:need_check@0{}]->(\"心电图\"), (\"咳嗽\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"咳嗽\")-[:cure_way@0{}]->(\"药物治疗\"), (\"咳嗽\")-[:do_eat@0{}]->(\"芝麻\"), (\"咳嗽\")-[:do_eat@0{}]->(\"鸡肉\"), (\"小儿过敏性紫癜肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿过敏性紫癜肾炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"急性肾小管坏死\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"梗阻性肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"梗阻性肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"梗阻性肾病\")-[:has_symptom@0{}]->(\"乏力\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肝火眩晕\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肝火眩晕\")-[:has_symptom@0{}]->(\"头晕\"), (\"肾囊肿\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"肾囊肿\")-[:no_eat@0{}]->(\"杏仁\"), (\"肾囊肿\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾囊肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾囊肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾囊肿\")-[:do_eat@0{}]->(\"松子仁\"), (\"肾囊肿\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾阴虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾阴虚\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾阴虚\")-[:do_eat@0{}]->(\"鸡肉\"), (\"脊髓灰质炎\")-[:no_eat@0{}]->(\"腐竹\"), (\"脊髓灰质炎\")-[:need_check@0{}]->(\"心电图\"), (\"脊髓灰质炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"脊髓灰质炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊髓灰质炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"脊髓灰质炎\")-[:do_eat@0{}]->(\"鸡肉\"), (\"良性高血压性小动脉性肾硬化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"良性高血压性小动脉性肾硬化\")-[:do_eat@0{}]->(\"鸡肉\"), (\"良性高血压性小动脉性肾硬化\")-[:has_symptom@0{}]->(\"肾功能衰竭\"), (\"青年人中的成年发病型糖尿病\")-[:no_eat@0{}]->(\"腐竹\"), (\"青年人中的成年发病型糖尿病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"青年人中的成年发病型糖尿病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神经性呕吐\")-[:no_eat@0{}]->(\"南瓜子仁\"), (\"神经性呕吐\")-[:cure_way@0{}]->(\"药物治疗\"), (\"中风\")-[:no_eat@0{}]->(\"杏仁\"), (\"中风\")-[:no_eat@0{}]->(\"腐竹\"), (\"中风\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"中风\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿先天性肾盂输尿管连接部梗阻\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肝豆状核变性\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿肝豆状核变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"左束支中隔支传导阻滞\")-[:need_check@0{}]->(\"心电图\"), (\"左束支中隔支传导阻滞\")-[:cure_department@0{}]->(\"心内科\"), (\"左束支中隔支传导阻滞\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"左束支中隔支传导阻滞\")-[:cure_way@0{}]->(\"药物治疗\"), (\"新疆出血热\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"新疆出血热\")-[:cure_way@0{}]->(\"药物治疗\"), (\"新疆出血热\")-[:do_eat@0{}]->(\"松子仁\"), (\"新疆出血热\")-[:do_eat@0{}]->(\"芝麻\"), (\"新疆出血热\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾动脉瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾动脉瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾积水\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾积水\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾积水\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾积水\")-[:has_symptom@0{}]->(\"血压高\"), (\"单纯性肾囊肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吸烟中毒症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吸烟中毒症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"围绝经期综合征\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"围绝经期综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"围绝经期综合征\")-[:do_eat@0{}]->(\"鸡肉\"), (\"小儿原发性膀胱输尿管反流\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿原发性膀胱输尿管反流\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿麻痹症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿麻痹症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲状旁腺功能亢进性心肌病\")-[:no_eat@0{}]->(\"腐竹\"), (\"甲状旁腺功能亢进性心肌病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"甲状旁腺功能亢进性心肌病\")-[:need_check@0{}]->(\"心电图\"), (\"甲状旁腺功能亢进性心肌病\")-[:cure_department@0{}]->(\"心内科\"), (\"甲状旁腺功能亢进性心肌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"甲状旁腺功能亢进性心肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲状旁腺功能亢进性心肌病\")-[:do_eat@0{}]->(\"芝麻\"), (\"甲状旁腺功能亢进性心肌病\")-[:has_symptom@0{}]->(\"乏力\"), (\"甲状旁腺功能亢进性心肌病\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"老年人痛风\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人痛风\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人痛风\")-[:has_symptom@0{}]->(\"乏力\"), (\"老年人颅内压增高\")-[:no_eat@0{}]->(\"腐竹\"), (\"老年人颅内压增高\")-[:cure_way@0{}]->(\"手术治疗\"), (\"老年人颅内压增高\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人颅内压增高\")-[:do_eat@0{}]->(\"芝麻\"), (\"老年人颅内压增高\")-[:do_eat@0{}]->(\"鸡肉\"), (\"老年人颅内压增高\")-[:has_symptom@0{}]->(\"乏力\"), (\"肥胖性心肌病\")-[:need_check@0{}]->(\"心电图\"), (\"肥胖性心肌病\")-[:cure_department@0{}]->(\"心内科\"), (\"肥胖性心肌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肥胖性心肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾胚胎瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾胚胎瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰岛素抵抗与代谢综合征\")-[:need_check@0{}]->(\"动态血压监测(ABPM)\"), (\"胰岛素抵抗与代谢综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰岛素抵抗与代谢综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊椎病\")-[:cure_way@0{}]->(\"手术治疗\"), (\"脊椎病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊椎病\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"脊椎病\")-[:do_eat@0{}]->(\"松子仁\"), (\"薄肾小球基底膜病\")-[:no_eat@0{}]->(\"杏仁\"), (\"薄肾小球基底膜病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"薄肾小球基底膜病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"薄肾小球基底膜病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒精中毒性神经疾病\")-[:no_eat@0{}]->(\"腐竹\"), (\"酒精中毒性神经疾病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"酒精中毒性神经疾病\")-[:need_check@0{}]->(\"心电图\"), (\"酒精中毒性神经疾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"酒精中毒性神经疾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒精中毒性神经疾病\")-[:do_eat@0{}]->(\"芝麻\"), (\"高原性心脏病\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"高原性心脏病\")-[:cure_department@0{}]->(\"心内科\"), (\"高原性心脏病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高原性心脏病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高尿酸血症肾病\")-[:no_eat@0{}]->(\"杏仁\"), (\"高尿酸血症肾病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高尿酸血症肾病\")-[:has_symptom@0{}]->(\"肾功能衰竭\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"肾囊肿\"), (\"Ⅳ型肾小管性酸中毒\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"Ⅳ型肾小管性酸中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"Ⅳ型肾小管性酸中毒\")-[:do_eat@0{}]->(\"鸡肉\"), (\"Ⅳ型肾小管性酸中毒\")-[:do_eat@0{}]->(\"鸡肝\"), (\"Ⅳ型肾小管性酸中毒\")-[:has_symptom@0{}]->(\"乏力\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:need_check@0{}]->(\"心电图\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾结核\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿肾结核\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾结核\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"小儿肾结核\")-[:has_symptom@0{}]->(\"乏力\"), (\"急进性肾小球肾炎\")-[:no_eat@0{}]->(\"腐竹\"), (\"急进性肾小球肾炎\")-[:no_eat@0{}]->(\"鸡肝\"), (\"急进性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急进性肾小球肾炎\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急进性肾小球肾炎\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"慢性肾盂肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾盂肾炎\")-[:do_eat@0{}]->(\"鸡肉\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年人肥胖症\")-[:cure_way@0{}]->(\"手术治疗\"), (\"老年人肥胖症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人肥胖症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人肥胖症\")-[:do_eat@0{}]->(\"松子仁\"), (\"肾功能不全\")-[:no_eat@0{}]->(\"鸡肝\"), (\"肾功能不全\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾功能不全\")-[:do_eat@0{}]->(\"杏仁\"), (\"肾功能不全\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾功能不全\")-[:has_symptom@0{}]->(\"乏力\"), (\"肾功能不全\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"过敏性紫癜肾炎\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"过敏性紫癜肾炎\")-[:no_eat@0{}]->(\"鸡肝\"), (\"过敏性紫癜肾炎\")-[:cure_way@0{}]->(\"手术治疗\"), (\"过敏性紫癜肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"过敏性紫癜肾炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"过敏性紫癜肾炎\")-[:do_eat@0{}]->(\"芝麻\"), (\"隐匿性肾小球肾炎\")-[:no_eat@0{}]->(\"杏仁\"), (\"隐匿性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"隐匿性肾小球肾炎\")-[:do_eat@0{}]->(\"松子仁\"), (\"隐匿性肾小球肾炎\")-[:do_eat@0{}]->(\"芝麻\"), (\"假性高血压\")-[:no_eat@0{}]->(\"腐竹\"), (\"假性高血压\")-[:no_eat@0{}]->(\"鸡肝\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"厄贝沙坦片\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"替米沙坦片\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"盐酸贝那普利片\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"缬沙坦胶囊\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"苯磺酸氨氯地平胶囊\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"马来酸氨氯地平片\"), (\"假性高血压\")-[:cure_department@0{}]->(\"心内科\"), (\"假性高血压\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"假性高血压\")-[:cure_way@0{}]->(\"药物治疗\"), (\"假性高血压\")-[:has_symptom@0{}]->(\"血压高\"), (\"厥阴头痛\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"厥阴头痛\")-[:do_eat@0{}]->(\"芝麻\"), (\"厥阴头痛\")-[:do_eat@0{}]->(\"鸡肉\"), (\"厥阴头痛\")-[:has_symptom@0{}]->(\"头晕\"), (\"口腔疾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"家族性载脂蛋白B100缺陷症\")-[:cure_department@0{}]->(\"心内科\"), (\"家族性载脂蛋白B100缺陷症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿狂犬病\")-[:need_check@0{}]->(\"心电图\"), (\"小儿狂犬病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿狂犬病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿狂犬病\")-[:has_symptom@0{}]->(\"乏力\"), (\"急性肾功能不全\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾功能不全\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"慢性肾功能衰竭\")-[:need_check@0{}]->(\"心电图\"), (\"慢性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"更年期综合征\")-[:need_check@0{}]->(\"心电图\"), (\"更年期综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"更年期综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"更年期综合征\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"烟雾病\")-[:accompany_with@0{}]->(\"肾动脉狭窄\"), (\"糖尿病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:has_symptom@0{}]->(\"乏力\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肾虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾虚\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾虚\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"遗传性肥胖\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"遗传性肥胖\")-[:cure_way@0{}]->(\"药物治疗\")]]']"}
{"prompt": "小肠气痛的易感人群是哪些？", "content": "MATCH (n:disease{name:\"小肠气痛\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特殊人群\"]']"}
{"prompt": "Find player entities aged 29 or older and return their ID and age information.", "content": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Dejounte Murray\", 29]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Jonathon Simmons\", 29]", "[\"Klay Thompson\", 29]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"James Harden\", 29]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "特罗卡是哪个物种的？", "content": "MATCH (n:character{name:'特罗卡'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"吸血鬼\"]']"}
{"prompt": "找出年龄大于45岁的球员和名为'Spurs'的球队之间最多三跳的最短的路径长度。", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "Obtain the name and age attributes of the 'Jason Kidd' player.", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": " 嘿，你能帮我找一下名叫'Tim Duncan'的球员吗？我想知道他喜欢的实体，但是只限于2到3个跳的关系。能把所有信息都告诉我吗？", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]"]}
{"prompt": "Hey, can you help me find a player named 'Tim Duncan'? I want to know the entity he likes, but it's only limited to 2-3 jump relationships. Can you tell me all the information?", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]"]}
{"prompt": "诺比·利奇的性别是什么？", "content": "LOOKUP ON character WHERE character.name=='诺比·利奇' YIELD properties(vertex).gender AS gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": "Hello, please help me find the first entity that 'Tim Duncan' likes.", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "您好，请帮我找一下'Tony Parker'喜欢的东西，距离范围在0到2之间，还要去除重复的结果，最后给我返回这些东西的ID。", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "Find all players with names between 'Grant Hill' and 'Yao Ming' and return their information.", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "四物颗粒能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'四物颗粒'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"小儿月经过多\"]', '[\"月经不调\"]', '[\"经行泄水\"]']"}
{"prompt": "高血压的治愈概率是多少？", "content": "FETCH PROP ON disease \"高血压\" YIELD properties(vertex).cured_prob as prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.0001%(终身性疾病)\"]']"}
{"prompt": "与温迪克·温瑞迪安具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"温迪克·温瑞迪安\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "扎卡赖斯·史密斯的头发颜色是什么？", "content": "MATCH (n:character{name:'扎卡赖斯·史密斯'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"黄色\"]']"}
{"prompt": "找出所有 '喜欢' 'Tony Parker' 的实体，并返回这些实体与 'Tony Parker' 的关系中 '喜欢' 的实体的 ID。", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "May I ask if you could help me find any entities that have a favorite relationship with 'Tim Duncan'? Can you then identify the entities with service relationships among these entities and return their IDs to me?", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "Hello, could you help me find a player node named 'Boris Diaw' and return it?", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "女巫追捕小分队队长的血统是什么？", "content": "LOOKUP ON character WHERE character.name=='女巫追捕小分队队长' YIELD properties(vertex).blood AS blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"麻瓜\"]']"}
{"prompt": "查找从 'Ricky Rubio' 出发，沿着 '喜欢' 的边，距离 1 到 2 步，并返回所有实体的 ID、关系权重和名称。", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "查找评分为666的喜欢关系，返回这些关系的起点和终点实体。", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find all entities served by a player named 'abc' with a maximum distance of 3, and return all attributes of these entities.", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "您好，请帮我找出年龄大于38的实体，这些实体与'Tim Duncan'之间的边和信息。", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "温廷汉姆的出生年份是什么？", "content": "MATCH (n:character{name:'赫尔曼·温廷汉姆'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"约1974年\"]']"}
{"prompt": "找到与名为'Tim Duncan'的球员所喜欢的球员距离为0到3跳的球队，统计为这些球队所效力球员的数量。", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[40]"]}
{"prompt": "您好，请帮我查找一下与名为'Tim Duncan'的球员相关的所有关系的类型和数量。", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "您好，请帮我找出'Tim Duncan'喜欢的所有事物，并提供这些事物之间的关系属性的去重和关系本身，可以吗？", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "返回名为'Tim Duncan'的球员的姓名。", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "三叉神经痛的得病概率是多少？", "content": "MATCH (n:disease{name:\"三叉神经痛\"}) return n.disease.get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.001%\"]']"}
{"prompt": "乳头肌功能不全的易感人群是哪些？", "content": "MATCH (n:disease{name:\"乳头肌功能不全\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特定人群\"]']"}
{"prompt": "脐疝的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"脐疝\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"手术治疗7天支持性治疗3～6个月\"]']"}
{"prompt": "希思科特·巴巴里参与了多少个组织？", "content": "MATCH (n:character{name:'希思科特·巴巴里'})-[e:belong_to]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[1]']"}
{"prompt": "弗雷德·韦斯莱参与了多少个组织？", "content": "MATCH (n:character{name:'弗雷德·韦斯莱'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[11]']"}
{"prompt": "Hello, please help me find out. Starting from 'Tony Parker' and following the bidirectional 'like' relationship, after steps 0 to 2, return the IDs of all non repeating entities.", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "威尔米娜·塔夫特从属于哪个组织？", "content": "MATCH (n:character{name:'威尔米娜·塔夫特'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"英国魔法部\" :group{name: \"英国魔法部\"})]']"}
{"prompt": "得了戊型病毒性肝炎的伴随症状有哪些？", "content": "GO FROM \"戊型病毒性肝炎\" OVER accompany_with YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"肝肾综合征\"]']"}
{"prompt": "马琳·麦金农从属于哪些组织？", "content": "MATCH (n:character{name:'马琳·麦金农'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"凤凰社\" :group{name: \"凤凰社\"})]', '[(\"麦金农家庭\" :group{name: \"麦金农家庭\"})]']"}
{"prompt": "吉德罗·洛哈特的姐姐的母亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'母亲'}]-(n1) WHERE n.character.name=='吉德罗·洛哈特的姐姐' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Could you please help me check the name and age of the player with ID 'Carmelo Anthony'?", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "急性乳腺炎的治疗科室是哪个？", "content": "GO FROM \"急性乳腺炎\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"普外科\"]']"}
{"prompt": "Hello, please help me find the vertex with ID 'Paul Gasol', then find all the teams connected through the 'serve' relationship, and finally return the name of this player and the team he plays for to me.", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "Hello, could you please help me find a path from players over 45 years old to a team named 'Spurs', with a maximum of three jumps, the shortest path, and tell me the length of the path.", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "Can you help me find out the names of teams and related players related to 'LaMarcus Aldridge'?", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "什么病会伴随着高血压？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'高血压'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"Ⅳ型肾小管性酸中毒\"]', '[\"三叉神经痛\"]', '[\"中风后遗症\"]', '[\"假性高血压\"]', '[\"单纯性肾囊肿\"]', '[\"厥阴头痛\"]', '[\"口腔疾病\"]', '[\"吉兰-巴雷综合征\"]', '[\"吡唑酮类中毒\"]', '[\"吸烟中毒症\"]', '[\"咳嗽\"]', '[\"囊性肾病\"]', '[\"围绝经期综合征\"]', '[\"头风病\"]', '[\"妇女雄激素源性秃发\"]', '[\"妊娠合并甲状旁腺功能亢进\"]', '[\"妊娠合并白血病\"]', '[\"妊娠合并红细胞增多症\"]', '[\"妊娠合并缺铁性贫血\"]', '[\"安卡性肾炎\"]', '[\"家族性载脂蛋白B100缺陷症\"]', '[\"小儿乙型肝炎病毒相关肾炎\"]', '[\"小儿先天性肾盂输尿管连接部梗阻\"]', '[\"小儿原发性膀胱输尿管反流\"]', '[\"小儿尿路感染\"]', '[\"小儿尿路梗阻\"]', '[\"小儿慢性肾小球肾炎\"]', '[\"小儿指甲-髌骨综合征\"]', '[\"小儿狂犬病\"]', '[\"小儿肝豆状核变性\"]', '[\"小儿肾母细胞瘤\"]', '[\"小儿肾淀粉样变性\"]', '[\"小儿肾结核\"]', '[\"小儿膀胱-输尿管反流综合征\"]', '[\"小儿过敏性紫癜肾炎\"]', '[\"小儿阻塞性睡眠呼吸暂停\"]', '[\"小儿麻痹症\"]', '[\"左束支中隔支传导阻滞\"]', '[\"库欣综合征\"]', '[\"急性肾功能不全\"]', '[\"急性肾功能衰竭\"]', '[\"急性肾小球肾炎\"]', '[\"急性肾小管坏死\"]', '[\"急性肾炎\"]', '[\"急性肾炎综合征\"]', '[\"急进性肾小球肾炎\"]', '[\"恶性高血压性小动脉性肾硬化\"]', '[\"慢性肾功能衰竭\"]', '[\"慢性肾小球肾炎\"]', '[\"慢性肾盂肾炎\"]', '[\"慢性酒中毒\"]', '[\"新生儿急性肾功能衰竭\"]', '[\"新疆出血热\"]', '[\"更年期综合征\"]', '[\"未分化结缔组织病\"]', '[\"梗阻性肾病\"]', '[\"烟雾病\"]', '[\"焦磷酸钙沉积病\"]', '[\"狂犬病\"]', '[\"甲状旁腺功能亢进性心肌病\"]', '[\"痰浊眩晕\"]', '[\"短暂性脑缺血发作\"]', '[\"神经母细胞瘤\"]', '[\"糖尿病\"]', '[\"糖尿病性视网膜病变\"]', '[\"红斑性肢痛症\"]', '[\"结节性多动脉炎性巩膜炎\"]', '[\"缺血性结肠炎\"]', '[\"羊水过少\"]', '[\"老年人吸入性肺炎\"]', '[\"老年人急性肾功能衰竭\"]', '[\"老年人痛风\"]', '[\"老年人肥胖症\"]', '[\"老年人脑出血\"]', '[\"老年人非霍奇金恶性淋巴肿瘤\"]', '[\"老年人颅内压增高\"]', '[\"老年肺炎\"]', '[\"肝火眩晕\"]', '[\"肢端肥大症\"]', '[\"肥胖性心肌病\"]', '[\"肾上腺肿瘤\"]', '[\"肾上腺髓质增生\"]', '[\"肾功能不全\"]', '[\"肾功能衰竭\"]', '[\"肾动脉狭窄\"]', '[\"肾动脉瘤\"]', '[\"肾动脉血栓形成和栓塞\"]', '[\"肾囊肿\"]', '[\"肾小球肾炎\"]', '[\"肾癌\"]', '[\"肾积水\"]', '[\"肾胚胎瘤\"]', '[\"肾虚\"]', '[\"肾阴虚\"]', '[\"胰岛素抵抗与代谢综合征\"]', '[\"胼胝体进行性变性\"]', '[\"脂肪肝\"]', '[\"脊椎病\"]', '[\"脊髓灰质炎\"]', '[\"脑出血\"]', '[\"良性高血压性小动脉性肾硬化\"]', '[\"蓝鼓膜与胆固醇肉芽肿\"]', '[\"薄肾小球基底膜病\"]', '[\"血管性帕金森综合征\"]', '[\"过敏性紫癜肾炎\"]', '[\"遗传性肥胖\"]', '[\"酒中毒性小脑变性\"]', '[\"酒中毒性痴呆\"]', '[\"酒精中毒性神经疾病\"]', '[\"镇痛剂肾病\"]', '[\"间质性肾炎\"]', '[\"隐匿型肾炎\"]', '[\"隐匿性肾小球肾炎\"]', '[\"青年人中的成年发病型糖尿病\"]', '[\"项痹\"]', '[\"高原性心脏病\"]', '[\"高原适应不全症\"]', '[\"高尿酸血症肾病\"]']"}
{"prompt": "找出 和'LaMarcus Aldridge' 相关的球队名称和有关联的球员的名称。", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "幼年型慢性关节炎及其伴发的葡萄膜炎的治愈概率是多少？", "content": "MATCH (n:disease{name:\"幼年型慢性关节炎及其伴发的葡萄膜炎\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"70%\"]']"}
{"prompt": "Can you help me find the names of the top two players and sort them by name?", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "小儿糖原贮积病Ⅳ型的治疗方法是什么？", "content": "MATCH (n:disease{name:\"小儿糖原贮积病Ⅳ型\"})-[:cure_way]->(n1) return n1", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[(\"手术治疗\" :cure{name: \"手术治疗\"})]', '[(\"支持性治疗\" :cure{name: \"支持性治疗\"})]', '[(\"药物治疗\" :cure{name: \"药物治疗\"})]']"}
{"prompt": "Identify all entities that 'Tim Duncan' likes' and return the de duplication attributes and relationships themselves of these relationships.", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "Can you help me find all entities that have a valid or favorite relationship with 'Tim Duncan'? And return the ID of these entities after deduplication.", "content": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]", "[\"Tim Parker\"]", "[\"Manu Ginobili\"]", "[\"Spurs\"]"]}
{"prompt": "Hey, can you help me find all the things that this player 'Carmelo Anthony' likes? Also, can you tell me his name and age? “", "content": "MATCH (v:player)-[e:like]->(t) WHERE v.player.name=='Carmelo Anthony'  RETURN v.player.name, v.player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]", "[\"Carmelo Anthony\", 34]"]}
{"prompt": "Hey, can you help me find something 'Tracy McGrady' likes? The level of liking is 90. Then return these things and their relationships to me.", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "Find players aged 40 and return their names and age plus 1.", "content": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 41]", "[\"Kobe Bryant\", 41]"]}
{"prompt": "能帮我返回托比亚·斯内普到帕金 (找球手)的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"托比亚·斯内普\" TO \"帕金 (找球手)\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "插入一条 '喜欢' 边，从 'Tim Duncan' 指向 'Tim Parker'，喜欢程度为 99；插入一条 '喜欢' 边，从 'Tim Parker' 指向 'Tony Parker'，喜欢程度为 90。", "content": "INSERT EDGE like(likeness) VALUES \"Tim Duncan\"->\"Tim Parker\":(99);\nINSERT EDGE like(likeness) VALUES \"Tim Parker\"->\"Tony Parker\":(90);", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "请问您能帮我查询一下ID为'Carmelo Anthony'的球员的姓名和年龄吗？", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "Hello, could you please help me? I would like to find the shortest path starting from 'Tim Duncan' through 'likes' and' services', with a maximum of 5 steps, and then sort it by path length to return to the top 10 paths.", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "Can you help me find 40 year old players and tell me their names?", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "塔奎因·麦克塔维什的邻居是什么物种？", "content": "MATCH (n:character{name:'塔奎因·麦克塔维什的邻居'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "Find all entities with a preference of 90 and a distance of 2 to 3 that are favored by a player named 'Tim Duncan', and return these entities and their relationships.", "content": "MATCH (:player{name:\"Tim Duncan\"})-[e:like*2..3{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Can you help me find the deduplicated IDs of all entities that have a 'like' relationship with 'Tim Duncan'?", "content": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Manu Ginobili\"]", "[\"Tim Parker\"]", "[\"Tony Parker\"]"]}
{"prompt": "查找年龄大于30.5的球员，并返回这些球员的ID和年龄信息。", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "查找球员名字在'Grant Hill'和'Yao Ming'之间的所有球员，并返回这些球员的信息。", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "Find the number of preferred physical paths for the player with ID 'Tim Duncan' and return.", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "Returns the name of a player who has a direct or indirect service relationship with a player named 'Rudy Gay'.", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "西弗勒斯·斯内普的头发颜色是什么？", "content": "MATCH (n:character{name:'西弗勒斯·斯内普'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"黑色\"]']"}
{"prompt": "遗传性凝血因子ⅩⅢ缺乏的治疗科室是哪些？", "content": "GO FROM \"遗传性凝血因子ⅩⅢ缺乏\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"血液科\"]']"}
{"prompt": "Please help me find the team where 'Boris Diaw' is located, and then find out the time period and team information that includes' Haw 'in all team names. Finally, tell me the player's name, start year, end year, and team name.", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "得了慢性淋巴细胞性白血病推荐吃什么药？", "content": "GO FROM \"慢性淋巴细胞性白血病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"复方环磷酰胺片\"]', '[\"注射用硫酸长春新碱\"]', '[\"消癌平片\"]', '[\"环磷酰胺片\"]', '[\"苯丁酸氮芥片\"]']"}
{"prompt": "亨利七世的孙女是谁？", "content": "MATCH (n:character{name:'亨利七世'})-[e:kindred{rel_type:'孙女'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "您好，请帮我找出所有与其他球员喜欢程度为-1的球员之间的关系。", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "Hello, please help me find a player named 'Jordan' and provide their node information.", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "寻找ID为'Tim Duncan'的球员所喜欢的球员，统计路径数量并返回。", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "得了白血病应该去哪个科室就诊？", "content": "GO FROM \"白血病\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"血液科\"]']"}
{"prompt": "莫恩是哪个家族的成员？", "content": "MATCH (n:character{name:'莫恩'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"莫恩家族\" :group{name: \"莫恩家族\"})]']"}
{"prompt": "获取 'Jason Kidd' 球员的姓名和年龄属性。", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "眼氨肽滴眼液能治什么病？", "content": "MATCH (n:disease)-[]->(n1:drug{name:'眼氨肽滴眼液'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"变性近视的脉络膜萎缩\"]', '[\"屈光不正\"]', '[\"屈光参差\"]', '[\"老视\"]', '[\"近视\"]', '[\"近视眼\"]', '[\"远视眼\"]', '[\"酒精性弱视\"]', '[\"化脓性角膜炎\"]', '[\"变性近视的脉络膜萎缩\"]', '[\"后部多形性角膜营养不良\"]', '[\"屈光不正\"]', '[\"屈光参差\"]', '[\"带状疱疹性角膜炎\"]', '[\"微小核糖核酸病毒性角膜炎\"]', '[\"急性泪腺炎\"]', '[\"棘阿米巴性角膜炎\"]', '[\"水痘性角膜炎\"]', '[\"细菌性角膜炎\"]', '[\"老视\"]', '[\"聚星障\"]', '[\"虹膜角膜内皮综合征\"]', '[\"角膜炎\"]', '[\"近视\"]', '[\"近视眼\"]', '[\"远视眼\"]', '[\"酒精性弱视\"]', '[\"铜绿假单胞菌性角膜炎\"]', '[\"雪盲\"]']"}
{"prompt": "Could you please help me count how many paths can connect player v1 to 'Tim Duncan', and can these paths also represent player v1's love for 'Tim Duncan' and their effective relationship?", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "Hello, please help me find all entities with a distance of 3, starting from 'Tim Duncan' and through the relationship between 'likes' and' services'. These entities should have labels and be over 40 years old. Could you please return these entities to me.", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "返回所有在2001年加入球队的球员名称和他们所在的球队名称。", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "Could you please help me find all entities served by a player named 'abc' with a maximum distance of 3 and return all their attributes?", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "请问您能帮我查找一下评分为666的喜欢关系吗？我需要获取这些关系的起点和终点实体。", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Find favorite relationships with a rating of 666 and return the starting and ending entities of these relationships.", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Returns the edges between all players with a liking level of -1 and other players.", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "鲁道夫·布兰德是什么物种？", "content": "MATCH (n:character{name:'鲁道夫·布兰德'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "哈维·瑞吉比特从属于哪个组织？", "content": "MATCH (n:character{name:'哈维·瑞吉比特'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"罗马尼亚火龙保护区\" :group{name: \"罗马尼亚火龙保护区\"})]']"}
{"prompt": "Hello, please help me find something that 'Tony Parker' likes, with a distance range of 0 to 2, and remove duplicate results. Finally, return me the IDs of these things.", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "Can you help me find the player name between 'Grant Hill' and 'Yao Ming'? I need to return information about these players.", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "请问您能帮我查找一下名为 'Ray Allen' 的球员的姓名吗？", "content": "$v1 = YIELD \"Ray Allen\" AS a;\nFETCH PROP ON player $v1.a YIELD player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Ray Allen\"]"]}
{"prompt": "莫迪丝蒂·拉布诺的姐姐是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'姐姐'}]-(n1) WHERE n.character.name=='莫迪丝蒂·拉布诺' return n1.character.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "找出与 'Paul Gasol' 有喜欢、服务、队友关系的所有实体，并返回这些关系的目标实体的 ID。", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "蒂尔登·图茨的妻子是什么血统？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='蒂尔登·图茨' return n1.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"\"]']"}
{"prompt": "什么病会伴随着糖尿病？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'糖尿病'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"三高症\"]', '[\"人免疫缺陷病毒感染性肾损害\"]', '[\"代谢综合征\"]', '[\"低血糖综合征\"]', '[\"假性甲状旁腺功能减退症\"]', '[\"假性黑棘皮病\"]', '[\"内分泌失调\"]', '[\"分水岭区脑梗死\"]', '[\"卓－艾氏综合征\"]', '[\"单纯性肥胖\"]', '[\"口糜\"]', '[\"吐失\"]', '[\"失眠抑郁\"]', '[\"妊娠合并白血病\"]', '[\"婴儿腹部远心性脂肪营养不良\"]', '[\"寒痹\"]', '[\"小儿共济失调毛细血管扩张综合征\"]', '[\"小儿常染色体隐性小脑性共济失调\"]', '[\"小儿弹性假黄瘤\"]', '[\"小儿肥胖\"]', '[\"小儿骨肉瘤\"]', '[\"巨人症与肢端肥大症\"]', '[\"急性女阴溃疡\"]', '[\"急性胆源性胰腺炎\"]', '[\"急性膀胱炎\"]', '[\"慢性肾盂肾炎\"]', '[\"慢性黏膜皮肤念珠菌病\"]', '[\"抗-HCVAg阳性\"]', '[\"无症状性脑梗死\"]', '[\"焦磷酸钙沉积病\"]', '[\"燥邪犯肺\"]', '[\"牙科病\"]', '[\"牙龈炎\"]', '[\"珠蛋白生成障碍性贫血\"]', '[\"生殖器念珠菌病\"]', '[\"甲亢合并妊娠\"]', '[\"甲状腺结节钙化\"]', '[\"白癜风\"]', '[\"皮肤白斑\"]', '[\"皮肤穿入性毛囊和毛囊周角化病\"]', '[\"红斑性肢痛症\"]', '[\"绝经期关节炎\"]', '[\"绝经期尿路感染\"]', '[\"老年人急性胰腺炎\"]', '[\"老年人甲状腺功能亢进症\"]', '[\"老年性哮喘\"]', '[\"老年肺炎\"]', '[\"联合免疫缺陷病\"]', '[\"肌强直性肌病\"]', '[\"肠道菌群失调症\"]', '[\"肢端肥大症\"]', '[\"肾虚\"]', '[\"胰痈\"]', '[\"胰石病\"]', '[\"胰石症\"]', '[\"胰腺囊性纤维性变\"]', '[\"胰腺癌\"]', '[\"胰腺脓肿\"]', '[\"自身免疫性胰腺炎\"]', '[\"艾滋病\"]', '[\"蛔虫性急性胰腺炎\"]', '[\"血管性帕金森综合征\"]', '[\"血色病\"]', '[\"视神经乳头水肿及视盘水肿\"]', '[\"迟发性皮肤卟啉病\"]', '[\"骨肉瘤\"]', '[\"高尿酸血症肾病\"]', '[\"高泌乳素血症\"]', '[\"高甘油三酯血症\"]', '[\"高脂蛋白血症Ⅳ型\"]']"}
{"prompt": "得了无脉络膜症应该去哪个科室就诊？", "content": "GO FROM \"无脉络膜症\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"眼科\"]']"}
{"prompt": "Returns the names and node information of all players.", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "Find all the entities that the player named 'Tony Parker' likes and return them.", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "芙蓉·德拉库尔的丈夫是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='芙蓉·德拉库尔' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"比尔·韦斯莱\" :character{marital: \"已婚\", name: \"比尔·韦斯莱\", dead: \"\", born: \"1970年11月29日英格兰，英国\", blood: \"纯血统\", species: \"带点狼人特性的人类\", height: \"\", hair: \"红色\", eye: \"蓝色\", gender: \"男\"})]']"}
{"prompt": "Identify all entities that have a two jump 'like' relationship with player 'Grant Hill' and return these paths.", "content": "MATCH p = ()-[:like*2]->(v:player) WHERE id(v) == 'Grant Hill' RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})<-[:like@0{likeness: 90}]-(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})<-[:like@0{likeness: 90}]-(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})-[:like@0{likeness: 90}]->(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})-[:like@0{likeness: 90}]->(\"Grant Hill\" :player{name: \"Grant Hill\", age: 46})]"]}
{"prompt": "您好，请帮我找出与 'Paul Gasol' 有喜欢、服务、队友关系的所有实体，并告诉我这些关系的目标实体的 ID。", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "多少种病能够通过手术治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'手术治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[2781]']"}
{"prompt": "Hello, please help me find players aged 29 or older and provide me with their ID and age information.", "content": "LOOKUP ON player WHERE player.age >= 29 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Kevin Durant\", 30]", "[\"Tracy McGrady\", 39]", "[\"Russell Westbrook\", 30]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Dejounte Murray\", 29]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Blake Griffin\", 30]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"DeAndre Jordan\", 30]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Jonathon Simmons\", 29]", "[\"Klay Thompson\", 29]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"James Harden\", 29]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "Identify the entities and relationships that players over the age of 20 like or indirectly like.", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "Hello, please help me search for all entities and relationship subgraphs with a 'liking' level between 95 and 100 within two steps, starting from 'Tim Duncan'. Thank you.", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "胰腺囊腺瘤和囊腺癌的治愈概率是多少？", "content": "MATCH (n:disease{name:\"胰腺囊腺瘤和囊腺癌\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"60%\"]']"}
{"prompt": "查找名为'Tim Duncan'的球员，返回其年龄和ID，并将ID展开，最后返回ID。", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "希思科特·巴巴里是什么物种？", "content": "MATCH (n:character{name:'希思科特·巴巴里'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "返回所有和其他球员喜欢程度为-1的球员之间的关系。", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "母儿ABO血型不合的预防措施是什么？", "content": "MATCH (n:disease{name:\"母儿ABO血型不合\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"母儿ABO血型不合日常预防 溶血病的发病，需要母体先后两次接触抗原，才能产生足够量的抗体使胎儿受累发病，首先了解孕妇是怎样致敏的，当母亲是Rh阴性时，胎儿的Rh阳性红细胞主要是在分娩过程中，由于胎盘的损伤孕期胎儿红细胞通过胎盘渗漏进入母体，不过机会少，数量小，进入母体的Rh阳性红细胞逐渐聚集在脾脏中，被该处的吞噬细胞所吞噬，但需要相当长时间才能释放足够的Rh抗原，刺激免疫活性细胞产生抗体，开始产生的抗体是IgM，不能通过胎盘，但不久即产生IgG抗体，可以通过胎盘至胎儿，第一次产生抗体的速度慢，数量少，且经过一段时间后即停止增长，但在产生抗体的同时出现免疫记忆细胞，且永久存在，整个过程至少需要8～9周或6个月，此时该妇女已致敏。 一旦致敏，就不能再恢复到未致敏状态，至该妇女第2次再怀孕Rh阳性胎儿时，抗原再次进入母体后则引起强烈反应，此时产生抗体速度快，数量多，这种情况多发生在第2次怀孕分娩过程中，即母亲需二次接触抗原才会使新生儿发生溶血病，因此，预防Rh阴性妇女发生致敏，必须在第1次分娩Rh阳性新生儿后立即进行，故在第1次接触Rh阳性时即应注射抗D球蛋白，于第1次分娩Rh阳性新生儿后72h内肌内注射抗Rh(D)IgG 300μg，输血时抗Rh(D)IgG剂量可按20μg/ml血计算，产前预防剂量一般主张300μg，若为流产，孕龄不满12周注射50μg，>12周注100μg，28周200μg，然后按照每毫升胎儿血液完全被中和需注射抗D抗体10～25μg计算，以求合适的剂量，对未致敏的Rh阴性妇女，在孕28周时可加注Rhogam300μg，分娩Rh阳性新生儿后72h再加注300μg，对有ABO溶血病史的孕妇，用活血化瘀中药可取得一些预防效果。\"]']"}
{"prompt": "Could you please help me find a maximum of three reverse 'like' relationship paths from 'Tim Duncan' to 'Tony Parker'?", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "找出名为'Damian Lillard'的球员所喜欢的所有实体中，与这些实体有关系的实体的年龄，并按年龄升序排序，返回前三个实体及其年龄。", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "Hey, can you help me find all the things' Kyrie Irving 'likes? I would like to know the entities he likes, as well as possible association relationships. It would be best if you could return all relevant information to me.", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:like*2..3]->()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]"]}
{"prompt": "罗伊斯顿·埃德温德的性别是什么？", "content": "MATCH (n:character{name:'罗伊斯顿·埃德温德'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"男\"]']"}
{"prompt": "Can you help me find the relationship between players and their teammates?", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "您好，请帮我找一下，从 'Tim Duncan' 开始，经过 '喜欢' 和 '服务' 的关系，找出距离为 3 的所有实体。这些实体应该有标签，并且年龄要大于 40。麻烦您返回这些实体给我。", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "得了霍奇金病忌吃什么食物？", "content": "GO FROM \"霍奇金病\" OVER no_eat YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"啤酒\"]', '[\"干腌菜\"]', '[\"蜂蜜\"]', '[\"螺丝菜\"]']"}
{"prompt": "霍奇金病的原因是什么？", "content": "MATCH (n:disease{name:\"霍奇金病\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"霍奇金淋巴瘤至今病因不明，EB病毒的病因研究最受关注，约50%患者的RS细胞中可检出EB病毒基因组片段。已知具有免疫缺陷和自身免疫性疾病患者霍奇金淋巴瘤的发病危险增加。单合子孪生子霍奇金淋巴瘤患者其同胞的发病危险增加99倍，可能是由于对病因存在相同的遗传易感性和(或)相同的免疫异常。\"]']"}
{"prompt": "神经棘红细胞增多症的易感人群是哪些？", "content": "MATCH (n:disease{name:\"神经棘红细胞增多症\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特殊人群\"]']"}
{"prompt": "返回所有和其他球员的喜欢程度为-1的球员之间的边。", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "得了戊型病毒性肝炎的禁忌食物有哪些？", "content": "GO FROM \"戊型病毒性肝炎\" OVER no_eat YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"啤酒\"]', '[\"白酒\"]', '[\"绿豆\"]', '[\"鸭掌\"]']"}
{"prompt": "您好，请帮我查找一下从'Tim Duncan'这个人开始，往外扩展1到4步，找到每个边之间的'喜欢程度'和边的信息。", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "岩骨斜坡脑膜瘤的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"岩骨斜坡脑膜瘤\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"2-4月\"]']"}
{"prompt": "请问您能帮我查找一下球员之间的队友关系吗？我需要得到他们的姓名。", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "Return the relationship type and team name of player 'LeBron James''s team' Cavaliers'.", "content": "MATCH (v1:player{name: \"LeBron James\"}) -[r:serve]-> (v2:team{name: \"Cavaliers\"})\nRETURN type(r) AS Type, v2.team.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"serve\", \"Cavaliers\"]", "[\"serve\", \"Cavaliers\"]"]}
{"prompt": "赤丝虬脉的治愈概率是多少？", "content": "MATCH (n:disease{name:\"赤丝虬脉\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"65%\"]']"}
{"prompt": "默西·刘易斯是什么物种？", "content": "MATCH (n:character{name:'默西·刘易斯'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "获取 'Spurs' 球队的名称。", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Hey, can you help me identify entities with a liking level of over 90 that have a liking relationship with 'Tim Duncan'? Returns the source entity name, target entity ID, target entity name, and liking level.", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "得了外阴银屑病推荐吃什么药？", "content": "GO FROM \"外阴银屑病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"丙酸氯倍他索乳膏\"]', '[\"他卡西醇软膏\"]', '[\"冰黄肤乐软膏\"]', '[\"卡泊三醇软膏\"]', '[\"哈西奈德乳膏\"]', '[\"哈西奈德溶液\"]', '[\"复方倍氯米松樟脑乳膏\"]', '[\"复方地蒽酚软膏\"]', '[\"复方氟米松软膏\"]', '[\"擦癣药水\"]', '[\"曲安奈德新霉素贴膏\"]', '[\"氟轻松维B6乳膏\"]', '[\"环孢素软胶囊\"]', '[\"维A酸乳膏\"]', '[\"软皂\"]', '[\"醋酸氟轻松乳膏\"]', '[\"银屑灵\"]', '[\"银屑颗粒\"]']"}
{"prompt": "您好，请帮我找一下年龄为40的球员，然后告诉我他们的姓名好吗？", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Hello, please help me find all the entities related to 'Paul Gasol' that have likes, services, and teammate relationships, and return their IDs.", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "找出所有 'Boris Diaw' 所 '喜欢' 的实体，并返回这些实体的 ID。", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "Returns the relationships between all players with a liking level of -1 and other players.", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "Starting from 'Tim Duncan', through the 'like' and 'service' relationships, identify all entities with a distance of 3, and these entities have labels and are over 40 years old. Return these entities.", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Find the team or player served by a player named 'Yao Ming' and return the original entity name.", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "查找年龄为40岁的球员，并返回他们的姓名。", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Find all players who are liked by other players and return their names.", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "Find a player named 'Tim Duncan', return their age and ID, expand the ID, and finally return the ID.", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "找出球员 'Rajon Rondo' 在2013年至2018年期间所服役的球队，返回球员的姓名、效力开始的年份和结束的年份、球队名称。", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "Could you please help me find out all the entities and relationships involved in playing or liking a player named 'Tracy McGrady' since 2000?", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "请问您能帮我查找一下球员之间的队友关系吗？我需要知道球员1和球员2的姓名。", "content": "MATCH (p1)-[:teammate]->(p2)\nRETURN p1.player.name, p2.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", \"Kyle Anderson\"]", "[\"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tony Parker\", \"Manu Ginobili\"]", "[\"Tony Parker\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tim Duncan\"]", "[\"Manu Ginobili\", \"Tony Parker\"]", "[\"Tim Duncan\", \"Danny Green\"]", "[\"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "急性乳腺炎的症状有哪些？", "content": "MATCH (n:disease{name:\"急性乳腺炎\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "得了戊型病毒性肝炎应该去哪个科室就诊？", "content": "GO FROM \"戊型病毒性肝炎\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"肝病\"]']"}
{"prompt": "霍奇金病的注意事项有哪些？", "content": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"霍奇金病日常预防 血液系统恶性疾病包括恶性淋巴瘤预防的主要措施应注意避免引起本病的发病因素。 1)预防病毒感染，如EB病毒、成人T淋巴细胞白血病病毒、艾滋病毒等，在春秋季节防治感冒，加强自身防护，克服不良生活习惯。 2)去除环境因素，如避免接触各种射线及一些放射性物质。避免接触有关的毒性物质，如苯类、氯乙烯、橡胶、砷、汽油、有机溶剂涂料等。 3)防治自身免疫缺陷疾病，如各种器官移植后免疫功能低下状态、自身免疫缺陷疾病、各种癌症化疗后等。因移植物抗宿主病或免疫抑制剂均能激活病毒并促其诱导淋巴组织的增生作用。 4)长期生存患者每年应定期进行胸部和乳腺的检查，及早发现治疗相关并发症和第二肿瘤的可能。 5)保持乐观、自信的健康心态，适当体育锻炼，有助于机体免疫功能的稳定，及时清除外来因素的侵袭。 6)对危险人群或发现危险因素者，做到早期诊断、早期综合治疗。对本病的治疗应是全面的，除针对病因的治疗外，还包括营养的补充，必要时作中心静脉插管与胃肠外全营养，根据需要补充血液制品。 合并症防治的成败往往对疾病的预后有重大的影响，特别是免疫抑制阶段机会感染的防治。尤其要注意结核、真菌感染、肝炎与巨细胞病毒感染等。\"]']"}
{"prompt": "腹腔干动脉瘤的注意事项有哪些？", "content": "MATCH (n:disease{name:\"腹腔干动脉瘤\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"本病暂无有效预防措施，早发现早诊断是本病防治的关键。\"]']"}
{"prompt": "Hello, could you please help me find the relationship properties between 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady'? Can you help me return these properties?", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "气虚血瘀证的治疗时长是多久？", "content": "MATCH (n:disease{name:\"气虚血瘀证\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"3-6个月\"]']"}
{"prompt": "肾上腺素能依赖性尖端扭转性室性心动过速的治愈概率是多少？", "content": "MATCH (n:disease{name:\"肾上腺素能依赖性尖端扭转性室性心动过速\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"60%\"]']"}
{"prompt": "马尔科姆是哪个组织的成员？", "content": "MATCH (n:character{name:'马尔科姆'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"达力·德思礼一伙人\" :group{name: \"达力·德思礼一伙人\"})]']"}
{"prompt": "卡桑德拉·瓦布拉斯基参与了多少个组织？", "content": "MATCH (n:character{name:'卡桑德拉·瓦布拉斯基'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[0]']"}
{"prompt": "Find a maximum of three reverse 'like' relationship paths from 'Tim Duncan' to 'Tony Parker' and return path information.", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "请问您能帮我找出'Boris Diaw'喜欢的所有实体，并给我它们的ID吗？", "content": "GO FROM \"Boris Diaw\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]"]}
{"prompt": "卢克丽霞的侄女是谁？", "content": "MATCH (n:character{name:'卢克丽霞·布莱克'})-[e:kindred{rel_type:'侄女'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Hey, can you help me find everyone who likes' Tony Parker 'and' Tim Duncan '? Then tell me about the relationship between these people and other entities, but do not include the relationship between 'Tony Parker' and 'Tim Duncan'.", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": " 请问您能帮我查找一下'Carter'喜欢的球员所在的球队吗？我想统计一下这些球队一共有多少名球员。", "content": "MATCH (:player{name: \"Vince Carter\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[63]"]}
{"prompt": "维奥莱塔·伯斯德从属于哪些组织？", "content": "MATCH (n:character{name:'维奥莱塔·伯斯德'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"伯斯德家族\" :group{name: \"伯斯德家族\"})]', '[(\"布莱克家族\" :group{name: \"布莱克家族\"})]']"}
{"prompt": "多洛雷斯·乌姆里奇的父亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='多洛雷斯·乌姆里奇' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Can you help me find the names of the players who joined the team in 2001 and the names of the teams they belong to?", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "请问您能帮我查找一下名为'Antetokounmpo'的球员的姓名吗？", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "卡桑德拉·瓦布拉斯基是什么物种？", "content": "MATCH (n:character{name:'卡桑德拉·瓦布拉斯基'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "查询并返回所有球员的姓名和节点。", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "嘿，你能帮我找出喜欢程度超过90的与'Tim Duncan'有喜欢关系的实体吗？返回源实体名、目标实体ID、目标实体名和喜欢程度。", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "Find all the entities that 'Porzingis' likes' and return their IDs.", "content": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Luka Doncic\"]"]}
{"prompt": "多少种病能够通过物理治疗方式治愈？", "content": "MATCH (n:disease)-n->(n1:cure{name:'物理治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "[]"}
{"prompt": "查找名为'Tim Duncan'的球员，返回其年龄和ID，最后返回展开后的ID。", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "玛姬·德思礼的母亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'母亲'}]-(n1) WHERE n.character.name=='玛姬·德思礼' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Can you help me find someone 'Kristas Porzingis' likes? I need their vid.", "content": "GO FROM \"Tony Parker\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "找出与 'Tim Duncan' 通过 '喜欢' 和 '服务' 关系，距离为 3 的所有实体，且这些实体有标签且年龄大于 40，返回这些实体。", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "酒精中毒性神经疾病的主要原因是什么？", "content": "MATCH (n:disease{name:\"酒精中毒性神经疾病\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"本疾病的发病原因现在已证实由于大量无节制地饮酒，对机体许多器官系统均有很大的损害作用，神经系统是酒精滥用致病的主要靶器官之一。 发病机制 与一般的麻醉剂相似，酒精直接作用于神经细胞膜，这类物质像巴比妥类一样是脂溶性的，通过溶解细胞膜与细胞膜的脂蛋白相互作用而产生效应，酒精是CNS的抑制剂而不是兴奋剂，一些酒精中毒的早期症状提示大脑兴奋，如喋喋不休，攻击性，过分活跃和大脑皮质电兴奋增加等，这是因为正常情况下调节大脑皮质活动的皮质下某些结构(可能上部脑干的网状结构)被抑制的结果，同样早期腱反射活跃可能反映高级抑制中枢对脊髓的运动神经元的短暂性失控，然而，随酒精量的增大，抑制作用扩展至大脑，脑干和脊髓神经细胞。 有关酒精导致神经系统继发性损伤的机制尚未完全阐明，现认为可能与下列因素有关： 1.影响维生素B1代谢 影响和抑制维生素B1的吸收及在肝脏内的储存，导致患者体内维生素B1水平明显低于正常人，一般情况下，神经组织的主要能量来源于糖代谢，在维生素B1缺乏时，由于焦磷酸硫胺素的减少，可造成糖代谢的障碍，引起神经组织的供能减少，进而产生神经组织功能和结构上的异常，此外，维生素B1的缺乏还能够造成磷酸戊糖代谢途径障碍，影响磷脂类的合成，使周围和中枢神经组织出现脱髓鞘和轴索变性样改变。 2.具有脂溶性 可迅速通过血-脑脊液屏障和神经细胞膜，并可作用于膜上的某些酶类和受体而影响细胞的功能。 3.其他 酒精代谢过程中生成的自由基和其他代谢产物也能够造成神经系统的损害。 酒精中毒性神经疾病的主要病理变化：长期慢性酗酒造成神经细胞慢性损害，神经突触减少，神经元脱失。\"]']"}
{"prompt": "请问您能帮我找到'Spurs'球队的名字吗？", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Obtain the player node of 'Boris Diaw' and return the node.", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "Hello, please help me find players over the age of 30.5 and provide me with their ID and age information.", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "Can you help me find the name and age of the 'Carmelo' player?", "content": "FETCH PROP ON player \"Carmelo Anthony\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Carmelo Anthony\", 34]"]}
{"prompt": "获取 'Boris Diaw' 和 'Tony Parker' 两个球员的姓名和年龄信息，去返回去重后的结果。", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "霍奇金病的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"霍奇金病\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.03%--0.05%\"]']"}
{"prompt": "Hi, hello! I would like to ask you to help me find the shortest path length between players over 45 years old and a team named 'Spurs' that only requires up to three jumps, can you?", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "Can you help me find the name and age of player 'Grant Hill'?", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "请问您能帮我查找与 'Tim Duncan' 有有效力或喜欢关系的所有实体吗？并且返回这些实体的去重后的 ID。", "content": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]", "[\"Tim Parker\"]", "[\"Manu Ginobili\"]", "[\"Spurs\"]"]}
{"prompt": "足外翻的得病概率是多少？", "content": "MATCH (n:disease{name:\"足外翻\"}) return n.disease.get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.6%\"]']"}
{"prompt": "Identify the team names and player names associated with 'LaMarcus Aldridge'.", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "小儿莫拉雷脑膜炎的治愈概率是多少？", "content": "MATCH (n:disease{name:\"小儿莫拉雷脑膜炎\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"65%\"]']"}
{"prompt": "您好，请问您能帮我找到喜欢'Tim Duncan'的球员吗？还能帮我统计一下路径数量并返回吗？", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "Find the preferred entities of a player named 'Duncan', including 2 to 3 levels of relationships, return relationships, and entities.", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "您好，请帮我找一下，能不能找到一个路径，这个路径是从年龄大于45岁的球员到名为'Spurs'的球队之间的，而且最多只能有三个跳的，最短的路径，然后告诉我路径的长度。", "content": "MATCH p = shortestPath( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.age > 45 AND b.team.name == 'Spurs'\n  RETURN length(p)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]", "[3]"]}
{"prompt": "Can you help me find the player information with ID 'Boris Diaw'?", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "纵隔非霍奇金淋巴瘤的治疗药物有哪些？", "content": "GO FROM \"纵隔非霍奇金淋巴瘤\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"依托泊苷软胶囊\"]', '[\"复方斑蝥胶囊\"]', '[\"复方环磷酰胺片\"]', '[\"曲安西龙片\"]', '[\"甲氨蝶呤片\"]', '[\"苯丁酸氮芥片\"]', '[\"醋酸地塞米松片\"]', '[\"醋酸泼尼松片\"]']"}
{"prompt": "能帮我返回赫敏到哈利波特的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"赫敏·格兰杰\" TO \"哈利·波特\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"赫敏·格兰杰\" )-[:belong_to@0{}]->(\"哈利·波特\" )]', '[(\"赫敏·格兰杰\" )-[:kindred@0{}]->(\"哈利·波特\" )]']"}
{"prompt": "疰夏的治疗科室是哪些？", "content": "GO FROM \"疰夏\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"中医综合\"]']"}
{"prompt": "您好，请您帮我一下，我想找出从 'Tim Duncan' 开始，通过 '喜欢' 和 '服务' 关系最短的路径，最多5步，然后按路径长度排序，返回前10条路径。", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "Find the players Tony Parker likes who play for the Spurs team, and finally return to all nodes in the path.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "玛丽·卢·巴瑞波恩的养女是谁？", "content": "MATCH (n:character{name:'玛丽·卢·巴瑞波恩'})-[e]-(n1) WHERE e.rel_type=='养女' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"卡斯提蒂·巴瑞波恩\" :character{marital: \"\", name: \"卡斯提蒂·巴瑞波恩\", dead: \"1926年12月7日第二塞勒姆教堂，纽约，美国\", born: \"1901年至1905年12月7日间\", blood: \"麻鸡\", species: \"人类\", height: \"\", hair: \"草莓金\", eye: \"蓝色\", gender: \"女\"})]', '[(\"莫迪丝蒂·巴瑞波恩\" :character{marital: \"\", name: \"莫迪丝蒂·巴瑞波恩\", dead: \"\", born: \"1917年12月至1918年12月间\", blood: \"麻鸡\", species: \"人类\", height: \"\", hair: \"金色\", eye: \"蓝色\", gender: \"女\"})]']"}
{"prompt": "肱骨内髁骨折的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"肱骨内髁骨折\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1-3个月\"]']"}
{"prompt": "西莫·斐尼甘是哪个学院的？", "content": "MATCH (n:character{name:'西莫·斐尼甘'})-[e:learn_from]-(n1:college) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]']"}
{"prompt": "Obtain the team name attribute of the team named 'Spurs'.", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Find relationships between players known as' Tim Duncan 'and other players that they like each other, and return the level of liking for these relationships.", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "找出与 'Tim Duncan' 通过 '喜欢' 关系相连的实体，然后在这些实体中找出通过 '服务' 关系相连的实体，并返回这些实体的 ID。", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "杰基·杰尼根是哪个组织的成员？", "content": "MATCH (n:character{name:'杰基·杰尼根'})-[]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"威尔士魁地奇代表队\" :group{name: \"威尔士魁地奇代表队\"})]']"}
{"prompt": "Hello, could you please help me find players aged 40 and tell me their names?", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "Starting from 'Tim Duncan', identify all entities and relationships with a 'liking' level between 95 and 100 within the two steps.", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "查找名为'Duncan'的球员所喜欢的实体，包括2到3层关系，返回关系和实体。", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Find the player information with ID 'Boris Diaw' and return it.", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "找出 'Tim Duncan' 所 '喜欢' 的年龄大于38的实体，返回这些实体与 'Tim Duncan' 之间的边和实体的信息。", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Find the entities that Tracy McGrady likes, and then find the entity IDs that these entities like.", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "利奥波迪娜是哪个物种的？", "content": "LOOKUP ON character WHERE character.name=='利奥波迪娜·斯梅绥克' YIELD properties(vertex).species AS species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "请问您能帮我找出与 'Tim Duncan'喜欢的所有实体的关系吗？我需要得到这些关系的去重属性和关系本身。", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "赫伯特·博克的妻子是谁？", "content": "MATCH (n:character{name:'赫伯特·博克'})-[e]-(n1) WHERE e.rel_type=='妻子' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"贝尔维娜·布莱克\" :character{marital: \"已婚\", name: \"贝尔维娜·布莱克\", dead: \"1962年(76岁)\", born: \"1886年\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "马尔科姆的血统是什么？", "content": "MATCH (n:character{name:'马尔科姆'}) return n.character.blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"麻瓜\"]']"}
{"prompt": "巴希达·巴沙特是哪个学院的？", "content": "MATCH (n:character{name:'巴希达·巴沙特'})-[e:learn_from]-(n1:college) return n1.character.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "霍奇金病的食物推荐有哪些？", "content": "GO FROM \"霍奇金病\" OVER recommend_eat YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"海带瘦肉粥\"]', '[\"猪肉大葱蒸饺\"]', '[\"紫苏肉片粥\"]', '[\"肉粒萝卜干粥\"]', '[\"花豆腐生菜瘦肉汤\"]', '[\"银耳瘦肉羹\"]', '[\"雪菜肉末粥\"]', '[\"鸡肉白薯粥\"]']"}
{"prompt": "哪些人物是普威特家族的成员？", "content": "MATCH (n:character)-[e]-(n1:group{name:'普威特家族'}) return n", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "劳拉·马德莱的性别是什么？", "content": "MATCH (n:character{name:'劳拉·马德莱'}) return n.character.gender", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"女\"]']"}
{"prompt": " 您好，请帮我找一下Tony Parker喜欢的球员中在Spurs队效力的球员，然后把路径上的所有节点都返回给我。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "Hello, please help me find entities that have a 'like' relationship with 'Danny Green', and then find the 'teammates' of these entities. Finally, can we return the IDs of the source and target nodes of these entities and their relationships?", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "Can you help me find the name and age attributes of the 'Jason Kidd' player?", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "查找所有评分为666的'喜欢'关系，返回这些关系的起始点和终止点。", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "请问您能帮我找出与 'Tim Duncan' 有 '喜欢' 关系的所有实体的去重后的 ID 吗？", "content": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Manu Ginobili\"]", "[\"Tim Parker\"]", "[\"Tony Parker\"]"]}
{"prompt": "Hey, can you help me check if there are any entities that Kyrie Irving's players serve or like for 2-3 hops? Then tell me the statistical results.", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "Hey, can you help me find a player who plays for the 'Pistons' team? I want to know their names.", "content": "MATCH (v)-[:serve]->(t)\nWHERE id(t) == 'Pistons'\nRETURN v.player.name AS Name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Aron Baynes\"]", "[\"Blake Griffin\"]", "[\"Grant Hill\"]"]}
{"prompt": "查找 'Tony Parker' 所喜欢的所有实体，并返回这些实体。", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "吉德罗·洛哈特的姐姐的父亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='吉德罗·洛哈特的姐姐' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": " 嘿，你能帮我找一下名字叫'Tim Duncan'的球员吗？我需要知道他的年龄和ID，最后还要展示一下他的详细信息。", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "Can you help me find the IDs of all the people or things that Tony Parker likes?", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "特拉弗斯从属于哪些组织？", "content": "MATCH (n:character{name:'特拉弗斯'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"英国魔法部\" :group{name: \"英国魔法部\"})]', '[(\"食死徒\" :group{name: \"食死徒\"})]']"}
{"prompt": "请帮我查找一下，'Tracy McGrady'喜欢的东西是什么，然后再找出这些东西所对应的ID。", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "您好，请帮我找一下，从 'Tim Duncan' 出发，经过 '喜欢' 和 '服务' 的关系，找出距离为2的子图，并返回节点和边的详细信息好吗？", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "查找名为 'Tony Parker' 的球员喜欢的所有实体，并返回这些实体。", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "Hey, can you help me find the shortest path from 'Yao Ming' to 'Tony Parker'? This path can be connected through the relationship between 'likes' and' services', but it can only go through a maximum of 5 steps. Then return the path information to me, okay?", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "什么病会伴随着高血压？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'高血压'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"Ⅳ型肾小管性酸中毒\"]', '[\"三叉神经痛\"]', '[\"中风后遗症\"]', '[\"假性高血压\"]', '[\"单纯性肾囊肿\"]', '[\"厥阴头痛\"]', '[\"口腔疾病\"]', '[\"吉兰-巴雷综合征\"]', '[\"吡唑酮类中毒\"]', '[\"吸烟中毒症\"]', '[\"咳嗽\"]', '[\"囊性肾病\"]', '[\"围绝经期综合征\"]', '[\"头风病\"]', '[\"妇女雄激素源性秃发\"]', '[\"妊娠合并甲状旁腺功能亢进\"]', '[\"妊娠合并白血病\"]', '[\"妊娠合并红细胞增多症\"]', '[\"妊娠合并缺铁性贫血\"]', '[\"安卡性肾炎\"]', '[\"家族性载脂蛋白B100缺陷症\"]', '[\"小儿乙型肝炎病毒相关肾炎\"]', '[\"小儿先天性肾盂输尿管连接部梗阻\"]', '[\"小儿原发性膀胱输尿管反流\"]', '[\"小儿尿路感染\"]', '[\"小儿尿路梗阻\"]', '[\"小儿慢性肾小球肾炎\"]', '[\"小儿指甲-髌骨综合征\"]', '[\"小儿狂犬病\"]', '[\"小儿肝豆状核变性\"]', '[\"小儿肾母细胞瘤\"]', '[\"小儿肾淀粉样变性\"]', '[\"小儿肾结核\"]', '[\"小儿膀胱-输尿管反流综合征\"]', '[\"小儿过敏性紫癜肾炎\"]', '[\"小儿阻塞性睡眠呼吸暂停\"]', '[\"小儿麻痹症\"]', '[\"左束支中隔支传导阻滞\"]', '[\"库欣综合征\"]', '[\"急性肾功能不全\"]', '[\"急性肾功能衰竭\"]', '[\"急性肾小球肾炎\"]', '[\"急性肾小管坏死\"]', '[\"急性肾炎\"]', '[\"急性肾炎综合征\"]', '[\"急进性肾小球肾炎\"]', '[\"恶性高血压性小动脉性肾硬化\"]', '[\"慢性肾功能衰竭\"]', '[\"慢性肾小球肾炎\"]', '[\"慢性肾盂肾炎\"]', '[\"慢性酒中毒\"]', '[\"新生儿急性肾功能衰竭\"]', '[\"新疆出血热\"]', '[\"更年期综合征\"]', '[\"未分化结缔组织病\"]', '[\"梗阻性肾病\"]', '[\"烟雾病\"]', '[\"焦磷酸钙沉积病\"]', '[\"狂犬病\"]', '[\"甲状旁腺功能亢进性心肌病\"]', '[\"痰浊眩晕\"]', '[\"短暂性脑缺血发作\"]', '[\"神经母细胞瘤\"]', '[\"糖尿病\"]', '[\"糖尿病性视网膜病变\"]', '[\"红斑性肢痛症\"]', '[\"结节性多动脉炎性巩膜炎\"]', '[\"缺血性结肠炎\"]', '[\"羊水过少\"]', '[\"老年人吸入性肺炎\"]', '[\"老年人急性肾功能衰竭\"]', '[\"老年人痛风\"]', '[\"老年人肥胖症\"]', '[\"老年人脑出血\"]', '[\"老年人非霍奇金恶性淋巴肿瘤\"]', '[\"老年人颅内压增高\"]', '[\"老年肺炎\"]', '[\"肝火眩晕\"]', '[\"肢端肥大症\"]', '[\"肥胖性心肌病\"]', '[\"肾上腺肿瘤\"]', '[\"肾上腺髓质增生\"]', '[\"肾功能不全\"]', '[\"肾功能衰竭\"]', '[\"肾动脉狭窄\"]', '[\"肾动脉瘤\"]', '[\"肾动脉血栓形成和栓塞\"]', '[\"肾囊肿\"]', '[\"肾小球肾炎\"]', '[\"肾癌\"]', '[\"肾积水\"]', '[\"肾胚胎瘤\"]', '[\"肾虚\"]', '[\"肾阴虚\"]', '[\"胰岛素抵抗与代谢综合征\"]', '[\"胼胝体进行性变性\"]', '[\"脂肪肝\"]', '[\"脊椎病\"]', '[\"脊髓灰质炎\"]', '[\"脑出血\"]', '[\"良性高血压性小动脉性肾硬化\"]', '[\"蓝鼓膜与胆固醇肉芽肿\"]', '[\"薄肾小球基底膜病\"]', '[\"血管性帕金森综合征\"]', '[\"过敏性紫癜肾炎\"]', '[\"遗传性肥胖\"]', '[\"酒中毒性小脑变性\"]', '[\"酒中毒性痴呆\"]', '[\"酒精中毒性神经疾病\"]', '[\"镇痛剂肾病\"]', '[\"间质性肾炎\"]', '[\"隐匿型肾炎\"]', '[\"隐匿性肾小球肾炎\"]', '[\"青年人中的成年发病型糖尿病\"]', '[\"项痹\"]', '[\"高原性心脏病\"]', '[\"高原适应不全症\"]', '[\"高尿酸血症肾病\"]']"}
{"prompt": " 嘿，你能帮我找一下喜欢名叫'Tim Duncan'的球员吗？他们喜好程度都是90，而且与'Tim Duncan'的关系要在2到3跳之间。能把这些球员和他们与'Tim Duncan'的关系都告诉我吗？", "content": "MATCH (:player{name:\"Tim Duncan\"})<-[e:like*2..3{likeness: 90}]-(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")], (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]"]}
{"prompt": "Could you please help me find out the teams' Boris Diaw 'has played for and his service time for each team? I need to know his name, start and end years of service, and team name.", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "Obtain the name attribute of the team named 'Spurs'.", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Can you help me find all the players between 'Grant Hill' and 'Yao Ming'? I need their detailed information.", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "得了心脏病推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='心脏病' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"五香蒜苔\"]', '[\"素炒小白菜\"]', '[\"素炒菠菜\"]', '[\"芥菜炒蚕豆\"]', '[\"苦瓜粥\"]', '[\"豌豆绿豆粥\"]', '[\"银耳冬瓜羹\"]', '[\"马兰头菜粥\"]']"}
{"prompt": "Hey, can you help me identify entities with a two-way 'like' relationship with 'Tim Duncan' and a 'like degree' greater than 90? Returns the source entity name, target entity ID, target entity name, and liking level.", "content": "GO FROM 'Tim Duncan' OVER like bidirect WHERE like.likeness > 90\nYIELD $^.player.name, like._dst, $$.player.name, like.likeness", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Dejounte Murray\", \"Dejounte Murray\", 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Manu Ginobili\", 95]", "[\"Tim Duncan\", \"Tim Parker\", __NULL__, 99]", "[\"Tim Duncan\", \"Tony Parker\", \"Tony Parker\", 95]"]}
{"prompt": "霍奇金病的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"霍奇金病\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1-3年\"]']"}
{"prompt": "阿马利洛·莱斯托阿特的头发颜色是什么？", "content": "MATCH (n:character{name:'阿马利洛·莱斯托阿特'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"金黄色\"]']"}
{"prompt": "肾上腺素能依赖性尖端扭转性室性心动过速的症状有哪些？", "content": "MATCH (n:disease{name:\"肾上腺素能依赖性尖端扭转性室性心动过速\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "嘿，我想找出从 'Tim Duncan' 出发，在两步内喜欢程度在95到100之间的所有实体和关系，你能帮我查找一下吗？", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "塞德瑞拉·布莱克的孙子有哪些？", "content": "GO 2 STEPS FROM \"塞德瑞拉·布莱克\" OVER kindred WHERE kindred.rel_type=='儿子' YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"帕勒克斯·布莱克\"]', '[\"马里厄斯·布莱克\"]', '[\"亚瑟·韦斯莱\"]', '[\"路易·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"乔治·韦斯莱\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"雨果·韦斯莱\"]', '[\"天狼星·布莱克二世\"]', '[\"菲尼亚斯·布莱克\"]', '[\"西格纳斯·布莱克二世\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"天狼星·布莱克二世\"]', '[\"菲尼亚斯·布莱克\"]', '[\"西格纳斯·布莱克二世\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"弗雷德·韦斯莱二世\"]']"}
{"prompt": "找出所有被其他球员喜欢过的球员，并返回这些球员的姓名。", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "Starting from 'Ricky Rubio', follow the 'like' edge, distance 1 to 2 steps, and return the IDs, relationship weights, and names of all entities.", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "扎卡赖斯·史密斯的父亲是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'父亲'}]-(n1) WHERE n.character.name=='扎卡赖斯·史密斯' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "请问能帮我找一下前两名球员的名字，并按照姓名进行排序吗？", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "从 'Tim Duncan' 出发，找出距离为 2 步的所有实体，且这些实体与 'Tim Duncan' 之间存在 '喜欢' 的关系，返回这些关系的边信息。", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "找出年龄大于20岁的球员所经过1到2跳喜欢的所有实体及其关系。", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "返回亨利八世周边最多二跳关系的相关信息？", "content": "GET SUBGRAPH 2 STEPS FROM \"亨利八世\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"亨利八世\" :character{})], [(\"亨利八世\")-[:kindred@0{}]->(\"亨利七世\"), (\"亨利八世\")-[:kindred@0{}]->(\"伊丽莎白一世\"), (\"亨利八世\")-[:kindred@0{}]->(\"威廉一世\"), (\"亨利八世\")-[:kindred@0{}]->(\"安妮·博林\"), (\"亨利七世\")-[:kindred@0{}]->(\"亨利八世\"), (\"威廉一世\")-[:kindred@0{}]->(\"亨利八世\"), (\"安妮·博林\")-[:kindred@0{}]->(\"亨利八世\")]]', '[[(\"伊丽莎白一世\" ), (\"威廉一世\" :character{}), (\"亨利七世\" :character{}), (\"安妮·博林\" :character{})], [(\"威廉一世\")-[:kindred@0{}]->(\"亨利七世\"), (\"威廉一世\")-[:kindred@0{}]->(\"亨利六世\"), (\"威廉一世\")-[:kindred@0{}]->(\"伊丽莎白一世\"), (\"威廉一世\")-[:kindred@0{}]->(\"威廉三世\"), (\"威廉一世\")-[:kindred@0{}]->(\"安妮·博林\"), (\"威廉一世\")-[:kindred@0{}]->(\"玛丽二世\"), (\"威廉一世\")-[:kindred@0{}]->(\"理查一世\"), (\"乔治三世\")-[:kindred@0{}]->(\"威廉一世\"), (\"亨利六世\")-[:kindred@0{}]->(\"威廉一世\"), (\"玛丽二世\")-[:kindred@0{}]->(\"威廉一世\"), (\"理查一世\")-[:kindred@0{}]->(\"威廉一世\"), (\"亨利七世\")-[:kindred@0{}]->(\"伊丽莎白一世\"), (\"亨利七世\")-[:kindred@0{}]->(\"威廉一世\"), (\"亨利七世\")-[:kindred@0{}]->(\"威廉三世\"), (\"亨利七世\")-[:kindred@0{}]->(\"安妮·博林\"), (\"亨利七世\")-[:kindred@0{}]->(\"玛丽二世\"), (\"乔治三世\")-[:kindred@0{}]->(\"亨利七世\"), (\"玛丽二世\")-[:kindred@0{}]->(\"亨利七世\"), (\"安妮·博林\")-[:kindred@0{}]->(\"亨利七世\"), (\"安妮·博林\")-[:kindred@0{}]->(\"伊丽莎白一世\"), (\"安妮·博林\")-[:kindred@0{}]->(\"威廉一世\"), (\"安妮·博林\")-[:belong_to@0{}]->(\"霍格沃茨魔法学校\")]]', '[[(\"威廉三世\" ), (\"玛丽二世\" :character{}), (\"霍格沃茨魔法学校\" ), (\"理查一世\" :character{}), (\"乔治三世\" :character{}), (\"亨利六世\" :character{})], [(\"玛丽二世\")-[:kindred@0{}]->(\"威廉三世\")]]']"}
{"prompt": "维奥莱塔·伯斯德的丈夫是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='维奥莱塔·伯斯德' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"西格纳斯·布莱克二世\" :character{marital: \"已婚\", name: \"西格纳斯·布莱克二世\", dead: \"1943年(54岁)\", born: \"1889年\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "得了戊型病毒性肝炎的伴随病症有哪些？", "content": "GO FROM \"戊型病毒性肝炎\" OVER accompany_with YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"肝肾综合征\"]']"}
{"prompt": "Hello, could you please help me find players aged 40 and return their names to me?", "content": "$a = LOOKUP ON player WHERE player.age == 40 YIELD id(vertex) as id;\nFETCH PROP ON player $a.id YIELD player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\"]", "[\"Kobe Bryant\"]"]}
{"prompt": "找出从 'Tim Duncan' 到 'Nobody' 或 'Spur' 的所有路径，路径上的关系为 '喜欢'，最多包含3个节点，并返回这些路径。", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "请问您能帮我查找球员和他们的队友之间的关系吗？", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "Hey, can you help me check the friendly relationship between 'Tim Duncan' and other players? I want to know how much they like each other.", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "Can you help me search for the team name attributes of 'Spurs'?", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "得了高血压应该去哪个科室就诊？", "content": "GO FROM \"高血压\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"心内科\"]']"}
{"prompt": "Find all entities within 3 hops served by a player named 'abc' and return all attribute information of these entities.", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Hello, please help me find all entities related to 'Manu Ginobili' and provide their 'likes',' teammate start year ',' service start year ', and endpoint player names.", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "什么病会伴随着糖尿病？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'糖尿病'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"三高症\"]', '[\"人免疫缺陷病毒感染性肾损害\"]', '[\"代谢综合征\"]', '[\"低血糖综合征\"]', '[\"假性甲状旁腺功能减退症\"]', '[\"假性黑棘皮病\"]', '[\"内分泌失调\"]', '[\"分水岭区脑梗死\"]', '[\"卓－艾氏综合征\"]', '[\"单纯性肥胖\"]', '[\"口糜\"]', '[\"吐失\"]', '[\"失眠抑郁\"]', '[\"妊娠合并白血病\"]', '[\"婴儿腹部远心性脂肪营养不良\"]', '[\"寒痹\"]', '[\"小儿共济失调毛细血管扩张综合征\"]', '[\"小儿常染色体隐性小脑性共济失调\"]', '[\"小儿弹性假黄瘤\"]', '[\"小儿肥胖\"]', '[\"小儿骨肉瘤\"]', '[\"巨人症与肢端肥大症\"]', '[\"急性女阴溃疡\"]', '[\"急性胆源性胰腺炎\"]', '[\"急性膀胱炎\"]', '[\"慢性肾盂肾炎\"]', '[\"慢性黏膜皮肤念珠菌病\"]', '[\"抗-HCVAg阳性\"]', '[\"无症状性脑梗死\"]', '[\"焦磷酸钙沉积病\"]', '[\"燥邪犯肺\"]', '[\"牙科病\"]', '[\"牙龈炎\"]', '[\"珠蛋白生成障碍性贫血\"]', '[\"生殖器念珠菌病\"]', '[\"甲亢合并妊娠\"]', '[\"甲状腺结节钙化\"]', '[\"白癜风\"]', '[\"皮肤白斑\"]', '[\"皮肤穿入性毛囊和毛囊周角化病\"]', '[\"红斑性肢痛症\"]', '[\"绝经期关节炎\"]', '[\"绝经期尿路感染\"]', '[\"老年人急性胰腺炎\"]', '[\"老年人甲状腺功能亢进症\"]', '[\"老年性哮喘\"]', '[\"老年肺炎\"]', '[\"联合免疫缺陷病\"]', '[\"肌强直性肌病\"]', '[\"肠道菌群失调症\"]', '[\"肢端肥大症\"]', '[\"肾虚\"]', '[\"胰痈\"]', '[\"胰石病\"]', '[\"胰石症\"]', '[\"胰腺囊性纤维性变\"]', '[\"胰腺癌\"]', '[\"胰腺脓肿\"]', '[\"自身免疫性胰腺炎\"]', '[\"艾滋病\"]', '[\"蛔虫性急性胰腺炎\"]', '[\"血管性帕金森综合征\"]', '[\"血色病\"]', '[\"视神经乳头水肿及视盘水肿\"]', '[\"迟发性皮肤卟啉病\"]', '[\"骨肉瘤\"]', '[\"高尿酸血症肾病\"]', '[\"高泌乳素血症\"]', '[\"高甘油三酯血症\"]', '[\"高脂蛋白血症Ⅳ型\"]']"}
{"prompt": "Find all the entities that Tony Parker likes and return their IDs.", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "您好，请帮我找出其他球员喜欢的球员，并告诉我他们的姓名好吗？\n嗨，你能帮我找出其他球员喜欢的球员吗？我想知道他们的姓名。\n您好，我想了解一下其他球员喜欢的球员，可以告诉我他们的姓名吗？", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "Hello, please help me identify entities with a 'like' and 'service' relationship with 'Tim Duncan' at a distance of 3. These entities need to be labeled and aged over 40, and then return them to me.", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Find the team in which player 'Rajon Rondo' served between 2013 and 2018, and return the player's name, year of start and end of service, and team name.", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "请问您能帮我找出Porzingis喜欢的所有实体并给我它们的ID吗？", "content": "GO FROM \"Kristaps Porzingis\" OVER like YIELD id($$) AS vid | RETURN $-.vid AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Luka Doncic\"]"]}
{"prompt": "老年人恶性心包积液的主要症状是什么？", "content": "MATCH (n:disease{name:\"老年人恶性心包积液\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "查找年龄为40岁的球员，返回他们的姓名和年龄加1的结果。", "content": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 41]", "[\"Kobe Bryant\", 41]"]}
{"prompt": "Starting from 'Ricky Rubio', follow the 'like' relationship and expand outward 1 to 2 steps to return the IDs, relationship weights, and names of all entities.", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "嘿，能帮我找出年龄超过35岁的球员吗？然后统计一下他们的数量、年龄总和、最大年龄、最小年龄以及平均年龄再加1，还有他们的标签。最后按照id、数量、最大年龄、最小年龄的顺序排序，跳过前面的10个结果，给我返回20个结果。", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "芙蓉·德拉库尔是哪个学院的？", "content": "MATCH (n:character{name:'芙蓉·德拉库尔'})-[e:learn_from]-(n1:college) return n1.character.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "什么病会伴随着脾虚泄泻？", "content": "MATCH (n:disease)-[e:accompany_with]->(n1:disease{name:'脾虚泄泻'}) return n.disease.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"伤食泄泻\"]', '[\"小儿疳痢\"]', '[\"脾劳\"]', '[\"脾虚泄泻\"]']"}
{"prompt": "找出 'Tim Duncan' '喜欢' 的实体和这个实体喜欢的实体，返回这些实体的名称，分别为 'Player'、'Friend'、'FoF'。", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "Find the player with ID 'Tim Duncan' who likes the player, count the number of paths, and return.", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "匹配喜欢 'Tim Duncan'的球员与'Tim Duncan' 所在的球队的数量相乘结果。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "Obtain the name and age attributes of player 'Grant Hill'.", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": " 请问您能帮我查找一下球员和他们的队友之间的关系吗？", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": " 嘿，你能帮我找一下'Paul Gasol'这个球员的信息吗？我想知道他效力过的所有球队的名字。", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "Identify the number of paths that have a 'like' relationship with 'Carmelo Anthony'.", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "Returns all players who joined the team in 2001 and the names of their respective teams.", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "找出与 'Tim Duncan'所 '喜欢' 的所有实体，并返回这些关系的去重属性和关系本身。", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "Query and return the names and nodes of all players.", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "找出与 'Tim Duncan' 有 '喜欢' 关系的所有实体，并返回这些实体的去重后的 ID。", "content": "GO FROM \"Tim Duncan\" OVER like YIELD like._dst AS dst | YIELD DISTINCT $-.dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Manu Ginobili\"]", "[\"Tim Parker\"]", "[\"Tony Parker\"]"]}
{"prompt": "幼年型慢性关节炎及其伴发的葡萄膜炎的得病概率是多少？", "content": "MATCH (n:disease{name:\"幼年型慢性关节炎及其伴发的葡萄膜炎\"}) return n.disease.get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.001%\"]']"}
{"prompt": "迁延性昏迷的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"迁延性昏迷\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"3个月\"]']"}
{"prompt": "帕金 (找球手)的兄妹有哪些？", "content": "MATCH (n:character{name:'帕金 (找球手)'})-[e]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "奥托·奥博梅尔从属于哪个组织？", "content": "MATCH (n:character{name:'奥托·奥博梅尔'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"列支敦士登魔法部\" :group{name: \"列支敦士登魔法部\"})]']"}
{"prompt": "请问您能帮我找出在'Grant Hill'和'Yao Ming'之间的球员名字吗？我需要返回这些球员的信息。", "content": "MATCH (v:player)\nWHERE v.player.name>\"Grant Hill\" and  v.player.name<=\"Yao Ming\"\nRETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[(\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[(\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[(\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[(\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[(\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[(\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Null3\" :player{age: -3, name: \"NULL\"})]", "[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[(\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[(\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[(\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[(\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Null2\" :player{age: -2, name: \"Null\"})]", "[(\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[(\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[(\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[(\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "返回名为'Antetokounmpo'的球员的姓名。", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "获取 'Tony Parker' 球员的姓名和年龄。", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "Could you please help me find someone who has a 'like' relationship with 'Danny Green'? Then find out the 'teammates' of these people and tell me the IDs of these people and their teammates.", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "返回鲁道夫·布兰德周边最多二跳关系的子图？", "content": "GET SUBGRAPH 2 STEPS FROM \"鲁道夫·布兰德\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"鲁道夫·布兰德\" :character{})], [(\"鲁道夫·布兰德\")-[:belong_to@0{}]->(\"布兰德家庭\"), (\"鲁道夫·布兰德\")-[:belong_to@0{}]->(\"海德堡猎犬队\")]]', '[[(\"布兰德家庭\" :group{}), (\"海德堡猎犬队\" :group{})], []]']"}
{"prompt": "周雅的头发颜色是什么？", "content": "MATCH (n:character{name:'周雅'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"黑色\"]']"}
{"prompt": "哪些人物是斯莱特林学院的成员？", "content": "MATCH (n:character)-[e]-(n1:college{name:'斯莱特林学院'}) return n", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Hello, could you please help me find players aged 20 and return all their node information to me?", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "Find all paths from 'Tim Duncan' to 'Nobody' or 'Spur', with a relationship of 'like' and a maximum of 3 nodes, and return these paths.", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Nobody\",\"Spur\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "肌纤维组织炎的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"肌纤维组织炎\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"2-4周\"]']"}
{"prompt": "Find all players with the team name 'Spurs' and return their node information.", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "弗雷德·韦斯莱的头发颜色是什么？", "content": "MATCH (n:character{name:'弗雷德·韦斯莱'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"红色\"]']"}
{"prompt": "Hello, could you please help me find all the things' Tony Parker 'likes and return them to me?", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "蝶骨嵴脑膜瘤眼部病变的预防措施是什么？", "content": "MATCH (n:disease{name:\"蝶骨嵴脑膜瘤眼部病变\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"本病暂无有效预防措施，早发现早诊断是本病防治的关键。\"]']"}
{"prompt": " 嘿，你能帮我找一下名字叫'abc'的球员所服务的三度关系吗？然后把这些实体的所有属性信息都给我返回一下。", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "特发性非硬化性门脉高压综合征的治疗时长是多久？", "content": "MATCH (n:disease{name:\"特发性非硬化性门脉高压综合征\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"3个月\"]']"}
{"prompt": "Find the entities connected to 'Dwight Howard' through a 'like' or 'teammate' relationship, and return their liking level, teammate start year, and endpoint entity names.", "content": "GO FROM \"Dwight Howard\" OVER like, teammate REVERSELY YIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": " 嘿，你能帮我查找一下'Duncan'球员和其他球员之间互相喜欢的关系吗？我想知道他们之间的喜欢程度。", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "Find the team 'Rajon Rondo' played for between 2013 and 2018, and return the player name, start year, end year, and team name.", "content": "GO FROM \"Rajon Rondo\" OVER serve WHERE serve.start_year >= 2013 AND serve.end_year <= 2018\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rajon Rondo\", 2016, 2017, \"Bulls\"]", "[\"Rajon Rondo\", 2015, 2016, \"Kings\"]", "[\"Rajon Rondo\", 2014, 2015, \"Mavericks\"]", "[\"Rajon Rondo\", 2017, 2018, \"Pelicans\"]"]}
{"prompt": "罗恩·韦斯莱的妻子是谁？", "content": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:kindred{rel_type:'妻子'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"赫敏·格兰杰\" :character{marital: \"已婚 (2017年时)\", name: \"赫敏·格兰杰\", dead: \"\", born: \"1979年9月19日英国\", blood: \"麻瓜出身\", species: \"人类\", height: \"\", hair: \"棕色、浓密\", eye: \"棕色\", gender: \"女性\"})]']"}
{"prompt": "请问您能帮我查找一下，'Tony Parker' 喜欢的所有人或事物的 ID 吗？", "content": "GO FROM \"Tony Parker\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "找出 'Boris Diaw' 所在球队中，所有服务于球队名中包含 'Haw' 的时间段和球队信息，并返回球员姓名、效力开始年份、结束年份和球队名称。", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "您好，请帮我找一下名为'Joseph'的球员，找出他与其他实体之间的喜欢关系，并给我返回这些实体和关系的路径好吗？", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Hello, please help me find the types and quantities of all relationships related to a player named 'Tim Duncan'.", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "细菌性阴道病的推荐药物是什么？", "content": "GO FROM \"细菌性阴道病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"乳酸菌阴道胶囊\"]', '[\"克林霉素磷酸酯阴道泡腾片\"]', '[\"原百仙妇炎清栓\"]', '[\"双唑泰泡腾片\"]', '[\"双唑泰阴道泡腾片\"]', '[\"妇炎康分散片\"]', '[\"妇炎灵栓\"]', '[\"替硝唑胶囊\"]', '[\"氧氟沙星栓\"]', '[\"甲硝唑阴道泡腾片\"]', '[\"硝呋太尔制霉素阴道软胶囊\"]', '[\"硝酸咪康唑栓\"]', '[\"聚甲酚磺醛栓\"]', '[\"聚甲酚磺醛阴道栓\"]', '[\"聚维酮碘乳膏\"]']"}
{"prompt": "Hello, could you please help me find the name and age attributes of player 'Grant Hill'?", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "找出和鲁道夫·布兰德相关的两个人？", "content": "MATCH (n:character{name:'鲁道夫·布兰德'})-[e]-(n1) return n LIMIT 2", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"鲁道夫·布兰德\" :character{name: \"鲁道夫·布兰德\", marital: \"\", born: \"\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]', '[(\"鲁道夫·布兰德\" :character{name: \"鲁道夫·布兰德\", marital: \"\", born: \"\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]']"}
{"prompt": "Hello, please help me find the player named 'Yao Ming' and all the positions he holds, and then return the name of the original entity to me.", "content": "MATCH (v:player {name: \"Yao Ming\"})-[:serve*0..1]->() RETURN v.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Yao Ming\"]", "[\"Yao Ming\"]"]}
{"prompt": "Hello, could you please help me obtain the name and age attributes of the 'Kidd' player?", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "Find a player named 'Tim Duncan', return their age and ID, and finally return the expanded ID.", "content": "LOOKUP ON player\nWHERE player.name == 'Tim Duncan'\nYIELD player.age as age, id(vertex) as vid\n| UNWIND $-.vid as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "您好，请帮我找出所有喜欢Tony Parker的实体，并返回这些实体与Tony Parker的喜欢关系的终点ID。", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "帕金 (击球手II)的父亲是谁？", "content": "MATCH (n:character{name:'帕金 (击球手II)'})-[e:kindred{rel_type:'父亲'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "能帮我返回吉米·珀克斯到塞缪尔·G·寇豪格的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"吉米·珀克斯\" TO \"塞缪尔·G·寇豪格\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "拉道夫斯·莱斯特兰奇的后裔有哪些？", "content": "MATCH (n:character{name:'拉道夫斯·莱斯特兰奇'})-[e:kindred{rel_type:'后裔'}]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": " 嘿，你能帮我找一下Tony Parker喜欢的球员中效力于Spurs的球员吗？然后告诉我他们的球队和球员信息。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "阿不思·西弗勒斯·波特的妹妹是谁？", "content": "MATCH (n:character{name:'阿不思·西弗勒斯·波特'})-[e]-(n1) WHERE e.rel_type=='妹妹' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"莉莉·卢娜·波特\" :character{marital: \"\", name: \"莉莉·卢娜·波特\", dead: \"\", born: \"2007年9月1日和2008年8月31日之间，英国\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"红\", eye: \"浅棕\", gender: \"女\"})]']"}
{"prompt": "您好，请帮我找出'Tim Duncan'喜欢的第一个实体。", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "您好，请帮我查找一下年龄为20岁的球员，然后返回这些球员的所有节点信息好吗？", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "Obtain the name and age of player 'Grant Hill'.", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "Hello, could you please help me find the player entity with ID 'Carmelo Anthony' and tell me his age?", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "找出 'Tim Duncan' 喜欢的实体以及此实体喜欢的实体，返回这三类实体的姓名。", "content": "MATCH (v1) -[:like]-> (v2) -[:like]-> (v3)\nWHERE id(v1) == \"Tim Duncan\"\nRETURN v1.player.name AS Player, v2.player.name AS Friend, v3.player.name AS FoF", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\", \"Tony Parker\", \"LaMarcus Aldridge\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Manu Ginobili\"]", "[\"Tim Duncan\", \"Tony Parker\", \"Tim Duncan\"]", "[\"Tim Duncan\", __NULL__, \"Tony Parker\"]", "[\"Tim Duncan\", \"Manu Ginobili\", \"Tim Duncan\"]"]}
{"prompt": "从 'Tim Duncan' 出发，经过有 '喜欢' 和 '服务' 的关系，找出距离为2的子图，并返回节点和边的信息。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "请问您能帮我找到Tim Duncan喜欢的第一个人吗？", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "西格纳斯·布莱克二世的妻子是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'妻子'}]-(n1) WHERE n.character.name=='西格纳斯·布莱克二世' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"维奥莱塔·伯斯德\" :character{marital: \"已婚\", name: \"维奥莱塔·伯斯德\", dead: \"晚于1920年\", born: \"\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "查看和心悸一跳相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"心悸\" YIELD VERTICES AS nodes, EDGES AS all_edges;", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"心悸\" :symptom{})], [(\"I型肾小管性酸中毒\")-[:has_symptom@0{}]->(\"心悸\"), (\"Plummer-Vinson综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"一度房室传导阻滞\")-[:has_symptom@0{}]->(\"心悸\"), (\"一氧化碳中毒\")-[:has_symptom@0{}]->(\"心悸\"), (\"一氧化碳中毒后迟发性脑病\")-[:has_symptom@0{}]->(\"心悸\"), (\"三高症\")-[:has_symptom@0{}]->(\"心悸\"), (\"不稳定型心绞痛\")-[:has_symptom@0{}]->(\"心悸\"), (\"中老年男子部分性雄激素缺乏综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"主-肺动脉隔缺损\")-[:has_symptom@0{}]->(\"心悸\"), (\"主动脉瓣关闭不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"主动脉瓣闭锁不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"乳头肌功能不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"二尖瓣狭窄\")-[:has_symptom@0{}]->(\"心悸\"), (\"亚急性甲状腺炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"产后血虚热\")-[:has_symptom@0{}]->(\"心悸\"), (\"伤寒性心肌炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"低增生性急性白血病\")-[:has_symptom@0{}]->(\"心悸\"), (\"低血糖\")-[:has_symptom@0{}]->(\"心悸\"), (\"体质性低血压\")-[:has_symptom@0{}]->(\"心悸\"), (\"先天性主动脉缩窄\")-[:has_symptom@0{}]->(\"心悸\"), (\"先天性冠状动脉瘘\")-[:has_symptom@0{}]->(\"心悸\"), (\"先天性纯红细胞再生障碍性贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"先天性肺动静脉瘘\")-[:has_symptom@0{}]->(\"心悸\"), (\"全植物神经功能不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"全身性念珠菌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"典型预激综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"内热\")-[:has_symptom@0{}]->(\"心悸\"), (\"再生障碍性贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"冠心病\")-[:has_symptom@0{}]->(\"心悸\"), (\"冠状动脉终止异常\")-[:has_symptom@0{}]->(\"心悸\"), (\"副神经节起源的肿瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"加速性房性逸搏心律\")-[:has_symptom@0{}]->(\"心悸\"), (\"双侧束支传导阻滞\")-[:has_symptom@0{}]->(\"心悸\"), (\"反应性浆细胞增多症\")-[:has_symptom@0{}]->(\"心悸\"), (\"发作性睡病\")-[:has_symptom@0{}]->(\"心悸\"), (\"变异型预激综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"后天性动静脉瘘\")-[:has_symptom@0{}]->(\"心悸\"), (\"复张性肺水肿\")-[:has_symptom@0{}]->(\"心悸\"), (\"外伤性乳糜胸\")-[:has_symptom@0{}]->(\"心悸\"), (\"外伤性脾破裂\")-[:has_symptom@0{}]->(\"心悸\"), (\"奔豚气\")-[:has_symptom@0{}]->(\"心悸\"), (\"妊娠合并心室间隔缺损\")-[:has_symptom@0{}]->(\"心悸\"), (\"妊娠合并甲亢\")-[:has_symptom@0{}]->(\"心悸\"), (\"妊娠期心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"妊娠高血压综合征眼底病变\")-[:has_symptom@0{}]->(\"心悸\"), (\"室性并行心律及室性并行心律性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"室性期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿一氧化碳中毒\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿亚急性甲状腺炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿再生障碍性贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿单纯肺动脉口狭窄\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿嗜铬细胞瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿大动脉炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿心律失常\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿心房扑动\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿心房颤动\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿心肌炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿手-心畸形综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿潮红综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿烹调综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿特发性室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿病态窦房结综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿窦性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿红白血病\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿肝炎再生障碍性贫血综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿肥厚型心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿肺不张\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿肾上腺皮质与髓质增生并存综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿自律性房性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿致心律失常性右室心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿触电与雷击\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿部分性肺静脉异位连接\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿阵发性室上性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿阵发性室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"小儿阵发性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"尿毒症性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"左前分支传导阻滞\")-[:has_symptom@0{}]->(\"心悸\"), (\"左心室恶性施万瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"左心房心律\")-[:has_symptom@0{}]->(\"心悸\"), (\"左束支中隔支传导阻滞\")-[:has_symptom@0{}]->(\"心悸\"), (\"张力性气胸\")-[:has_symptom@0{}]->(\"心悸\"), (\"心-耳综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"心动过缓\")-[:has_symptom@0{}]->(\"心悸\"), (\"心动过速性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"心包囊肿\")-[:has_symptom@0{}]->(\"心悸\"), (\"心包囊肿与心包憩室\")-[:has_symptom@0{}]->(\"心悸\"), (\"心室内传导阻滞\")-[:has_symptom@0{}]->(\"心悸\"), (\"心室间隔缺损\")-[:has_symptom@0{}]->(\"心悸\"), (\"心室静止\")-[:has_symptom@0{}]->(\"心悸\"), (\"心尖肥厚型心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"心律失常\")-[:has_symptom@0{}]->(\"心悸\"), (\"心性猝死综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"心房内折返性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"心房扑动\")-[:has_symptom@0{}]->(\"心悸\"), (\"心房扑动与心房颤动\")-[:has_symptom@0{}]->(\"心悸\"), (\"心房肥大\")-[:has_symptom@0{}]->(\"心悸\"), (\"心房颤动\")-[:has_symptom@0{}]->(\"心悸\"), (\"心肌炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"心肾不交\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏内粘液瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏损伤\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏瓣膜关闭不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏瓣膜病\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏神经官能症\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏神经症\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脏骤停与心肺脑复苏\")-[:has_symptom@0{}]->(\"心悸\"), (\"心脾两虚\")-[:has_symptom@0{}]->(\"心悸\"), (\"心血不足\")-[:has_symptom@0{}]->(\"心悸\"), (\"心血管疾病伴发的精神障碍\")-[:has_symptom@0{}]->(\"心悸\"), (\"怔忡\")-[:has_symptom@0{}]->(\"心悸\"), (\"急性冠脉综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"急性肺源性心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"急性骨髓性白血病\")-[:has_symptom@0{}]->(\"心悸\"), (\"恶性肿瘤所致贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"慢性肺源性心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"慢性肾性贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"慢性胆囊炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"慢性自律性房性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"成人全垂体功能减退\")-[:has_symptom@0{}]->(\"心悸\"), (\"房室交接区性期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"房室交接区逸搏和逸搏心律\")-[:has_symptom@0{}]->(\"心悸\"), (\"房室折返性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"房室结折返性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"房性期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"房间隔缺损\")-[:has_symptom@0{}]->(\"心悸\"), (\"挤压综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"新生儿心律失常\")-[:has_symptom@0{}]->(\"心悸\"), (\"新生儿肺不张\")-[:has_symptom@0{}]->(\"心悸\"), (\"无机磷中毒\")-[:has_symptom@0{}]->(\"心悸\"), (\"无痛性心肌梗死\")-[:has_symptom@0{}]->(\"心悸\"), (\"无痛性甲状腺炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"日光皮炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"早搏\")-[:has_symptom@0{}]->(\"心悸\"), (\"早期复极综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"晒伤\")-[:has_symptom@0{}]->(\"心悸\"), (\"水肿\")-[:has_symptom@0{}]->(\"心悸\"), (\"汽油、煤油中毒\")-[:has_symptom@0{}]->(\"心悸\"), (\"油漆皮炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"法洛三联症\")-[:has_symptom@0{}]->(\"心悸\"), (\"溃疡病出血\")-[:has_symptom@0{}]->(\"心悸\"), (\"漏斗胸\")-[:has_symptom@0{}]->(\"心悸\"), (\"特发性嗜酸性粒细胞增多综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"特发性室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"特异性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"甲亢合并妊娠\")-[:has_symptom@0{}]->(\"心悸\"), (\"甲状腺功能亢进性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"甲状腺功能减退性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"甲状腺弥漫性病变\")-[:has_symptom@0{}]->(\"心悸\"), (\"甲状腺炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"电灼伤\")-[:has_symptom@0{}]->(\"心悸\"), (\"病毒性心肌炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"痰火扰心\")-[:has_symptom@0{}]->(\"心悸\"), (\"短P-R综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"石油、煤焦油及其分馏产物所致的皮肤病\")-[:has_symptom@0{}]->(\"心悸\"), (\"窦性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"窦性心律失常\")-[:has_symptom@0{}]->(\"心悸\"), (\"窦性期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"窦房折返性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"纯红细胞再生障碍\")-[:has_symptom@0{}]->(\"心悸\"), (\"结核性心包炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"绝经\")-[:has_symptom@0{}]->(\"心悸\"), (\"继发性红细胞增多症\")-[:has_symptom@0{}]->(\"心悸\"), (\"继发性铁粒幼细胞性贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"继发性高血压\")-[:has_symptom@0{}]->(\"心悸\"), (\"缺血性多形性室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人乳头肌功能不全和断裂\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人室性期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人心房扑动\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人心肌梗死\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人期前收缩\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人肺栓塞\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人钙化性瓣膜病\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人阵发性室上性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人预激综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年人风湿性心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年性心瓣膜病\")-[:has_symptom@0{}]->(\"心悸\"), (\"老年跌倒\")-[:has_symptom@0{}]->(\"心悸\"), (\"联合瓣膜病变\")-[:has_symptom@0{}]->(\"心悸\"), (\"肝阳上亢\")-[:has_symptom@0{}]->(\"心悸\"), (\"肥厚型梗阻性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"肺动脉瓣关闭不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"肺动脉闭锁\")-[:has_symptom@0{}]->(\"心悸\"), (\"肺痿\")-[:has_symptom@0{}]->(\"心悸\"), (\"肺胀\")-[:has_symptom@0{}]->(\"心悸\"), (\"肺静脉异位引流\")-[:has_symptom@0{}]->(\"心悸\"), (\"肾上腺髓质增生\")-[:has_symptom@0{}]->(\"心悸\"), (\"肾硬化症\")-[:has_symptom@0{}]->(\"心悸\"), (\"胃下垂\")-[:has_symptom@0{}]->(\"心悸\"), (\"胰岛素瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"胸痹\")-[:has_symptom@0{}]->(\"心悸\"), (\"胸痹心痛\")-[:has_symptom@0{}]->(\"心悸\"), (\"脊柱侧凸\")-[:has_symptom@0{}]->(\"心悸\"), (\"脚气病性心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"脾功能亢进\")-[:has_symptom@0{}]->(\"心悸\"), (\"脾功能亢进症\")-[:has_symptom@0{}]->(\"心悸\"), (\"脾脏原发性恶性肿瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"脾良性肿瘤\")-[:has_symptom@0{}]->(\"心悸\"), (\"自发性气胸\")-[:has_symptom@0{}]->(\"心悸\"), (\"自律性房性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"获得性免疫缺陷综合征的心血管损害\")-[:has_symptom@0{}]->(\"心悸\"), (\"蜈蚣蜇伤\")-[:has_symptom@0{}]->(\"心悸\"), (\"蝎螫伤\")-[:has_symptom@0{}]->(\"心悸\"), (\"血压病\")-[:has_symptom@0{}]->(\"心悸\"), (\"血虚头痛\")-[:has_symptom@0{}]->(\"心悸\"), (\"触电\")-[:has_symptom@0{}]->(\"心悸\"), (\"过度通气综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"过敏性结肠炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"造影剂肾病\")-[:has_symptom@0{}]->(\"心悸\"), (\"遗传性高铁血红蛋白血症\")-[:has_symptom@0{}]->(\"心悸\"), (\"遗精\")-[:has_symptom@0{}]->(\"心悸\"), (\"铅中毒\")-[:has_symptom@0{}]->(\"心悸\"), (\"镇痛剂肾病\")-[:has_symptom@0{}]->(\"心悸\"), (\"间歇依赖型尖端扭转型室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"阴吹\")-[:has_symptom@0{}]->(\"心悸\"), (\"阴挺\")-[:has_symptom@0{}]->(\"心悸\"), (\"阵发性室上性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"阵发性室性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"阵发性睡眠性血红蛋白尿\")-[:has_symptom@0{}]->(\"心悸\"), (\"非阵发性交接区性心动过速\")-[:has_symptom@0{}]->(\"心悸\"), (\"预激综合征\")-[:has_symptom@0{}]->(\"心悸\"), (\"颈部血管损伤\")-[:has_symptom@0{}]->(\"心悸\"), (\"风湿性二尖瓣关闭不全\")-[:has_symptom@0{}]->(\"心悸\"), (\"风湿性心肌炎\")-[:has_symptom@0{}]->(\"心悸\"), (\"风湿性心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"风湿病性贫血\")-[:has_symptom@0{}]->(\"心悸\"), (\"高催乳素血症\")-[:has_symptom@0{}]->(\"心悸\"), (\"高动力性循环\")-[:has_symptom@0{}]->(\"心悸\"), (\"高原性心脏病\")-[:has_symptom@0{}]->(\"心悸\"), (\"高原红细胞增多症\")-[:has_symptom@0{}]->(\"心悸\"), (\"高胰岛素血症\")-[:has_symptom@0{}]->(\"心悸\"), (\"高血压性心肌病\")-[:has_symptom@0{}]->(\"心悸\"), (\"麻黄碱中毒\")-[:has_symptom@0{}]->(\"心悸\")]]', '[[(\"一度房室传导阻滞\" :disease{}), (\"中老年男子部分性雄激素缺乏综合征\" :disease{}), (\"先天性纯红细胞再生障碍性贫血\" :disease{}), (\"冠状动脉终止异常\" :disease{}), (\"加速性房性逸搏心律\" :disease{}), (\"变异型预激综合征\" :disease{}), (\"妊娠合并甲亢\" :disease{}), (\"室性并行心律及室性并行心律性心动过速\" :disease{}), (\"小儿亚急性甲状腺炎\" :disease{}), (\"小儿单纯肺动脉口狭窄\" :disease{}), (\"小儿肾上腺皮质与髓质增生并存综合征\" :disease{}), (\"张力性气胸\" :disease{}), (\"心-耳综合征\" :disease{}), (\"心包囊肿\" :disease{}), (\"心律失常\" :symptom{} :disease{}), (\"心房肥大\" :disease{}), (\"急性肺源性心脏病\" :disease{}), (\"新生儿心律失常\" :disease{}), (\"汽油、煤油中毒\" :disease{}), (\"肝阳上亢\" :disease{}), (\"胰岛素瘤\" :disease{}), (\"蜈蚣蜇伤\" :disease{}), (\"阵发性室上性心动过速\" :disease{}), (\"Plummer-Vinson综合征\" :disease{}), (\"一氧化碳中毒后迟发性脑病\" :disease{}), (\"三高症\" :disease{}), (\"二尖瓣狭窄\" :disease{}), (\"典型预激综合征\" :disease{}), (\"内热\" :disease{}), (\"妊娠期心脏病\" :disease{}), (\"小儿潮红综合征\" :disease{}), (\"小儿肝炎再生障碍性贫血综合征\" :disease{}), (\"心包囊肿与心包憩室\" :disease{}), (\"心血不足\" :disease{}), (\"急性骨髓性白血病\" :disease{}), (\"无痛性甲状腺炎\" :disease{}), (\"早期复极综合征\" :disease{}), (\"漏斗胸\" :disease{}), (\"特发性室性心动过速\" :disease{}), (\"老年人室性期前收缩\" :disease{}), (\"老年人预激综合征\" :disease{}), (\"肥厚型梗阻性心肌病\" :disease{}), (\"肺动脉瓣关闭不全\" :disease{}), (\"脾脏原发性恶性肿瘤\" :disease{}), (\"自律性房性心动过速\" :disease{}), (\"遗传性高铁血红蛋白血症\" :disease{}), (\"风湿性心脏病\" :disease{}), (\"高动力性循环\" :disease{}), (\"麻黄碱中毒\" :disease{}), (\"一氧化碳中毒\" :symptom{} :disease{}), (\"不稳定型心绞痛\" :disease{}), (\"全身性念珠菌病\" :disease{}), (\"发作性睡病\" :disease{}), (\"后天性动静脉瘘\" :disease{}), (\"复张性肺水肿\" :disease{}), (\"奔豚气\" :disease{}), (\"室性期前收缩\" :disease{}), (\"小儿心房扑动\" :disease{}), (\"小儿心肌炎\" :disease{}), (\"小儿阵发性室性心动过速\" :disease{}), (\"尿毒症性心肌病\" :disease{}), (\"左前分支传导阻滞\" :disease{}), (\"左束支中隔支传导阻滞\" :disease{}), (\"心性猝死综合征\" :disease{}), (\"心房扑动与心房颤动\" :disease{}), (\"心肾不交\" :disease{}), (\"心脏损伤\" :disease{}), (\"心脏神经官能症\" :disease{}), (\"怔忡\" :disease{}), (\"急性冠脉综合征\" :disease{}), (\"无机磷中毒\" :disease{}), (\"无痛性心肌梗死\" :disease{}), (\"特异性心肌病\" :disease{}), (\"甲状腺功能减退性心肌病\" :disease{}), (\"短P-R综合征\" :disease{}), (\"石油、煤焦油及其分馏产物所致的皮肤病\" :disease{}), (\"老年人风湿性心脏病\" :disease{}), (\"肺静脉异位引流\" :disease{}), (\"风湿性心肌炎\" :disease{}), (\"主动脉瓣关闭不全\" :disease{}), (\"低血糖\" :disease{}), (\"再生障碍性贫血\" :disease{}), (\"双侧束支传导阻滞\" :disease{}), (\"小儿再生障碍性贫血\" :disease{}), (\"心室间隔缺损\" :disease{}), (\"心室静止\" :disease{}), (\"心脏病\" :disease{}), (\"慢性肾性贫血\" :disease{}), (\"水肿\" :disease{}), (\"痰火扰心\" :disease{}), (\"窦性期前收缩\" :disease{}), (\"继发性红细胞增多症\" :disease{}), (\"继发性铁粒幼细胞性贫血\" :disease{}), (\"继发性高血压\" :symptom{} :disease{}), (\"老年人室性心动过速\" :disease{}), (\"胸痹\" :disease{}), (\"脾功能亢进\" :symptom{} :disease{}), (\"镇痛剂肾病\" :disease{}), (\"预激综合征\" :disease{}), (\"主-肺动脉隔缺损\" :disease{}), (\"小儿手-心畸形综合征\" :disease{}), (\"小儿红白血病\" :disease{}), (\"小儿自律性房性心动过速\" :disease{}), (\"左心室恶性施万瘤\" :disease{}), (\"心动过速性心肌病\" :disease{}), (\"心房颤动\" :disease{}), (\"心脏神经症\" :disease{}), (\"慢性胆囊炎\" :disease{}), (\"慢性自律性房性心动过速\" :disease{}), (\"日光皮炎\" :disease{}), (\"早搏\" :symptom{} :disease{}), (\"老年性心瓣膜病\" :disease{}), (\"肺动脉闭锁\" :symptom{} :disease{}), (\"肺痿\" :disease{}), (\"铅中毒\" :disease{}), (\"亚急性甲状腺炎\" :disease{}), (\"先天性冠状动脉瘘\" :disease{}), (\"全植物神经功能不全\" :disease{}), (\"反应性浆细胞增多症\" :disease{}), (\"外伤性脾破裂\" :disease{}), (\"妊娠合并心室间隔缺损\" :disease{}), (\"小儿心律失常\" :disease{}), (\"小儿烹调综合征\" :disease{}), (\"小儿肺不张\" :disease{}), (\"心动过缓\" :symptom{} :disease{}), (\"心房内折返性心动过速\" :disease{}), (\"心房扑动\" :disease{}), (\"心脏内粘液瘤\" :disease{}), (\"恶性肿瘤所致贫血\" :disease{}), (\"成人全垂体功能减退\" :disease{}), (\"挤压综合征\" :disease{}), (\"特发性嗜酸性粒细胞增多综合征\" :disease{}), (\"电灼伤\" :disease{}), (\"结核性心包炎\" :disease{}), (\"老年人乳头肌功能不全和断裂\" :disease{}), (\"老年人期前收缩\" :disease{}), (\"老年人肺栓塞\" :disease{}), (\"脊柱侧凸\" :disease{}), (\"自发性气胸\" :disease{}), (\"获得性免疫缺陷综合征的心血管损害\" :disease{}), (\"血压病\" :disease{}), (\"血虚头痛\" :disease{}), (\"过敏性结肠炎\" :disease{}), (\"造影剂肾病\" :disease{}), (\"阴挺\" :disease{}), (\"阵发性室性心动过速\" :disease{}), (\"风湿性二尖瓣关闭不全\" :disease{}), (\"高催乳素血症\" :disease{}), (\"高原红细胞增多症\" :disease{}), (\"产后血虚热\" :disease{}), (\"副神经节起源的肿瘤\" :disease{}), (\"小儿部分性肺静脉异位连接\" :disease{}), (\"左心房心律\" :disease{}), (\"心室内传导阻滞\" :disease{}), (\"心尖肥厚型心肌病\" :disease{}), (\"心肌炎\" :disease{}), (\"心脏骤停与心肺脑复苏\" :disease{}), (\"心血管疾病伴发的精神障碍\" :disease{}), (\"房室折返性心动过速\" :disease{}), (\"房间隔缺损\" :disease{}), (\"新生儿肺不张\" :disease{}), (\"溃疡病出血\" :disease{}), (\"甲状腺功能亢进性心肌病\" :disease{}), (\"窦性心动过速\" :disease{}), (\"窦性心律失常\" :disease{}), (\"纯红细胞再生障碍\" :disease{}), (\"缺血性多形性室性心动过速\" :disease{}), (\"老年人心肌梗死\" :disease{}), (\"肾上腺髓质增生\" :disease{}), (\"胃下垂\" :disease{}), (\"脾功能亢进症\" :disease{}), (\"过度通气综合征\" :disease{}), (\"高血压性心肌病\" :disease{}), (\"主动脉瓣闭锁不全\" :disease{}), (\"乳头肌功能不全\" :disease{}), (\"冠心病\" :disease{}), (\"外伤性乳糜胸\" :disease{}), (\"妊娠高血压综合征眼底病变\" :disease{}), (\"小儿一氧化碳中毒\" :disease{}), (\"小儿窦性心动过速\" :disease{}), (\"小儿肥厚型心肌病\" :disease{}), (\"小儿阵发性心动过速\" :disease{}), (\"心肌病\" :disease{}), (\"心脏瓣膜病\" :disease{}), (\"房室交接区逸搏和逸搏心律\" :disease{}), (\"房室结折返性心动过速\" :disease{}), (\"油漆皮炎\" :disease{}), (\"法洛三联症\" :disease{}), (\"甲状腺炎\" :disease{}), (\"病毒性心肌炎\" :disease{}), (\"老年心肌病\" :disease{}), (\"老年跌倒\" :disease{}), (\"脾良性肿瘤\" :disease{}), (\"触电\" :disease{}), (\"遗精\" :symptom{} :disease{}), (\"阴吹\" :disease{}), (\"阵发性睡眠性血红蛋白尿\" :disease{}), (\"I型肾小管性酸中毒\" :disease{}), (\"低增生性急性白血病\" :disease{}), (\"体质性低血压\" :disease{}), (\"先天性主动脉缩窄\" :disease{}), (\"小儿嗜铬细胞瘤\" :disease{}), (\"小儿大动脉炎\" :disease{}), (\"小儿室性心动过速\" :disease{}), (\"小儿特发性室性心动过速\" :disease{}), (\"小儿病态窦房结综合征\" :disease{}), (\"小儿致心律失常性右室心肌病\" :disease{}), (\"小儿阵发性室上性心动过速\" :disease{}), (\"心脾两虚\" :disease{}), (\"慢性肺源性心脏病\" :disease{}), (\"房性期前收缩\" :disease{}), (\"甲亢合并妊娠\" :disease{}), (\"甲状腺弥漫性病变\" :disease{}), (\"窦房折返性心动过速\" :disease{}), (\"老年人心房扑动\" :disease{}), (\"肺胀\" :disease{}), (\"肾硬化症\" :disease{}), (\"胸痹心痛\" :disease{}), (\"脚气病性心脏病\" :disease{}), (\"蝎螫伤\" :disease{}), (\"颈部血管损伤\" :disease{}), (\"高原性心脏病\" :disease{}), (\"伤寒性心肌炎\" :disease{}), (\"先天性肺动静脉瘘\" :disease{}), (\"小儿心房颤动\" :disease{}), (\"小儿期前收缩\" :disease{}), (\"小儿触电与雷击\" :disease{}), (\"心脏瓣膜关闭不全\" :disease{}), (\"房室交接区性期前收缩\" :disease{}), (\"晒伤\" :symptom{} :disease{}), (\"绝经\" :symptom{} :disease{}), (\"老年人钙化性瓣膜病\" :disease{}), (\"老年人阵发性室上性心动过速\" :disease{}), (\"联合瓣膜病变\" :disease{}), (\"间歇依赖型尖端扭转型室性心动过速\" :disease{}), (\"非阵发性交接区性心动过速\" :disease{}), (\"风湿病性贫血\" :disease{}), (\"高胰岛素血症\" :disease{})], [(\"一度房室传导阻滞\")-[:accompany_with@0{}]->(\"阵发性室性心动过速\"), (\"中老年男子部分性雄激素缺乏综合征\")-[:accompany_with@0{}]->(\"冠心病\"), (\"冠状动脉终止异常\")-[:accompany_with@0{}]->(\"心律失常\"), (\"加速性房性逸搏心律\")-[:accompany_with@0{}]->(\"心房颤动\"), (\"室性并行心律及室性并行心律性心动过速\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心-耳综合征\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心-耳综合征\")-[:accompany_with@0{}]->(\"室性期前收缩\"), (\"一氧化碳中毒后迟发性脑病\")-[:has_symptom@0{}]->(\"一氧化碳中毒\"), (\"妊娠期心脏病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"漏斗胸\")-[:has_symptom@0{}]->(\"心律失常\"), (\"老年人室性期前收缩\")-[:has_symptom@0{}]->(\"心律失常\"), (\"老年人预激综合征\")-[:has_symptom@0{}]->(\"心律失常\"), (\"麻黄碱中毒\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿心房扑动\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿心肌炎\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿心肌炎\")-[:accompany_with@0{}]->(\"心动过缓\"), (\"小儿心肌炎\")-[:accompany_with@0{}]->(\"心律失常\"), (\"小儿心肌炎\")-[:accompany_with@0{}]->(\"心房扑动\"), (\"小儿心肌炎\")-[:accompany_with@0{}]->(\"心房颤动\"), (\"尿毒症性心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"尿毒症性心肌病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"心房扑动与心房颤动\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心肾不交\")-[:has_symptom@0{}]->(\"遗精\"), (\"心脏损伤\")-[:accompany_with@0{}]->(\"心律失常\"), (\"急性冠脉综合征\")-[:accompany_with@0{}]->(\"心律失常\"), (\"无痛性心肌梗死\")-[:has_symptom@0{}]->(\"心律失常\"), (\"无痛性心肌梗死\")-[:accompany_with@0{}]->(\"心律失常\"), (\"特异性心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"甲状腺功能减退性心肌病\")-[:has_symptom@0{}]->(\"心动过缓\"), (\"甲状腺功能减退性心肌病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"短P-R综合征\")-[:has_symptom@0{}]->(\"心律失常\"), (\"老年人风湿性心脏病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"老年人风湿性心脏病\")-[:accompany_with@0{}]->(\"主动脉瓣关闭不全\"), (\"老年人风湿性心脏病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"肺静脉异位引流\")-[:accompany_with@0{}]->(\"心律失常\"), (\"心室间隔缺损\")-[:accompany_with@0{}]->(\"主动脉瓣关闭不全\"), (\"老年人室性心动过速\")-[:has_symptom@0{}]->(\"心律失常\"), (\"预激综合征\")-[:accompany_with@0{}]->(\"心房颤动\"), (\"主-肺动脉隔缺损\")-[:accompany_with@0{}]->(\"房间隔缺损\"), (\"小儿自律性房性心动过速\")-[:has_symptom@0{}]->(\"心律失常\"), (\"左心室恶性施万瘤\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心动过速性心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心动过速性心肌病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"心房颤动\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心房颤动\")-[:accompany_with@0{}]->(\"心律失常\"), (\"慢性自律性房性心动过速\")-[:has_symptom@0{}]->(\"心律失常\"), (\"早搏\")-[:has_symptom@0{}]->(\"心律失常\"), (\"早搏\")-[:accompany_with@0{}]->(\"心性猝死综合征\"), (\"早搏\")-[:accompany_with@0{}]->(\"阵发性室性心动过速\"), (\"老年性心瓣膜病\")-[:accompany_with@0{}]->(\"主动脉瓣闭锁不全\"), (\"老年性心瓣膜病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"亚急性甲状腺炎\")-[:accompany_with@0{}]->(\"水肿\"), (\"妊娠合并心室间隔缺损\")-[:accompany_with@0{}]->(\"主动脉瓣关闭不全\"), (\"妊娠合并心室间隔缺损\")-[:accompany_with@0{}]->(\"心律失常\"), (\"妊娠合并心室间隔缺损\")-[:accompany_with@0{}]->(\"房间隔缺损\"), (\"小儿心律失常\")-[:has_symptom@0{}]->(\"心动过缓\"), (\"小儿心律失常\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿心律失常\")-[:has_symptom@0{}]->(\"早搏\"), (\"小儿烹调综合征\")-[:accompany_with@0{}]->(\"窦性心动过速\"), (\"心脏内粘液瘤\")-[:accompany_with@0{}]->(\"水肿\"), (\"结核性心包炎\")-[:accompany_with@0{}]->(\"水肿\"), (\"血压病\")-[:has_symptom@0{}]->(\"继发性高血压\"), (\"阵发性室性心动过速\")-[:accompany_with@0{}]->(\"冠心病\"), (\"阵发性室性心动过速\")-[:accompany_with@0{}]->(\"心动过速性心肌病\"), (\"阵发性室性心动过速\")-[:accompany_with@0{}]->(\"心肌病\"), (\"高原红细胞增多症\")-[:accompany_with@0{}]->(\"心脏病\"), (\"心脏骤停与心肺脑复苏\")-[:accompany_with@0{}]->(\"心律失常\"), (\"心血管疾病伴发的精神障碍\")-[:accompany_with@0{}]->(\"主动脉瓣闭锁不全\"), (\"高血压性心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"高血压性心肌病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"主动脉瓣闭锁不全\")-[:accompany_with@0{}]->(\"心律失常\"), (\"冠心病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿一氧化碳中毒\")-[:accompany_with@0{}]->(\"一氧化碳中毒后迟发性脑病\"), (\"心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"心肌病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"房室交接区逸搏和逸搏心律\")-[:has_symptom@0{}]->(\"心动过缓\"), (\"老年心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"触电\")-[:has_symptom@0{}]->(\"心律失常\"), (\"I型肾小管性酸中毒\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿大动脉炎\")-[:accompany_with@0{}]->(\"主动脉瓣关闭不全\"), (\"小儿室性心动过速\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿特发性室性心动过速\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿致心律失常性右室心肌病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"小儿致心律失常性右室心肌病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"慢性肺源性心脏病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"慢性肺源性心脏病\")-[:accompany_with@0{}]->(\"心律失常\"), (\"房性期前收缩\")-[:accompany_with@0{}]->(\"心房颤动\"), (\"高原性心脏病\")-[:has_symptom@0{}]->(\"心动过缓\"), (\"伤寒性心肌炎\")-[:accompany_with@0{}]->(\"伤寒性心肌炎\"), (\"伤寒性心肌炎\")-[:accompany_with@0{}]->(\"心律失常\"), (\"老年人钙化性瓣膜病\")-[:has_symptom@0{}]->(\"心律失常\"), (\"联合瓣膜病变\")-[:accompany_with@0{}]->(\"心律失常\"), (\"非阵发性交接区性心动过速\")-[:accompany_with@0{}]->(\"心律失常\")]]']"}
{"prompt": "请问您能帮我查找一下球员 'Grant Hill' 的姓名和年龄吗？", "content": "FETCH PROP ON player \"Grant Hill\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\", 46]"]}
{"prompt": "Hello, could you please help me obtain the name and age of the 'Tony Parker' player?", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "Hey, can you help me find the third degree relationship that a player named 'abc' serves? Then return all the attribute information of these entities to me.", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "根尖脓肿的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"根尖脓肿\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"7-30天\"]']"}
{"prompt": "得了糖尿病推荐吃什么药？", "content": "GO FROM \"糖尿病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"伏格列波糖片\"]', '[\"十八味诃子利尿胶囊\"]', '[\"天麦消渴片\"]', '[\"抗饥消渴片\"]', '[\"消渴平片\"]', '[\"消渴灵片\"]', '[\"渴乐宁胶囊\"]', '[\"玉泉颗粒\"]', '[\"盐酸二甲双胍片\"]', '[\"盐酸二甲双胍缓释片\"]', '[\"米格列醇片\"]', '[\"降糖宁胶囊\"]']"}
{"prompt": "根尖脓肿的易感人群是哪些？", "content": "MATCH (n:disease{name:\"根尖脓肿\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特定人群\"]']"}
{"prompt": "Returns a player node named 'DeAndre Jordan'.", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "布拉德利是哪个学院的？", "content": "MATCH (n:character{name:'布拉德利'})-[e:learn_from]-(n1:college) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"拉文克劳学院\" :college{name: \"拉文克劳学院\"} :group{name: \"拉文克劳学院\"})]']"}
{"prompt": "查找名为'abc'的球员所服务的3跳以内的所有实体，返回这些实体的所有属性信息。", "content": "MATCH (v:player{name: \"abc\"}) -[:serve*..3]-> ()\nRETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Multiply the number of players who like 'Tim Duncan' by the team they belong to.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "您好，请帮我查找一下ID为'Carmelo Anthony'的球员实体，然后告诉我他的年龄是多少呢？", "content": "match (v:player) where id(v)==\"Carmelo Anthony\" return properties(v).age;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[34]"]}
{"prompt": "坎坦克卢斯·诺特的血统是什么？", "content": "LOOKUP ON character WHERE character.name=='坎坦克卢斯·诺特' YIELD properties(vertex).blood AS blood", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"纯血统\"]']"}
{"prompt": "细菌性阴道病的易感人群是哪些？", "content": "MATCH (n:disease{name:\"细菌性阴道病\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"女性\"]']"}
{"prompt": "Identify all 'like' and 'Steve Nash' entities and target them in the relationship.", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "Obtain the name and age of the 'Tony Parker' player.", "content": "FETCH PROP ON player \"Tony Parker\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tony Parker\", 36]"]}
{"prompt": "查找 'Tim Duncan' 喜欢的第一个实体。", "content": "GO FROM \"Tim Duncan\" OVER like LIMIT 1;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Starting from 'Tim Duncan', identify all entities and relationship subgraphs with a 'like' degree between 95 and 100 within two steps.", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "Can you help me find the 'like' relationship with a rating of 666? I need to obtain the starting and ending points of these relationships.", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Returns the names of all players who joined the team in 2001 and their respective team names.", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "找出与 'Carmelo Anthony' 有 '喜欢' 关系的路径数量。", "content": "GO FROM \"Carmelo Anthony\" OVER like YIELD like._dst| YIELD COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[3]"]}
{"prompt": "嘿，你能帮我弄到'Boris Diaw'和'Tony Parker'这两位球员的名字和年龄信息吗？然后把去重后的结果给我。", "content": "FETCH PROP ON player \"Boris Diaw\", \"Tony Parker\" YIELD DISTINCT player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 36]", "[\"Tony Parker\", 36]"]}
{"prompt": "克丽奥娜的出生地是哪里？", "content": "MATCH (n:character{name:'克丽奥娜'}) return n.character.born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"中世纪，爱尔兰\"]']"}
{"prompt": "Hello, please help me find a player node named 'DeAndre Jordan'.", "content": "MATCH (v:player {name: \"DeAndre Jordan\"}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]"]}
{"prompt": "得了脐疝应该去哪个科室就诊？", "content": "GO FROM \"脐疝\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"普外科\"]']"}
{"prompt": "Find players aged 30 and return their names and age plus 1.", "content": "LOOKUP ON player WHERE player.age == 30 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kevin Durant\", 31]", "[\"Russell Westbrook\", 31]", "[\"Blake Griffin\", 31]", "[\"DeAndre Jordan\", 31]"]}
{"prompt": "Could you please help me find the IDs of all the entities that 'Russell Westbrook' works for and likes?", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "血红蛋白E病的易感人群是哪些？", "content": "MATCH (n:disease{name:\"血红蛋白E病\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"无特殊人群\"]']"}
{"prompt": "从 'Tony Parker' 出发，沿着双向 '喜欢' 关系，经过 0 到 2 步，返回所有不重复的实体的 ID。", "content": "GO 0 TO 2 STEPS FROM 'Tony Parker' OVER like BIDIRECT YIELD DISTINCT like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Manu Ginobili\"]", "[\"Boris Diaw\"]", "[\"LaMarcus Aldridge\"]", "[\"Dejounte Murray\"]", "[\"Tim Parker\"]", "[\"Danny Green\"]", "[\"Chris Paul\"]", "[\"Rudy Gay\"]", "[\"Tony Parker\"]", "[\"Tiago Splitter\"]", "[\"Damian Lillard\"]", "[\"Russell Westbrook\"]", "[\"James Harden\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Aron Baynes\"]", "[\"LeBron James\"]", "[\"Shaquille O'Neal\"]"]}
{"prompt": "Hello, could you please help me find out what players over the age of 20 like or indirectly like, as well as their relationships?", "content": "match p= (v:player)-[e:like*1..2]->(d) where v.player.age > 20 return e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\"), (\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\"), (\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 70}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Vince Carter\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\")]]", "[[(\"Paul Gasol\")-[:like@0{likeness: 99}]->(\"Marc Gasol\"), (\"Marc Gasol\")-[:like@0{likeness: 99}]->(\"Paul Gasol\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\"), (\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\")]]", "[[(\"Kyrie Irving\")-[:like@0{likeness: 13}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\")]]", "[[(\"Ray Allen\")-[:like@0{likeness: 9}]->(\"Rajon Rondo\"), (\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\"), (\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\"), (\"Paul George\")-[:like@0{likeness: 95}]->(\"Russell Westbrook\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\"), (\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\"), (\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\"), (\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\")]]", "[[(\"Joel Embiid\")-[:like@0{likeness: 80}]->(\"Ben Simmons\"), (\"Ben Simmons\")-[:like@0{likeness: 80}]->(\"Joel Embiid\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Dirk Nowitzki\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 80}]->(\"James Harden\")]]", "[[(\"Kristaps Porzingis\")-[:like@0{likeness: 90}]->(\"Luka Doncic\"), (\"Luka Doncic\")-[:like@0{likeness: 90}]->(\"Kristaps Porzingis\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 80}]->(\"LeBron James\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"James Harden\")]]", "[[(\"James Harden\")-[:like@0{likeness: 80}]->(\"Russell Westbrook\"), (\"Russell Westbrook\")-[:like@0{likeness: 90}]->(\"Paul George\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 100}]->(\"JaVale McGee\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\")]]", "[[(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Tracy McGrady\"), (\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 90}]->(\"Amar'e Stoudemire\"), (\"Amar'e Stoudemire\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 10}]->(\"Dwyane Wade\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Jason Kidd\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 88}]->(\"Dirk Nowitzki\"), (\"Dirk Nowitzki\")-[:like@0{likeness: 80}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 85}]->(\"Dirk Nowitzki\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 90}]->(\"Steve Nash\")]]", "[[(\"Steve Nash\")-[:like@0{likeness: 85}]->(\"Jason Kidd\"), (\"Jason Kidd\")-[:like@0{likeness: 80}]->(\"Vince Carter\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Chris Paul\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\"), (\"Carmelo Anthony\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Carmelo Anthony\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"Dwyane Wade\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"Chris Paul\"), (\"Chris Paul\")-[:like@0{likeness: 90}]->(\"LeBron James\")]]", "[[(\"Dwyane Wade\")-[:like@0{likeness: 90}]->(\"LeBron James\"), (\"LeBron James\")-[:like@0{likeness: 100}]->(\"Ray Allen\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Klay Thompson\")-[:like@0{likeness: 90}]->(\"Stephen Curry\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]]", "[[(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]]", "[[(\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]]"]}
{"prompt": "Hey, can you help me find information about the player 'Paul Gasol'? I want to know the names of all the teams he has played for.", "content": "MATCH (v)-[:serve]->(t)\nWHERE (NOT NOT id(v) == 'Paul Gasol') AND id(v) == 'Paul Gasol'\nRETURN v.player.name AS Name, t.team.name AS Team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Bucks\"]", "[\"Paul Gasol\", \"Bulls\"]", "[\"Paul Gasol\", \"Grizzlies\"]", "[\"Paul Gasol\", \"Lakers\"]", "[\"Paul Gasol\", \"Spurs\"]"]}
{"prompt": "得了高血压推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='高血压' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"清盐菜花\"]', '[\"灵芝羹\"]', '[\"素熘菜花\"]', '[\"胡萝卜粥\"]', '[\"芹菜粥\"]', '[\"葛根粉粥\"]', '[\"香脆芹菜叶\"]']"}
{"prompt": "Hello, could you help me find the name attributes of a team named 'Spurs'?", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "得了戊型病毒性肝炎应该做哪些检查？", "content": "GO FROM \"戊型病毒性肝炎\" OVER need_check YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"戊型肝炎抗体（抗-HEIgM）\"]', '[\"抗戊型肝炎病毒IgG抗体\"]', '[\"抗戊型肝炎病毒IgM抗体\"]', '[\"抗戊型肝炎病毒抗体\"]', '[\"肝脏疾病超声诊断\"]']"}
{"prompt": "Returns the name of a player named 'Antetokounmpo'.", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "奥拉·奎尔克是哪个学院的？", "content": "MATCH (n:character{name:'奥拉·奎尔克'})-[e:learn_from]-(n1:college) return n1.college.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"拉文克劳学院\"]']"}
{"prompt": "Hey, can you help me find those players who have been liked by other players? I want to know their names.", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "返回卢卡斯·皮奎利周边最多二跳关系的子图？", "content": "GET SUBGRAPH 2 STEPS FROM \"卢卡斯·皮奎利\" YIELD VERTICES AS nodes, EDGES AS relationships;", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[[(\"卢卡斯·皮奎利\" :character{})], [(\"卢卡斯·皮奎利\")-[:kindred@0{}]->(\"瑟拉菲娜·皮奎利\"), (\"卢卡斯·皮奎利\")-[:belong_to@0{}]->(\"美国魁地奇国家队\"), (\"瑟拉菲娜·皮奎利\")-[:kindred@0{}]->(\"卢卡斯·皮奎利\")]]', '[[(\"瑟拉菲娜·皮奎利\" :character{}), (\"美国魁地奇国家队\" :group{})], [(\"瑟拉菲娜·皮奎利\")-[:belong_to@0{}]->(\"伊尔弗莫尼魔法学校\"), (\"瑟拉菲娜·皮奎利\")-[:belong_to@0{}]->(\"皮奎利家族\"), (\"瑟拉菲娜·皮奎利\")-[:belong_to@0{}]->(\"美国魔法国会\"), (\"瑟拉菲娜·皮奎利\")-[:belong_to@0{}]->(\"长角水蛇学院\"), (\"瑟拉菲娜·皮奎利\")-[:learn_from@0{}]->(\"长角水蛇学院\"), (\"苏珊·布兰奇弗劳尔\")-[:belong_to@0{}]->(\"美国魁地奇国家队\"), (\"阿森尼娅·冈萨雷斯\")-[:belong_to@0{}]->(\"美国魁地奇国家队\"), (\"马克西·布兰奇三世\")-[:belong_to@0{}]->(\"美国魁地奇国家队\"), (\"默西·沃德韦尔\")-[:belong_to@0{}]->(\"美国魁地奇国家队\")]]', '[[(\"皮奎利家族\" :group{}), (\"苏珊·布兰奇弗劳尔\" :character{}), (\"默西·沃德韦尔\" :character{}), (\"马克西·布兰奇三世\" :character{}), (\"伊尔弗莫尼魔法学校\" :group{}), (\"美国魔法国会\" :group{}), (\"阿森尼娅·冈萨雷斯\" :character{}), (\"长角水蛇学院\" :college{} :group{})], []]']"}
{"prompt": "多少种病能够通过手术治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'手术治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[2781]']"}
{"prompt": "得了戊型病毒性肝炎的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"戊型病毒性肝炎\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.0035%\"]']"}
{"prompt": "Hello, could you please help me identify all the things' Tim Duncan 'likes and provide a de duplication of the relationship attributes between these things and the relationship itself?", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "塞德瑞拉·布莱克的姐姐是谁？", "content": "MATCH (n:character{name:'塞德瑞拉·布莱克'})-[e]-(n1) WHERE e.rel_type=='姐姐' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"卡莉朵拉·布莱克\" :character{marital: \"已婚\", name: \"卡莉朵拉·布莱克\", dead: \"\", born: \"1915年\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]', '[(\"卡斯帕·克劳奇\" :character{marital: \"已婚\", name: \"卡斯帕·克劳奇\", dead: \"早于1995年\", born: \"\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"男\"})]', '[(\"查莉丝·布莱克\" :character{marital: \"已婚\", name: \"查莉丝·布莱克\", dead: \"1973年(54岁)\", born: \"1919\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "Find all the entities that a player named 'Tracy McGrady' likes', with a liking level of 90, and return the relationships between these entities.", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "老年人支气管扩张的主要症状是什么？", "content": "MATCH (n:disease{name:\"老年人支气管扩张\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "Hello, please help me find the players who joined the team in 2001 and the names of the teams they belong to.", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "Can you help me identify entities related to 'Kobe Bryant'? I want to know the entity that has a 'like' relationship with him, and the distance is not more than two steps. Can you tell me the names of these entities?", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "Find all entities and their relationships that a player named 'Joseph' likes and return the paths of these entities and relationships.", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Returns path information for a maximum of three reverse 'like' relationship from 'Tim Duncan' to 'Tony Parker'.", "content": "FIND NOLOOP PATH FROM \"Tim Duncan\" TO \"Tony Parker\" OVER like REVERSELY UPTO 3 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"LaMarcus Aldridge\" )<-[:like@0{}]-(\"Tony Parker\" )]", "[(\"Tim Duncan\" )<-[:like@0{}]-(\"Manu Ginobili\" )<-[:like@0{}]-(\"Tony Parker\" )]"]}
{"prompt": "高血压的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"15.8%\"]']"}
{"prompt": "找出Tony Parker所喜欢的球员中在Spurs队效力的球员，最后返回路径中的所有节点。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "能帮我返回温廷汉姆到卢克丽霞·布莱克的最短路径吗？", "content": "FIND SHORTEST PATH FROM \"赫尔曼·温廷汉姆\" TO \"卢克丽霞·布莱克\" OVER * YIELD path AS p", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "Obtain the relationship properties of 'Tony Parker' liking 'Tim Duncan' and 'Grant Hill' liking 'Tracy McGrady' and return these properties.", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
{"prompt": "Could you please help me check the names and nodes of all the players?", "content": "match (v:player) return v.player.name, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", (\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[\"Dejounte Murray\", (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[\"Grant Hill\", (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[\"Manu Ginobili\", (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[\"Marc Gasol\", (\"Marc Gasol\" :player{age: 34, name: \"Marc Gasol\"})]", "[\"Nobody\", (\"Nobody\" :player{age: 0, name: \"Nobody\"})]", "[\"Rajon Rondo\", (\"Rajon Rondo\" :player{age: 33, name: \"Rajon Rondo\"})]", "[\"Amar'e Stoudemire\", (\"Amar'e Stoudemire\" :player{age: 36, name: \"Amar'e Stoudemire\"})]", "[\"David West\", (\"David West\" :player{age: 38, name: \"David West\"})]", "[\"Jason Kidd\", (\"Jason Kidd\" :player{age: 45, name: \"Jason Kidd\"})]", "[\"Kyrie Irving\", (\"Kyrie Irving\" :player{age: 26, name: \"Kyrie Irving\"})]", "[\"LeBron James\", (\"LeBron James\" :player{age: 34, name: \"LeBron James\"})]", "[\"Luka Doncic\", (\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]", "[\"Paul Gasol\", (\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[\"Paul George\", (\"Paul George\" :player{age: 28, name: \"Paul George\"})]", "[\"Tony Parker\", (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[\"Vince Carter\", (\"Vince Carter\" :player{age: 42, name: \"Vince Carter\"})]", "[\"Blake Griffin\", (\"Blake Griffin\" :player{age: 30, name: \"Blake Griffin\"})]", "[\"Chris Paul\", (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"})]", "[\"Kobe Bryant\", (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[\"NULL\", (\"Null3\" :player{age: -3, name: \"NULL\"})]", "[\"Shaquille O'Neal\", (\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"})]", "[\"Boris Diaw\", (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[\"Dwight Howard\", (\"Dwight Howard\" :player{age: 33, name: \"Dwight Howard\"})]", "[\"Dwyane Wade\", (\"Dwyane Wade\" :player{age: 37, name: \"Dwyane Wade\"})]", "[\"Giannis Antetokounmpo\", (\"Giannis Antetokounmpo\" :player{age: 24, name: \"Giannis Antetokounmpo\"})]", "[\"Jonathon Simmons\", (\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[\"Klay Thompson\", (\"Klay Thompson\" :player{age: 29, name: \"Klay Thompson\"})]", "[\"Steve Nash\", (\"Steve Nash\" :player{age: 45, name: \"Steve Nash\"})]", "[\"Aron Baynes\", (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[\"Damian Lillard\", (\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"})]", "[\"DeAndre Jordan\", (\"DeAndre Jordan\" :player{age: 30, name: \"DeAndre Jordan\"})]", "[\"JaVale McGee\", (\"JaVale McGee\" :player{age: 31, name: \"JaVale McGee\"})]", "[\"null\", (\"Null1\" :player{age: -1, name: \"null\"})]", "[\"Joel Embiid\", (\"Joel Embiid\" :player{age: 25, name: \"Joel Embiid\"})]", "[\"Kristaps Porzingis\", (\"Kristaps Porzingis\" :player{age: 23, name: \"Kristaps Porzingis\"})]", "[\"Rudy Gay\", (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[\"Cory Joseph\", (\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[\"James Harden\", (\"James Harden\" :player{age: 29, name: \"James Harden\"})]", "[\"Marco Belinelli\", (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[\"Null\", (\"Null2\" :player{age: -2, name: \"Null\"})]", "[\"Yao Ming\", (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"})]", "[\"Kevin Durant\", (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"})]", "[\"Kyle Anderson\", (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[\"Ricky Rubio\", (\"Ricky Rubio\" :player{age: 28, name: \"Ricky Rubio\"})]", "[\"Tracy McGrady\", (\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[\"Dirk Nowitzki\", (\"Dirk Nowitzki\" :player{age: 40, name: \"Dirk Nowitzki\"})]", "[\"__NULL__\", (\"Null4\" :player{age: -4, name: \"__NULL__\"})]", "[\"Ben Simmons\", (\"Ben Simmons\" :player{age: 22, name: \"Ben Simmons\"})]", "[\"Carmelo Anthony\", (\"Carmelo Anthony\" :player{age: 34, name: \"Carmelo Anthony\"})]", "[\"LaMarcus Aldridge\", (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[\"Ray Allen\", (\"Ray Allen\" :player{age: 43, name: \"Ray Allen\"})]", "[\"Russell Westbrook\", (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"})]", "[\"Stephen Curry\", (\"Stephen Curry\" :player{age: 31, name: \"Stephen Curry\"})]", "[\"Tiago Splitter\", (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[\"Tim Duncan\", (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]"]}
{"prompt": "找出年龄大于35岁的球员，统计他们的数量、年龄总和、最大年龄、最小年龄、平均年龄加1和标签，并按照id、数量、最大年龄、最小年龄排序，跳过前10个结果，返回20个结果。", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": " 你能帮我找一下，喜欢'Tim Duncan'这个球员的球员所在的球队吗？我想统计一下这些球队的球员数量。", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e1:like]->()-[e2:serve*0..3]->()<-[e3:serve]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[40]"]}
{"prompt": "贝内迪塔·多拉多是哪个学院的校长？", "content": "MATCH (n:character{name:'贝内迪塔·多拉多'})-[e:belong_to]-(n1:college) return n1.character.name", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "霍奇金病的药物推荐有哪些？", "content": "GO FROM \"霍奇金病\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"埃希\"]', '[\"欧文\"]', '[\"注射用重组人干扰素α2a\"]', '[\"紫杉醇注射液\"]', '[\"重组人干扰素α-2b注射液\"]']"}
{"prompt": "Find the shortest path of up to 3 jumps between player Tim Duncan and team Spurs, and return to that path.", "content": "MATCH p = allShortestPaths( (a:player)-[e:serve*..3]-(b:team) )\n  WHERE a.player.name == 'Tim Duncan' AND b.team.name == 'Spurs'\n  RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})-[:serve@0{end_year: 2016, start_year: 1997}]->(\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "尼古拉·韦尔斯是什么物种？", "content": "MATCH (n:character{name:'尼古拉·韦尔斯'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"人类\"]']"}
{"prompt": "请问您能帮我查找一下，Tracy McGrady喜欢的球员是谁，然后再找出这些球员所喜欢的球员的ID吗？\n帮我查一下，Tracy McGrady喜欢的球员是谁，然后再找出这些球员所喜欢的球员的ID。\n您好，我想请您帮我查找一下，Tracy McGrady喜欢的球员是谁，然后再找出这些球员所喜欢的球员的ID，可以吗？", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "芙蓉·德拉库尔的女儿有哪些？", "content": "MATCH (n:character)-[e:kindred{rel_type:'女儿'}]-(n1) WHERE n.character.name=='芙蓉·德拉库尔' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"多米尼克·韦斯莱\" :character{marital: \"\", name: \"多米尼克·韦斯莱\", dead: \"\", born: \"2000年代英国或法国\", blood: \"混血媚娃\", species: \"人类 (有媚娃血统)\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "请问您能帮我查找一下，关于'Tim'喜欢的实体以及与之相关的2-3层关系吗？", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Can you help me identify the relationships with all the entities that Tim Duncan likes? I need to obtain the de duplication attributes of these relationships and the relationships themselves.", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "弗雷德·韦斯莱从属于哪个组织？", "content": "MATCH (n:character{name:'弗雷德·韦斯莱'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"凤凰社\" :group{name: \"凤凰社\"})]', '[(\"普威特家族\" :group{name: \"普威特家族\"})]', '[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]', '[(\"格兰芬多魁地奇球队\" :group{name: \"格兰芬多魁地奇球队\"})]', '[(\"波特瞭望站\" :group{name: \"波特瞭望站\"})]', '[(\"邓布利多军\" :group{name: \"邓布利多军\"})]', '[(\"韦斯莱家族\" :group{name: \"韦斯莱家族\"})]', '[(\"韦斯莱魔法把戏坊\" :group{name: \"韦斯莱魔法把戏坊\"})]']"}
{"prompt": "Returns the name of a player named 'Giannis Antetokounmpo'.", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "餐后血糖过低症的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"餐后血糖过低症\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"8-12周\"]']"}
{"prompt": "请问您能帮我查找一下'Jason Kidd'球员的姓名和年龄属性吗？", "content": "FETCH PROP ON player \"Jason Kidd\" YIELD player.name, player.age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Jason Kidd\", 45]"]}
{"prompt": "Hello, could you help me find players that other players like and tell me their names?", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "返回与名为'Rudy Gay'的球员有直接或间接服务关系的球员的名称。", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "与雷古勒斯·布莱克具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"雷古勒斯·布莱克\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"伊尔玛·克拉布\"]', '[\"卢修斯·马尔福\"]', '[\"唐克斯家族\"]', '[\"奥赖恩·布莱克\"]', '[\"小天狼星·布莱克\"]', '[\"尼法朵拉·唐克斯\"]', '[\"布莱克家族\"]', '[\"帕勒克斯·布莱克\"]', '[\"德拉科·马尔福\"]', '[\"德鲁埃拉·罗齐尔\"]', '[\"沃尔布加·布莱克\"]', '[\"泰德·唐克斯\"]', '[\"泰迪·卢平\"]', '[\"纳西莎·马尔福\"]', '[\"罗道夫斯·莱斯特兰奇\"]', '[\"罗齐尔家族\"]', '[\"莱姆斯·卢平\"]', '[\"西格纳斯·布莱克三世\"]', '[\"贝拉特里克斯·莱斯特兰奇\"]', '[\"阿尔法德·布莱克\"]', '[\"雷古勒斯·布莱克\"]', '[\"伊尔玛·克拉布\"]', '[\"伊格内修斯·普威特\"]', '[\"卢克丽霞·布莱克\"]', '[\"奥赖恩·布莱克\"]', '[\"安多米达·唐克斯\"]', '[\"帕勒克斯·布莱克\"]', '[\"德鲁埃拉·罗齐尔\"]', '[\"梅拉尼娅·麦克米兰\"]', '[\"沃尔布加·布莱克\"]', '[\"纳西莎·马尔福\"]', '[\"菲尼亚斯·奈杰勒斯·布莱克\"]', '[\"西格纳斯·布莱克三世\"]', '[\"贝拉特里克斯·莱斯特兰奇\"]', '[\"阿克图勒斯·布莱克三世\"]', '[\"阿尔法德·布莱克\"]', '[\"雷古勒斯·布莱克\"]', '[\"亚瑟·韦斯莱\"]', '[\"卢克丽霞·布莱克\"]', '[\"吉迪翁·普威特\"]', '[\"奥赖恩·布莱克\"]', '[\"小天狼星·布莱克\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"梅拉尼娅·麦克米兰\"]', '[\"穆丽尔\"]', '[\"莫丽·韦斯莱\"]', '[\"费比安·普威特\"]', '[\"阿克图勒斯·布莱克三世\"]', '[\"雷古勒斯·布莱克\"]', '[\"韦斯莱家的孩子\"]', '[\"伊尔玛·克拉布\"]', '[\"卢修斯·马尔福\"]', '[\"安多米达·唐克斯\"]', '[\"小天狼星·布莱克\"]', '[\"尼法朵拉·唐克斯\"]', '[\"布莱克家族\"]', '[\"帕勒克斯·布莱克\"]', '[\"德拉科·马尔福\"]', '[\"德鲁埃拉·罗齐尔\"]', '[\"拉巴斯坦·莱斯特兰奇\"]', '[\"泰德·唐克斯\"]', '[\"罗道夫斯·莱斯特兰奇\"]', '[\"罗齐尔家族\"]', '[\"西格纳斯·布莱克三世\"]', '[\"贝拉特里克斯·莱斯特兰奇\"]', '[\"雷古勒斯·布莱克\"]', '[\"伊尔玛·克拉布\"]', '[\"奥赖恩·布莱克\"]', '[\"安多米达·唐克斯\"]', '[\"小天狼星·布莱克\"]', '[\"帕勒克斯·布莱克\"]', '[\"德鲁埃拉·罗齐尔\"]', '[\"沃尔布加·布莱克\"]', '[\"纳西莎·马尔福\"]', '[\"西格纳斯·布莱克三世\"]', '[\"贝拉特里克斯·莱斯特兰奇\"]', '[\"雷古勒斯·布莱克\"]', '[\"伊格内修斯·普威特\"]', '[\"吉迪翁·普威特\"]', '[\"天狼星·布莱克二世\"]', '[\"奥赖恩·布莱克\"]', '[\"小天狼星·布莱克\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"梅拉尼娅·麦克米兰\"]', '[\"沃尔布加·布莱克\"]', '[\"海斯帕·甘普\"]', '[\"莫丽·韦斯莱\"]', '[\"莱克里丝·布莱克\"]', '[\"费比安·普威特\"]', '[\"阿克图勒斯·布莱克三世\"]', '[\"雷古勒斯·布莱克\"]', '[\"雷古勒斯·布莱克一世\"]', '[\"乌尔苏拉·弗林特\"]', '[\"卡莉朵拉·布莱克\"]', '[\"卡西欧佩娅·布莱克\"]', '[\"埃拉朵拉·布莱克\"]', '[\"塞德瑞拉·布莱克\"]', '[\"多瑞娅·布莱克\"]', '[\"天狼星·布莱克一世\"]', '[\"天狼星·布莱克二世\"]', '[\"帕勒克斯·布莱克\"]', '[\"查莉丝·布莱克\"]', '[\"海斯帕·甘普\"]', '[\"约拉·布莱克\"]', '[\"维奥莱塔·伯斯德\"]', '[\"莱克里丝·布莱克\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"菲尼亚斯·布莱克\"]', '[\"西格纳斯·布莱克二世\"]', '[\"贝尔维娜·布莱克\"]', '[\"赫伯特·博克\"]', '[\"阿克图勒斯·布莱克三世\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"雷古勒斯·布莱克一世\"]', '[\"马里厄斯·布莱克\"]', '[\"鲍勃·希钦斯\"]', '[\"伊尔玛·克拉布\"]', '[\"卢修斯·马尔福\"]', '[\"安多米达·唐克斯\"]', '[\"小天狼星·布莱克\"]', '[\"尼法朵拉·唐克斯\"]', '[\"布莱克家族\"]', '[\"帕勒克斯·布莱克\"]', '[\"德拉科·马尔福\"]', '[\"德鲁埃拉·罗齐尔\"]', '[\"拉巴斯坦·莱斯特兰奇\"]', '[\"泰德·唐克斯\"]', '[\"纳西莎·马尔福\"]', '[\"罗道夫斯·莱斯特兰奇\"]', '[\"罗齐尔家族\"]', '[\"莱斯特兰奇家族\"]', '[\"西格纳斯·布莱克三世\"]', '[\"雷古勒斯·布莱克\"]', '[\"伊尔玛·克拉布\"]', '[\"伊格内修斯·普威特\"]', '[\"卢克丽霞·布莱克\"]', '[\"天狼星·布莱克二世\"]', '[\"安多米达·唐克斯\"]', '[\"小天狼星·布莱克\"]', '[\"帕勒克斯·布莱克\"]', '[\"梅拉尼娅·麦克米兰\"]', '[\"沃尔布加·布莱克\"]', '[\"海斯帕·甘普\"]', '[\"纳西莎·马尔福\"]', '[\"莱克里丝·布莱克\"]', '[\"西格纳斯·布莱克三世\"]', '[\"贝拉特里克斯·莱斯特兰奇\"]', '[\"阿克图勒斯·布莱克三世\"]', '[\"阿尔法德·布莱克\"]', '[\"雷古勒斯·布莱克\"]', '[\"雷古勒斯·布莱克一世\"]', '[\"伊尔玛·克拉布\"]', '[\"克拉布家族\"]', '[\"卡西欧佩娅·布莱克\"]', '[\"卢克丽霞·布莱克\"]', '[\"多瑞娅·布莱克\"]', '[\"奥赖恩·布莱克\"]', '[\"安多米达·唐克斯\"]', '[\"小天狼星·布莱克\"]', '[\"布莱克家族\"]', '[\"帕勒克斯·布莱克\"]', '[\"德鲁埃拉·罗齐尔\"]', '[\"查勒斯·波特\"]', '[\"纳西莎·马尔福\"]', '[\"维奥莱塔·伯斯德\"]', '[\"西格纳斯·布莱克三世\"]', '[\"西格纳斯·布莱克二世\"]', '[\"贝拉特里克斯·莱斯特兰奇\"]', '[\"阿克图勒斯·布莱克\"]', '[\"阿尔法德·布莱克\"]', '[\"阿拉明塔·梅利弗伦·布莱克\"]', '[\"雷古勒斯·布莱克\"]', '[\"马里厄斯·布莱克\"]']"}
{"prompt": "塞蒂娜·沃贝克的第二任丈夫的前妻是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'前妻'}]-(n1) WHERE n.character.name=='塞蒂娜·沃贝克的第二任丈夫' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"塞蒂娜·沃贝克\" :character{marital: \"已婚\", name: \"塞蒂娜·沃贝克\", dead: \"\", born: \"1917年8月18日威尔士\", blood: \"混血统\", species: \"人类\", height: \"\", hair: \"黑色\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "与乔治·韦斯莱具有两跳亲属关系的人有哪些？", "content": "GO 2 STEPS FROM \"乔治·韦斯莱\" OVER kindred YIELD dst(edge)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"亚瑟·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"露西·韦斯莱\"]', '[\"乌尔苏拉·弗林特\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"卡斯帕·克劳奇\"]', '[\"卡莉朵拉·布莱克\"]', '[\"哈方·隆巴顿\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"天狼星·布莱克一世\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"查莉丝·布莱克\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莫丽·普威特\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"菲尼亚斯·奈杰勒斯·布莱克\"]', '[\"菲尼亚斯·布莱克\"]', '[\"西格纳斯·布莱克二世\"]', '[\"贝尔维娜·布莱克\"]', '[\"金妮·韦斯莱\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"卡斯帕·克劳奇\"]', '[\"卡莉朵拉·布莱克\"]', '[\"哈方·隆巴顿\"]', '[\"塞德瑞拉·布莱克\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"查莉丝·布莱克\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莫丽·普威特\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"金妮·韦斯莱\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊格内修斯·普威特\"]', '[\"卢克丽霞·布莱克\"]', '[\"吉迪翁·普威特\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"比利尔斯\"]', '[\"穆丽尔\"]', '[\"莫丽·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊万斯先生\"]', '[\"伊万斯夫人\"]', '[\"伊格诺图斯·佩弗利尔\"]', '[\"佩妮·德思礼\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"尤菲米娅·波特\"]', '[\"弗农·德思礼\"]', '[\"弗利蒙·波特\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德思礼夫人\"]', '[\"斯廷奇库姆的林弗雷德\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"汤姆·里德尔\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易斯·韦斯莱\"]', '[\"达力·德思礼\"]', '[\"达力的孩子\"]', '[\"金妮·波特\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"加布丽·德拉库尔\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德拉库尔先生\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿波琳·德拉库尔\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"詹姆·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"莱桑德拉·亚克斯利\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿克图勒斯·布莱克二世\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫托克·达格沃斯-格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"格兰杰先生\"]', '[\"格兰杰夫人\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"泰丝\"]', '[\"珀西·韦斯莱\"]', '[\"穆丽尔\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱二世\"]', '[\"莫丽·韦斯莱，原姓普威特\"]', '[\"詹姆·小天狼星·波特\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"伊格内修斯·普威特\"]', '[\"卢克丽霞·布莱克\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"比利尔斯\"]', '[\"穆丽尔\"]', '[\"莫丽·韦斯莱\"]', '[\"费比安·普威特\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"加布丽·德拉库尔\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"德拉库尔先生\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"莫丽·韦斯莱二世\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"阿波琳·德拉库尔\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"韦斯莱家族\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"哈利·波特\"]', '[\"多米尼克·韦斯莱\"]', '[\"奥黛丽·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱\"]', '[\"查理·韦斯莱\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"维克托娃·韦斯莱\"]', '[\"罗丝·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莉莉·卢娜·波特\"]', '[\"莫丽·韦斯莱\"]', '[\"詹姆·小天狼星·波特\"]', '[\"赫敏·格兰杰\"]', '[\"路易·韦斯莱\"]', '[\"金妮·韦斯莱\"]', '[\"阿不思·西弗勒斯·波特\"]', '[\"雨果·韦斯莱\"]', '[\"露西·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"吉迪翁·普威特\"]', '[\"哈利·波特\"]', '[\"塞德瑞拉·布莱克\"]', '[\"塞普蒂默斯·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"普威特先生\"]', '[\"普威特夫人\"]', '[\"查理·韦斯莱\"]', '[\"比利尔斯\"]', '[\"比尔·韦斯莱\"]', '[\"珀西·韦斯莱\"]', '[\"罗克珊·韦斯莱\"]', '[\"罗恩·韦斯莱\"]', '[\"芙蓉·德拉库尔\"]', '[\"莫丽·韦斯莱\"]', '[\"费比安·普威特\"]', '[\"赫敏·格兰杰\"]', '[\"金妮·韦斯莱\"]', '[\"乔治·韦斯莱\"]', '[\"亚瑟·韦斯莱\"]', '[\"安吉利娜·约翰逊\"]', '[\"安吉利娜·约翰逊的父亲\"]', '[\"弗雷德·韦斯莱\"]', '[\"弗雷德·韦斯莱二世\"]', '[\"莫丽·韦斯莱\"]']"}
{"prompt": "您好，请帮我查找一下与球员'Rudy Gay'相关的边类型及数量好吗？", "content": "MATCH (v:player{name: 'Rudy Gay'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 1]", "[\"serve\", 4]"]}
{"prompt": "Hello, please help me identify the relationships between all players who have a -1 liking level with other players.", "content": "match (v:player)-[e:like{likeness:-1}]->()  RETURN e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Blake Griffin\")-[:like@0{likeness: -1}]->(\"Chris Paul\")]", "[(\"Rajon Rondo\")-[:like@0{likeness: -1}]->(\"Ray Allen\")]"]}
{"prompt": "找出与 'Manu Ginobili' 有 '喜欢' 或 '队友' 关系,若是 '喜欢' 则要求程度大于90的实体，返回这些实体的 '喜欢' 程度、与 'Manu Ginobili' 的队友关系开始年份以及实体名称。", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "找出名为'Tim Duncan'的球员与其他球员互相喜欢的关系，返回这些关系的喜欢程度。", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "冈希尔达·尼恩的丈夫是谁？", "content": "MATCH (n:character)-[e:kindred{rel_type:'丈夫'}]-(n1) WHERE n.character.name=='冈希尔达·尼恩' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "找出ID为'Tim Duncan'的球员所喜欢的实体路径数量并返回。", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "查找'Tim'所喜欢的所有实体，包括2-3层关系，返回关系和实体。", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": " 您好，请帮我查找一下，从'Tim Duncan'这个人开始，往外扩展1到4步，找到每个边之间的'喜欢程度'和边的信息。谢谢！", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "Hello, please help me find players over the age of 30.5 and give me their ID and age.", "content": "LOOKUP ON player WHERE player.age > 30.5 YIELD id(vertex) as name, player.age AS Age", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 40]", "[\"Tracy McGrady\", 39]", "[\"Stephen Curry\", 31]", "[\"LaMarcus Aldridge\", 33]", "[\"Carmelo Anthony\", 34]", "[\"Tiago Splitter\", 34]", "[\"Tim Duncan\", 42]", "[\"Ray Allen\", 43]", "[\"LeBron James\", 34]", "[\"Amar'e Stoudemire\", 36]", "[\"Tony Parker\", 36]", "[\"David West\", 38]", "[\"Paul Gasol\", 38]", "[\"Vince Carter\", 42]", "[\"Jason Kidd\", 45]", "[\"Danny Green\", 31]", "[\"Rajon Rondo\", 33]", "[\"Marc Gasol\", 34]", "[\"Manu Ginobili\", 41]", "[\"Grant Hill\", 46]", "[\"Chris Paul\", 33]", "[\"Kobe Bryant\", 40]", "[\"Shaquille O'Neal\", 47]", "[\"JaVale McGee\", 31]", "[\"Aron Baynes\", 32]", "[\"Dwight Howard\", 33]", "[\"Boris Diaw\", 36]", "[\"Dwyane Wade\", 37]", "[\"Steve Nash\", 45]", "[\"Rudy Gay\", 32]", "[\"Marco Belinelli\", 32]", "[\"Yao Ming\", 38]"]}
{"prompt": "返回名为'Giannis Antetokounmpo'的球员的姓名。", "content": "MATCH (v:player{name:\"Giannis Antetokounmpo\"}) RETURN v.name AS vname", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__NULL__]"]}
{"prompt": "获取球队 'Spurs' 的名称。", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "Hello, please help me find someone who has a close and friendly relationship with 'Manu Ginobili' or his teammates. If it is a liking relationship, can you filter out entities with a liking level greater than 90 and provide their liking level, start year, and name. Thank you!", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "Hey, can you help me find players over 35 years old? Then count their number, total age, maximum age, minimum age, and average age plus 1, as well as their labels. Finally, sort by ID, quantity, maximum age, and minimum age, skip the previous 10 results, and return 20 results to me.", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "您好，请帮我找出与 'Tracy McGrady' 有 '喜欢' 关系的所有实体，并返回它们的 ID。", "content": "GO FROM \"Tracy McGrady\" OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Grant Hill\"]", "[\"Kobe Bryant\"]", "[\"Rudy Gay\"]"]}
{"prompt": "您好，请帮我找出 'Russell Westbrook' 所 '服务' 和 '喜欢' 的所有实体，并返回它们的 ID。", "content": "GO FROM 'Russell Westbrook' OVER serve, like YIELD serve._dst, like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Thunders\", __EMPTY__]", "[__EMPTY__, \"James Harden\"]", "[__EMPTY__, \"Paul George\"]"]}
{"prompt": "Identify the entities connected to 'Tim Duncan' through a 'like' relationship, and then identify the entities connected through a 'service' relationship among these entities, and return the IDs of these entities.", "content": "GO 1 STEPS FROM 'Tim Duncan' OVER like YIELD like._dst as id | GO FROM $-.id OVER serve YIELD serve._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]", "[\"Hornets\"]", "[\"Spurs\"]"]}
{"prompt": "上巴恩顿的汉吉斯是什么物种？", "content": "MATCH (n:character{name:'上巴恩顿的汉吉斯'}) return n.character.species", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"巨人\"]']"}
{"prompt": "Can you help me identify entities that have a liking relationship with 'Kobe Bryant'? Then return the names of these entities to me, including those connected through a two-step path.", "content": "GO 2 STEPS FROM 'Kobe Bryant' OVER like REVERSELY YIELD $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Marc Gasol\"]", "[\"Grant Hill\"]", "[\"Vince Carter\"]", "[\"Yao Ming\"]"]}
{"prompt": "Find all the entities that the player named 'Tony Parker' likes and return them.", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "您好，请帮我查找一下与 'Paul Gasol' 有关的喜欢、服务和队友关系的所有实体，并返回它们的 ID。", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "宾利的婚姻状况是什么？", "content": "LOOKUP ON character WHERE character.name=='宾利' YIELD properties(vertex).marital AS marital", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"已婚\"]']"}
{"prompt": "Starting from the entity of 'Tim Duncan', traverse 1 to 4 steps outward along the 'like' relationship to return the 'like degree' and edge information of the edge.", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "Hello, please help me find the shortest path from 'Yao Ming' to 'Tony Parker'. The path should include likes and service relationships, and go through a maximum of 5 steps. Then provide me with the path information.", "content": "YIELD \"Yao Ming\" AS src, \"Tony Parker\" AS dst\n| FIND SHORTEST PATH FROM $-.src TO $-.dst OVER like, serve UPTO 5 STEPS YIELD path as p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Yao Ming\" )-[:like@0{}]->(\"Shaquille O'Neal\" )-[:like@0{}]->(\"Tim Duncan\" )-[:like@0{}]->(\"Tony Parker\" )]"]}
{"prompt": "哈维·瑞吉比特的眼睛颜色是什么？", "content": "MATCH (n:character{name:'哈维·瑞吉比特'}) return n.character.eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"绿色\"]']"}
{"prompt": "找出ID为'Boris Diaw'的球员信息并返回。", "content": "MATCH (n:player) WHERE id(n) == \"Boris Diaw\" RETURN n;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "塞德瑞拉·布莱克的儿子是谁？", "content": "MATCH (n:character{name:'塞德瑞拉·布莱克'})-[e]-(n1) WHERE e.rel_type=='儿子' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"亚瑟·韦斯莱\" :character{marital: \"已婚\", name: \"亚瑟·韦斯莱\", dead: \"\", born: \"1950年2月6日英国或爱尔兰\", blood: \"纯血统\", species: \"人类\", height: \"\", hair: \"红色\", eye: \"\", gender: \"男\"})]']"}
{"prompt": "哈桑·穆斯塔发从属于哪些组织？", "content": "MATCH (n:character{name:'哈桑·穆斯塔发'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"国际魁地奇联合会\" :group{name: \"国际魁地奇联合会\"})]', '[(\"埃及\" :group{name: \"埃及\"})]']"}
{"prompt": "双向查找与 'Tim Duncan' 具有效力或喜欢关系的所有实体，并返回这些实体的去重后的 ID。", "content": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]", "[\"Tim Parker\"]", "[\"Manu Ginobili\"]", "[\"Spurs\"]"]}
{"prompt": "找出和博尔相关的三个人？", "content": "MATCH (n:character{name:'博尔'})-[e]-(n1) return n LIMIT 3", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"博尔\" :character{name: \"博尔\", marital: \"\", born: \"约1977年\", dead: \"\", blood: \"纯血统或混血统\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"黑色\"})]', '[(\"博尔\" :character{name: \"博尔\", marital: \"\", born: \"约1977年\", dead: \"\", blood: \"纯血统或混血统\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"黑色\"})]']"}
{"prompt": "Match the relationships between all players and their teammates.", "content": "MATCH (v:player) WITH (v)-[:teammate]->() AS p RETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[]]", "[[]]", "[[]]", "[[(\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2014, end_year: 2016}]->(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2015, end_year: 2018}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2002, end_year: 2018}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{name: \"Tony Parker\", age: 36})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[]]", "[[(\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2010, end_year: 2016}]->(\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2015, end_year: 2016}]->(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2002, end_year: 2016}]->(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"})-[:teammate@0{start_year: 2001, end_year: 2016}]->(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]]"]}
{"prompt": "Hey, can you help me identify entities over 38 years old, and what is the relationship and information between these entities and 'Tim Duncan'?", "content": "GO FROM 'Tim Duncan' OVER like WHERE properties($$).age > 38 YIELD edge as e,  $$ as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "Can you help me find the name of the 'Spurs' team?", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "找出名为'Damian Lillard'的球员所喜欢的所有实体，并返回这些实体的年龄信息，按年龄从小到大排序，返回前三个实体及其年龄。", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "找出 'Tim Duncan' 喜欢的所有实体，并返回这些实体之间的关系属性的去重和关系本身。", "content": "MATCH (v:player)-[e:like]->(v2)\nWHERE id(v) == \"Tim Duncan\"\nRETURN DISTINCT properties(e) as props, e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[star# this is the schema of this graph\\n# Nodes\\nclass Tag():\\n    def __init__(self,tag_name):\\n        self.tag_name=tag_name\\n\\nclass player(Tag):\\n    def __init__(self,vid,name:str,age:int):\\n        self.vid=vid\\n        self.name=name\\n        self.age=age\\n\\nclass team(Tag):\\n    def __init__(self,vid,name:str):\\n        self.vid=vid\\n        self.name=name\\n\\nclass bachelor(Tag):\\n    def __init__(self,vid,name:str,speciality:str):\\n        self.vid=vid\\n        self.name=name\\n        self.speciality=speciality\\n\\n# Edge\\nclass Edge():\\n    def __init__(self,edge_type_name):\\n        self.edge_type_name=edge_type_name\\n\\nclass like(Edge):\\n    def __init__(self,src_vid,dst_vid,likeness:int):\\n        self.src_vid=src_vid\\n        self.dst_vid=dst_vid\\n        self.likeness=likeness\\n\\nclass serve(Edge):\\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\\n        self.src_vid=src_vid\\n        self.dst_vid=dst_vid\\n        self.start_year=start_year\\n        self.end_year = end_year\\n\\nclass teammate(Edge):\\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\\n        self.src_vid=src_vid\\n        self.dst_vid=dst_vid\\n        self.start_year=start_year\\n        self.end_year = end_year# this is the schema of this graph\\n# Nodes\\nclass Tag():\\n    def __init__(self,tag_name):\\n        self.tag_name=tag_name\\n\\nclass player(Tag):\\n    def __init__(self,vid,name:str,age:int):\\n        self.vid=vid\\n        self.name=name\\n        self.age=age\\n\\nclass team(Tag):\\n    def __init__(self,vid,name:str):\\n        self.vid=vid\\n        self.name=name\\n\\nclass bachelor(Tag):\\n    def __init__(self,vid,name:str,speciality:str):\\n        self.vid=vid\\n        self.name=name\\n        self.speciality=speciality\\n\\n# Edge\\nclass Edge():\\n    def __init__(self,edge_type_name):\\n        self.edge_type_name=edge_type_name\\n\\nclass like(Edge):\\n    def __init__(self,src_vid,dst_vid,likeness:int):\\n        self.src_vid=src_vid\\n        self.dst_vid=dst_vid\\n        self.likeness=likeness\\n\\nclass serve(Edge):\\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\\n        self.src_vid=src_vid\\n        self.dst_vid=dst_vid\\n        self.start_year=start_year\\n        self.end_year = end_year\\n\\nclass teammate(Edge):\\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\\n        self.src_vid=src_vid\\n        self.dst_vid=dst_vid\\n        self.start_year=start_year\\n        self.end_year = end_yeart_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[{'likeness': 95}, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]"]}
{"prompt": "弗拉德·德拉库的儿子是谁？", "content": "MATCH (n:character{name:'弗拉德·德拉库'})-[e]-(n1) WHERE e.rel_type=='儿子' return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "[]"}
{"prompt": "找出名为 'Tony Parker' 的球员所 '喜欢' 的所有实体，并返回这些实体。", "content": "FETCH PROP ON player 'Tony Parker' YIELD player.name as Name |\nGO FROM $-.Name OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\"]", "[\"Manu Ginobili\"]", "[\"Tim Duncan\"]"]}
{"prompt": "Identify all time periods and team information that include 'Haw' in the team name served by 'Boris Diaw', and return the player name, start year, end year, and team name.", "content": "GO FROM 'Boris Diaw' OVER serve WHERE $$.team.name CONTAINS \"Haw\"\nYIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]"]}
{"prompt": "得了高血压推荐吃什么食物？", "content": "MATCH (n:disease)-[e:recommend_eat]->(n1:food) WHERE n.disease.name=='高血压' return n1.food.name", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"清盐菜花\"]', '[\"灵芝羹\"]', '[\"素熘菜花\"]', '[\"胡萝卜粥\"]', '[\"芹菜粥\"]', '[\"葛根粉粥\"]', '[\"香脆芹菜叶\"]']"}
{"prompt": "多少种病能够通过药物治疗方式治愈？", "content": "MATCH (n:disease)-[]->(n1:cure{name:'药物治疗'}) return count(n)", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[6905]']"}
{"prompt": "返回名为'Tim Duncan'的球员与其所有关系的类型和数量。", "content": "MATCH (v:player{name: 'Tim Duncan'})-[e]->() RETURN type(e), count(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"like\", 2]", "[\"serve\", 1]", "[\"teammate\", 4]"]}
{"prompt": "Can you help me identify the team names and related player names related to 'LaMarcus Aldridge'?", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "请问能帮我找出前两位球员的名字吗？还能按照名字属性进行排序吗？", "content": "match (v:player) return properties(v).name AS name order by name limit 2;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Aron Baynes\"]"]}
{"prompt": "罗恩·韦斯莱是哪个学院的？", "content": "MATCH (n:character{name:'罗恩·韦斯莱'})-[e:learn_from]-(n1:college) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]']"}
{"prompt": "嘿，我需要找出与名为'Dejounte'的人有喜欢关系的实体。按照年龄从大到小排序，姓名按照字母顺序排列。我想跳过前面的11个结果，只返回接下来的3个实体的姓名和年龄。能帮我做这个任务吗？", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "得了高血压应该去哪个科室就诊？", "content": "GO FROM \"高血压\" OVER cure_department YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"心内科\"]']"}
{"prompt": "蒂莉·托克从属于哪个组织？", "content": "MATCH (n:character{name:'蒂莉·托克'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"梅林爵士团\" :group{name: \"梅林爵士团\"})]']"}
{"prompt": "Hey, I need to identify entities that have a liking relationship with someone named 'Dejounte'. Sort by age, with names arranged in alphabetical order. I want to skip the previous 11 results and only return the names and ages of the next 3 entities. Can you help me with this task?", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Count the number of entities served or liked by a player named 'Irving', with a relationship distance of 2 to 3 hops.", "content": "MATCH (:player{name:\"Kyrie Irving\"})-[e:serve|like*2..3]-(v)\nRETURN count(v)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[159]"]}
{"prompt": "查看和高血压相关的所有信息？", "content": "GET SUBGRAPH 1 STEPS FROM \"高血压\" YIELD VERTICES AS nodes, EDGES AS all_edges", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[[(\"高血压\" :disease{})], [(\"高血压\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"高血压\")-[:no_eat@0{}]->(\"杏仁\"), (\"高血压\")-[:no_eat@0{}]->(\"腐竹\"), (\"高血压\")-[:no_eat@0{}]->(\"鸡肝\"), (\"高血压\")-[:need_check@0{}]->(\"动态血压监测(ABPM)\"), (\"高血压\")-[:need_check@0{}]->(\"心电图\"), (\"高血压\")-[:need_check@0{}]->(\"甘油三酯\"), (\"高血压\")-[:need_check@0{}]->(\"白细胞介素4（iL-4）\"), (\"高血压\")-[:need_check@0{}]->(\"紧张度与动脉壁状态\"), (\"高血压\")-[:need_check@0{}]->(\"红细胞聚集性\"), (\"高血压\")-[:need_check@0{}]->(\"血压\"), (\"高血压\")-[:need_check@0{}]->(\"血清白细胞介素3\"), (\"高血压\")-[:need_check@0{}]->(\"血管紧张素Ⅱ\"), (\"高血压\")-[:need_check@0{}]->(\"速尿激发试验\"), (\"高血压\")-[:recommend_drug@0{}]->(\"Ⅰ\"), (\"高血压\")-[:recommend_drug@0{}]->(\"二十五味珊瑚丸\"), (\"高血压\")-[:recommend_drug@0{}]->(\"卡维地洛片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"厄贝沙坦片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"吲达帕胺滴丸\"), (\"高血压\")-[:recommend_drug@0{}]->(\"回心康片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"复方天麻蜜环糖肽片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"替米沙坦片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"盐酸乐卡地平片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"盐酸拉贝洛尔片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"盐酸贝那普利片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"硝苯地平缓释片Ⅰ\"), (\"高血压\")-[:recommend_drug@0{}]->(\"缬沙坦胶囊\"), (\"高血压\")-[:recommend_drug@0{}]->(\"脑立清丸\"), (\"高血压\")-[:recommend_drug@0{}]->(\"苯磺酸氨氯地平胶囊\"), (\"高血压\")-[:recommend_drug@0{}]->(\"薯蓣皂苷片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"赖诺普利片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"马来酸依那普利片\"), (\"高血压\")-[:recommend_drug@0{}]->(\"马来酸氨氯地平片\"), (\"高血压\")-[:cure_department@0{}]->(\"心内科\"), (\"高血压\")-[:cure_way@0{}]->(\"手术治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高血压\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高血压\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"高血压\")-[:do_eat@0{}]->(\"松子仁\"), (\"高血压\")-[:do_eat@0{}]->(\"芝麻\"), (\"高血压\")-[:do_eat@0{}]->(\"鸡肉\"), (\"高血压\")-[:recommend_eat@0{}]->(\"清盐菜花\"), (\"高血压\")-[:recommend_eat@0{}]->(\"灵芝羹\"), (\"高血压\")-[:recommend_eat@0{}]->(\"素熘菜花\"), (\"高血压\")-[:recommend_eat@0{}]->(\"胡萝卜粥\"), (\"高血压\")-[:recommend_eat@0{}]->(\"芹菜粥\"), (\"高血压\")-[:recommend_eat@0{}]->(\"葛根粉粥\"), (\"高血压\")-[:recommend_eat@0{}]->(\"香脆芹菜叶\"), (\"高血压\")-[:has_symptom@0{}]->(\"乏力\"), (\"高血压\")-[:has_symptom@0{}]->(\"头晕\"), (\"高血压\")-[:has_symptom@0{}]->(\"头晕目眩\"), (\"高血压\")-[:has_symptom@0{}]->(\"心脏主动脉瓣返流\"), (\"高血压\")-[:has_symptom@0{}]->(\"眼花\"), (\"高血压\")-[:has_symptom@0{}]->(\"神经性呕吐\"), (\"高血压\")-[:has_symptom@0{}]->(\"血压高\"), (\"高血压\")-[:has_symptom@0{}]->(\"重压感、紧箍感...\"), (\"高血压\")-[:has_symptom@0{}]->(\"颈部搏动\"), (\"高血压\")-[:accompany_with@0{}]->(\"中风\"), (\"Ⅳ型肾小管性酸中毒\")-[:accompany_with@0{}]->(\"高血压\"), (\"三叉神经痛\")-[:accompany_with@0{}]->(\"高血压\"), (\"中风后遗症\")-[:accompany_with@0{}]->(\"高血压\"), (\"假性高血压\")-[:accompany_with@0{}]->(\"高血压\"), (\"单纯性肾囊肿\")-[:accompany_with@0{}]->(\"高血压\"), (\"厥阴头痛\")-[:accompany_with@0{}]->(\"高血压\"), (\"口腔疾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"吉兰-巴雷综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"吡唑酮类中毒\")-[:accompany_with@0{}]->(\"高血压\"), (\"吸烟中毒症\")-[:accompany_with@0{}]->(\"高血压\"), (\"咳嗽\")-[:accompany_with@0{}]->(\"高血压\"), (\"囊性肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"围绝经期综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"头风病\")-[:accompany_with@0{}]->(\"高血压\"), (\"妇女雄激素源性秃发\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并甲状旁腺功能亢进\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并红细胞增多症\")-[:accompany_with@0{}]->(\"高血压\"), (\"妊娠合并缺铁性贫血\")-[:accompany_with@0{}]->(\"高血压\"), (\"安卡性肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"家族性载脂蛋白B100缺陷症\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿先天性肾盂输尿管连接部梗阻\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿原发性膀胱输尿管反流\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿尿路感染\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿尿路梗阻\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿指甲-髌骨综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿狂犬病\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肝豆状核变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肾母细胞瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肾淀粉样变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿肾结核\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿膀胱-输尿管反流综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿过敏性紫癜肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:accompany_with@0{}]->(\"高血压\"), (\"小儿麻痹症\")-[:accompany_with@0{}]->(\"高血压\"), (\"左束支中隔支传导阻滞\")-[:accompany_with@0{}]->(\"高血压\"), (\"库欣综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾功能不全\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾小管坏死\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"急性肾炎综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"急进性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"恶性高血压性小动脉性肾硬化\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"慢性酒中毒\")-[:accompany_with@0{}]->(\"高血压\"), (\"新生儿急性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"新疆出血热\")-[:accompany_with@0{}]->(\"高血压\"), (\"更年期综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"未分化结缔组织病\")-[:accompany_with@0{}]->(\"高血压\"), (\"梗阻性肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"烟雾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"高血压\"), (\"狂犬病\")-[:accompany_with@0{}]->(\"高血压\"), (\"甲状旁腺功能亢进性心肌病\")-[:accompany_with@0{}]->(\"高血压\"), (\"痰浊眩晕\")-[:accompany_with@0{}]->(\"高血压\"), (\"短暂性脑缺血发作\")-[:accompany_with@0{}]->(\"高血压\"), (\"神经母细胞瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"糖尿病\")-[:accompany_with@0{}]->(\"高血压\"), (\"糖尿病性视网膜病变\")-[:accompany_with@0{}]->(\"高血压\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"高血压\"), (\"结节性多动脉炎性巩膜炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"缺血性结肠炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"羊水过少\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人吸入性肺炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人急性肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人痛风\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人肥胖症\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人脑出血\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年人颅内压增高\")-[:accompany_with@0{}]->(\"高血压\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"肝火眩晕\")-[:accompany_with@0{}]->(\"高血压\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"高血压\"), (\"肥胖性心肌病\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾上腺肿瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾上腺髓质增生\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾功能不全\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾功能衰竭\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾动脉狭窄\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾动脉瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾动脉血栓形成和栓塞\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾囊肿\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾癌\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾积水\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾胚胎瘤\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾虚\")-[:accompany_with@0{}]->(\"高血压\"), (\"肾阴虚\")-[:accompany_with@0{}]->(\"高血压\"), (\"胰岛素抵抗与代谢综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"胼胝体进行性变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"脂肪肝\")-[:accompany_with@0{}]->(\"高血压\"), (\"脊椎病\")-[:accompany_with@0{}]->(\"高血压\"), (\"脊髓灰质炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"脑出血\")-[:accompany_with@0{}]->(\"高血压\"), (\"良性高血压性小动脉性肾硬化\")-[:accompany_with@0{}]->(\"高血压\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:accompany_with@0{}]->(\"高血压\"), (\"薄肾小球基底膜病\")-[:accompany_with@0{}]->(\"高血压\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"高血压\"), (\"过敏性紫癜肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"遗传性肥胖\")-[:accompany_with@0{}]->(\"高血压\"), (\"酒中毒性小脑变性\")-[:accompany_with@0{}]->(\"高血压\"), (\"酒中毒性痴呆\")-[:accompany_with@0{}]->(\"高血压\"), (\"酒精中毒性神经疾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"镇痛剂肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"间质性肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"隐匿型肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"隐匿性肾小球肾炎\")-[:accompany_with@0{}]->(\"高血压\"), (\"青年人中的成年发病型糖尿病\")-[:accompany_with@0{}]->(\"高血压\"), (\"项痹\")-[:accompany_with@0{}]->(\"高血压\"), (\"高原性心脏病\")-[:accompany_with@0{}]->(\"高血压\"), (\"高原适应不全症\")-[:accompany_with@0{}]->(\"高血压\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"高血压\"), (\"高血压\")-[:common_drug@0{}]->(\"二十五味珊瑚丸\"), (\"高血压\")-[:common_drug@0{}]->(\"厄贝沙坦片\")]]', '[[(\"血压\" :check{}), (\"卡维地洛片\" :drug{}), (\"回心康片\" :drug{}), (\"赖诺普利片\" :drug{}), (\"中风后遗症\" :disease{}), (\"吡唑酮类中毒\" :disease{}), (\"头风病\" :disease{}), (\"妊娠合并缺铁性贫血\" :disease{}), (\"慢性肾小球肾炎\" :disease{}), (\"糖尿病性视网膜病变\" :disease{}), (\"红斑性肢痛症\" :disease{}), (\"结节性多动脉炎性巩膜炎\" :disease{}), (\"肾上腺肿瘤\" :disease{}), (\"肾上腺髓质增生\" :disease{}), (\"肾功能衰竭\" :symptom{} :disease{}), (\"肾动脉血栓形成和栓塞\" :disease{}), (\"蓝鼓膜与胆固醇肉芽肿\" :disease{}), (\"腐竹\" :food{}), (\"甘油三酯\" :check{}), (\"芝麻\" :food{}), (\"清盐菜花\" :food{}), (\"素熘菜花\" :food{}), (\"葛根粉粥\" :food{}), (\"妊娠合并甲状旁腺功能亢进\" :disease{}), (\"妊娠合并白血病\" :disease{}), (\"妊娠合并红细胞增多症\" :disease{}), (\"小儿尿路梗阻\" :disease{}), (\"小儿指甲-髌骨综合征\" :disease{}), (\"小儿肾母细胞瘤\" :disease{}), (\"小儿肾淀粉样变性\" :disease{}), (\"小儿阻塞性睡眠呼吸暂停\" :disease{}), (\"恶性高血压性小动脉性肾硬化\" :disease{}), (\"未分化结缔组织病\" :disease{}), (\"痰浊眩晕\" :disease{}), (\"老年人脑出血\" :disease{}), (\"老年人非霍奇金恶性淋巴肿瘤\" :disease{}), (\"胼胝体进行性变性\" :disease{}), (\"隐匿型肾炎\" :disease{}), (\"高原适应不全症\" :disease{}), (\"血清白细胞介素3\" :check{}), (\"速尿激发试验\" :check{}), (\"复方天麻蜜环糖肽片\" :drug{}), (\"盐酸拉贝洛尔片\" :drug{}), (\"支持性治疗\" :cure{}), (\"吉兰-巴雷综合征\" :disease{}), (\"妇女雄激素源性秃发\" :disease{}), (\"急性肾小球肾炎\" :disease{}), (\"狂犬病\" :disease{}), (\"老年肺炎\" :disease{}), (\"肾小球肾炎\" :disease{}), (\"镇痛剂肾病\" :disease{}), (\"吲达帕胺滴丸\" :drug{}), (\"马来酸依那普利片\" :drug{}), (\"马来酸氨氯地平片\" :drug{}), (\"药物治疗\" :cure{}), (\"胡萝卜粥\" :food{}), (\"血压高\" :symptom{}), (\"颈部搏动\" :symptom{}), (\"囊性肾病\" :disease{}), (\"小儿尿路感染\" :disease{}), (\"小儿慢性肾小球肾炎\" :disease{}), (\"库欣综合征\" :symptom{} :disease{}), (\"急性肾炎综合征\" :disease{}), (\"慢性酒中毒\" :disease{}), (\"新生儿急性肾功能衰竭\" :disease{}), (\"短暂性脑缺血发作\" :disease{}), (\"神经母细胞瘤\" :disease{}), (\"羊水过少\" :disease{}), (\"老年人吸入性肺炎\" :disease{}), (\"老年人急性肾功能衰竭\" :disease{}), (\"肾动脉狭窄\" :symptom{} :disease{}), (\"肾癌\" :disease{}), (\"酒中毒性小脑变性\" :disease{}), (\"间质性肾炎\" :disease{}), (\"项痹\" :disease{}), (\"心电图\" :check{}), (\"紧张度与动脉壁状态\" :check{}), (\"盐酸乐卡地平片\" :drug{}), (\"硝苯地平缓释片Ⅰ\" :drug{}), (\"脑立清丸\" :drug{}), (\"手术治疗\" :cure{}), (\"香脆芹菜叶\" :food{}), (\"三叉神经痛\" :disease{}), (\"安卡性肾炎\" :disease{}), (\"小儿膀胱-输尿管反流综合征\" :disease{}), (\"急性肾功能衰竭\" :disease{}), (\"缺血性结肠炎\" :disease{}), (\"脂肪肝\" :disease{}), (\"脑出血\" :disease{}), (\"酒中毒性痴呆\" :disease{}), (\"鸡肝\" :food{}), (\"心脏主动脉瓣返流\" :symptom{}), (\"眼花\" :symptom{}), (\"咳嗽\" :symptom{} :disease{}), (\"小儿过敏性紫癜肾炎\" :disease{}), (\"急性肾小管坏死\" :disease{}), (\"急性肾炎\" :disease{}), (\"梗阻性肾病\" :disease{}), (\"焦磷酸钙沉积病\" :disease{}), (\"肝火眩晕\" :disease{}), (\"肾囊肿\" :disease{}), (\"肾阴虚\" :disease{}), (\"脊髓灰质炎\" :disease{}), (\"良性高血压性小动脉性肾硬化\" :disease{}), (\"青年人中的成年发病型糖尿病\" :disease{}), (\"红细胞聚集性\" :check{}), (\"二十五味珊瑚丸\" :drug{}), (\"替米沙坦片\" :drug{}), (\"松子仁\" :food{}), (\"神经性呕吐\" :symptom{} :disease{}), (\"中风\" :disease{}), (\"小儿先天性肾盂输尿管连接部梗阻\" :disease{}), (\"小儿肝豆状核变性\" :disease{}), (\"左束支中隔支传导阻滞\" :disease{}), (\"新疆出血热\" :disease{}), (\"肾动脉瘤\" :disease{}), (\"肾积水\" :disease{}), (\"杏仁\" :food{}), (\"白细胞介素4（iL-4）\" :check{}), (\"厄贝沙坦片\" :drug{}), (\"心内科\" :department{}), (\"灵芝羹\" :food{}), (\"头晕目眩\" :symptom{}), (\"单纯性肾囊肿\" :disease{}), (\"吸烟中毒症\" :disease{}), (\"围绝经期综合征\" :disease{}), (\"小儿原发性膀胱输尿管反流\" :disease{}), (\"小儿麻痹症\" :disease{}), (\"甲状旁腺功能亢进性心肌病\" :disease{}), (\"老年人痛风\" :disease{}), (\"老年人颅内压增高\" :disease{}), (\"肥胖性心肌病\" :disease{}), (\"肾胚胎瘤\" :disease{}), (\"胰岛素抵抗与代谢综合征\" :disease{}), (\"脊椎病\" :disease{}), (\"薄肾小球基底膜病\" :disease{}), (\"酒精中毒性神经疾病\" :disease{}), (\"高原性心脏病\" :disease{}), (\"高尿酸血症肾病\" :disease{}), (\"咸鸭蛋\" :food{}), (\"血管紧张素Ⅱ\" :check{}), (\"盐酸贝那普利片\" :drug{}), (\"苯磺酸氨氯地平胶囊\" :drug{}), (\"乏力\" :symptom{}), (\"头晕\" :symptom{}), (\"Ⅳ型肾小管性酸中毒\" :disease{}), (\"小儿乙型肝炎病毒相关肾炎\" :disease{}), (\"小儿肾结核\" :disease{}), (\"急进性肾小球肾炎\" :disease{}), (\"慢性肾盂肾炎\" :disease{}), (\"老年人肥胖症\" :disease{}), (\"肾功能不全\" :disease{}), (\"血管性帕金森综合征\" :disease{}), (\"过敏性紫癜肾炎\" :disease{}), (\"隐匿性肾小球肾炎\" :disease{}), (\"动态血压监测(ABPM)\" :check{}), (\"Ⅰ\" :drug{}), (\"缬沙坦胶囊\" :drug{}), (\"薯蓣皂苷片\" :drug{}), (\"南瓜子仁\" :food{}), (\"鸡肉\" :food{}), (\"芹菜粥\" :food{}), (\"重压感、紧箍感...\" :symptom{}), (\"假性高血压\" :disease{}), (\"厥阴头痛\" :disease{}), (\"口腔疾病\" :disease{}), (\"家族性载脂蛋白B100缺陷症\" :disease{}), (\"小儿狂犬病\" :disease{}), (\"急性肾功能不全\" :disease{}), (\"慢性肾功能衰竭\" :disease{}), (\"更年期综合征\" :disease{}), (\"烟雾病\" :disease{}), (\"糖尿病\" :disease{}), (\"肢端肥大症\" :disease{}), (\"肾虚\" :disease{}), (\"遗传性肥胖\" :symptom{} :disease{})], [(\"中风后遗症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"中风后遗症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"吡唑酮类中毒\")-[:no_eat@0{}]->(\"杏仁\"), (\"吡唑酮类中毒\")-[:no_eat@0{}]->(\"鸡肝\"), (\"吡唑酮类中毒\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吡唑酮类中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"吡唑酮类中毒\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"头风病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"头风病\")-[:has_symptom@0{}]->(\"头晕\"), (\"妊娠合并缺铁性贫血\")-[:need_check@0{}]->(\"心电图\"), (\"妊娠合并缺铁性贫血\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并缺铁性贫血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并缺铁性贫血\")-[:do_eat@0{}]->(\"鸡肉\"), (\"妊娠合并缺铁性贫血\")-[:has_symptom@0{}]->(\"乏力\"), (\"妊娠合并缺铁性贫血\")-[:has_symptom@0{}]->(\"头晕\"), (\"慢性肾小球肾炎\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"慢性肾小球肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"慢性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"肾功能不全\"), (\"糖尿病性视网膜病变\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"糖尿病性视网膜病变\")-[:cure_way@0{}]->(\"手术治疗\"), (\"糖尿病性视网膜病变\")-[:cure_way@0{}]->(\"药物治疗\"), (\"糖尿病性视网膜病变\")-[:do_eat@0{}]->(\"鸡肉\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"红斑性肢痛症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"红斑性肢痛症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"结节性多动脉炎性巩膜炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"结节性多动脉炎性巩膜炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"结节性多动脉炎性巩膜炎\")-[:has_symptom@0{}]->(\"乏力\"), (\"肾上腺肿瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾上腺肿瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾上腺肿瘤\")-[:has_symptom@0{}]->(\"头晕\"), (\"肾上腺髓质增生\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"肾上腺髓质增生\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾上腺髓质增生\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾上腺髓质增生\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"肾上腺髓质增生\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾上腺髓质增生\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾功能衰竭\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾功能衰竭\")-[:do_eat@0{}]->(\"鸡肝\"), (\"肾动脉血栓形成和栓塞\")-[:need_check@0{}]->(\"心电图\"), (\"肾动脉血栓形成和栓塞\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾动脉血栓形成和栓塞\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:no_eat@0{}]->(\"杏仁\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:no_eat@0{}]->(\"腐竹\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:do_eat@0{}]->(\"鸡肉\"), (\"蓝鼓膜与胆固醇肉芽肿\")-[:recommend_eat@0{}]->(\"胡萝卜粥\"), (\"妊娠合并甲状旁腺功能亢进\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并甲状旁腺功能亢进\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:need_check@0{}]->(\"心电图\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并白血病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并白血病\")-[:do_eat@0{}]->(\"鸡肉\"), (\"妊娠合并白血病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"妊娠合并红细胞增多症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妊娠合并红细胞增多症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妊娠合并红细胞增多症\")-[:do_eat@0{}]->(\"鸡肉\"), (\"小儿尿路梗阻\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿尿路梗阻\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿尿路梗阻\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"小儿尿路梗阻\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿指甲-髌骨综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿指甲-髌骨综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿指甲-髌骨综合征\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"小儿肾母细胞瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿肾母细胞瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾淀粉样变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾淀粉样变性\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:need_check@0{}]->(\"心电图\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿阻塞性睡眠呼吸暂停\")-[:has_symptom@0{}]->(\"乏力\"), (\"恶性高血压性小动脉性肾硬化\")-[:need_check@0{}]->(\"心电图\"), (\"恶性高血压性小动脉性肾硬化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"未分化结缔组织病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"未分化结缔组织病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"未分化结缔组织病\")-[:accompany_with@0{}]->(\"肾动脉狭窄\"), (\"痰浊眩晕\")-[:need_check@0{}]->(\"心电图\"), (\"痰浊眩晕\")-[:recommend_drug@0{}]->(\"回心康片\"), (\"痰浊眩晕\")-[:recommend_drug@0{}]->(\"复方天麻蜜环糖肽片\"), (\"痰浊眩晕\")-[:recommend_drug@0{}]->(\"脑立清丸\"), (\"痰浊眩晕\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"痰浊眩晕\")-[:common_drug@0{}]->(\"脑立清丸\"), (\"老年人脑出血\")-[:need_check@0{}]->(\"心电图\"), (\"老年人脑出血\")-[:cure_department@0{}]->(\"心内科\"), (\"老年人脑出血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人脑出血\")-[:do_eat@0{}]->(\"芝麻\"), (\"老年人脑出血\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人非霍奇金恶性淋巴肿瘤\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"胼胝体进行性变性\")-[:need_check@0{}]->(\"心电图\"), (\"胼胝体进行性变性\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胼胝体进行性变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"隐匿型肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高原适应不全症\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"高原适应不全症\")-[:do_eat@0{}]->(\"鸡肝\"), (\"吉兰-巴雷综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"妇女雄激素源性秃发\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"妇女雄激素源性秃发\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾小球肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾小球肾炎\")-[:has_symptom@0{}]->(\"头晕\"), (\"急性肾小球肾炎\")-[:accompany_with@0{}]->(\"咳嗽\"), (\"急性肾小球肾炎\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"狂犬病\")-[:need_check@0{}]->(\"心电图\"), (\"狂犬病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"狂犬病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年肺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年肺炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"老年肺炎\")-[:do_eat@0{}]->(\"芝麻\"), (\"老年肺炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肾小球肾炎\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"镇痛剂肾病\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"镇痛剂肾病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"镇痛剂肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"镇痛剂肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"镇痛剂肾病\")-[:do_eat@0{}]->(\"芝麻\"), (\"镇痛剂肾病\")-[:has_symptom@0{}]->(\"头晕\"), (\"囊性肾病\")-[:cure_way@0{}]->(\"手术治疗\"), (\"囊性肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"囊性肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿尿路感染\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"小儿尿路感染\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿尿路感染\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿尿路感染\")-[:accompany_with@0{}]->(\"慢性肾功能衰竭\"), (\"小儿慢性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿慢性肾小球肾炎\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"库欣综合征\")-[:no_eat@0{}]->(\"杏仁\"), (\"库欣综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"库欣综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性肾炎综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎综合征\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急性肾炎综合征\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"慢性酒中毒\")-[:need_check@0{}]->(\"心电图\"), (\"慢性酒中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性酒中毒\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"新生儿急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"短暂性脑缺血发作\")-[:need_check@0{}]->(\"心电图\"), (\"短暂性脑缺血发作\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"短暂性脑缺血发作\")-[:cure_way@0{}]->(\"药物治疗\"), (\"短暂性脑缺血发作\")-[:do_eat@0{}]->(\"松子仁\"), (\"短暂性脑缺血发作\")-[:do_eat@0{}]->(\"芝麻\"), (\"短暂性脑缺血发作\")-[:do_eat@0{}]->(\"鸡肉\"), (\"神经母细胞瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"神经母细胞瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"羊水过少\")-[:no_eat@0{}]->(\"鸡肝\"), (\"羊水过少\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"羊水过少\")-[:cure_way@0{}]->(\"药物治疗\"), (\"羊水过少\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"羊水过少\")-[:do_eat@0{}]->(\"鸡肉\"), (\"老年人吸入性肺炎\")-[:need_check@0{}]->(\"心电图\"), (\"老年人吸入性肺炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人吸入性肺炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人急性肾功能衰竭\")-[:no_eat@0{}]->(\"腐竹\"), (\"老年人急性肾功能衰竭\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人急性肾功能衰竭\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾动脉狭窄\")-[:need_check@0{}]->(\"血管紧张素Ⅱ\"), (\"肾动脉狭窄\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾动脉狭窄\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾动脉狭窄\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾癌\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"肾癌\")-[:no_eat@0{}]->(\"腐竹\"), (\"肾癌\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾癌\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾癌\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾癌\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"肾癌\")-[:do_eat@0{}]->(\"杏仁\"), (\"酒中毒性小脑变性\")-[:no_eat@0{}]->(\"腐竹\"), (\"酒中毒性小脑变性\")-[:no_eat@0{}]->(\"鸡肝\"), (\"酒中毒性小脑变性\")-[:need_check@0{}]->(\"心电图\"), (\"酒中毒性小脑变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒中毒性小脑变性\")-[:do_eat@0{}]->(\"松子仁\"), (\"酒中毒性小脑变性\")-[:do_eat@0{}]->(\"鸡肉\"), (\"间质性肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"项痹\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"项痹\")-[:has_symptom@0{}]->(\"乏力\"), (\"三叉神经痛\")-[:no_eat@0{}]->(\"杏仁\"), (\"三叉神经痛\")-[:no_eat@0{}]->(\"腐竹\"), (\"三叉神经痛\")-[:need_check@0{}]->(\"心电图\"), (\"三叉神经痛\")-[:recommend_drug@0{}]->(\"二十五味珊瑚丸\"), (\"三叉神经痛\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"三叉神经痛\")-[:do_eat@0{}]->(\"芝麻\"), (\"三叉神经痛\")-[:common_drug@0{}]->(\"二十五味珊瑚丸\"), (\"安卡性肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"安卡性肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿膀胱-输尿管反流综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿膀胱-输尿管反流综合征\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急性肾功能衰竭\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"急性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾功能衰竭\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急性肾功能衰竭\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"缺血性结肠炎\")-[:no_eat@0{}]->(\"南瓜子仁\"), (\"缺血性结肠炎\")-[:cure_way@0{}]->(\"手术治疗\"), (\"缺血性结肠炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脂肪肝\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脂肪肝\")-[:do_eat@0{}]->(\"松子仁\"), (\"脂肪肝\")-[:do_eat@0{}]->(\"芝麻\"), (\"脂肪肝\")-[:has_symptom@0{}]->(\"乏力\"), (\"脑出血\")-[:cure_way@0{}]->(\"手术治疗\"), (\"脑出血\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脑出血\")-[:do_eat@0{}]->(\"芝麻\"), (\"脑出血\")-[:has_symptom@0{}]->(\"血压高\"), (\"酒中毒性痴呆\")-[:no_eat@0{}]->(\"腐竹\"), (\"酒中毒性痴呆\")-[:no_eat@0{}]->(\"鸡肝\"), (\"酒中毒性痴呆\")-[:need_check@0{}]->(\"心电图\"), (\"酒中毒性痴呆\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"酒中毒性痴呆\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒中毒性痴呆\")-[:accompany_with@0{}]->(\"慢性酒中毒\"), (\"咳嗽\")-[:no_eat@0{}]->(\"松子仁\"), (\"咳嗽\")-[:need_check@0{}]->(\"心电图\"), (\"咳嗽\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"咳嗽\")-[:cure_way@0{}]->(\"药物治疗\"), (\"咳嗽\")-[:do_eat@0{}]->(\"芝麻\"), (\"咳嗽\")-[:do_eat@0{}]->(\"鸡肉\"), (\"小儿过敏性紫癜肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿过敏性紫癜肾炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"急性肾小管坏死\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾炎\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"梗阻性肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"梗阻性肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"梗阻性肾病\")-[:has_symptom@0{}]->(\"乏力\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"焦磷酸钙沉积病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"焦磷酸钙沉积病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肝火眩晕\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肝火眩晕\")-[:has_symptom@0{}]->(\"头晕\"), (\"肾囊肿\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"肾囊肿\")-[:no_eat@0{}]->(\"杏仁\"), (\"肾囊肿\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾囊肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾囊肿\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾囊肿\")-[:do_eat@0{}]->(\"松子仁\"), (\"肾囊肿\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾阴虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾阴虚\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾阴虚\")-[:do_eat@0{}]->(\"鸡肉\"), (\"脊髓灰质炎\")-[:no_eat@0{}]->(\"腐竹\"), (\"脊髓灰质炎\")-[:need_check@0{}]->(\"心电图\"), (\"脊髓灰质炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"脊髓灰质炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊髓灰质炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"脊髓灰质炎\")-[:do_eat@0{}]->(\"鸡肉\"), (\"良性高血压性小动脉性肾硬化\")-[:cure_way@0{}]->(\"药物治疗\"), (\"良性高血压性小动脉性肾硬化\")-[:do_eat@0{}]->(\"鸡肉\"), (\"良性高血压性小动脉性肾硬化\")-[:has_symptom@0{}]->(\"肾功能衰竭\"), (\"青年人中的成年发病型糖尿病\")-[:no_eat@0{}]->(\"腐竹\"), (\"青年人中的成年发病型糖尿病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"青年人中的成年发病型糖尿病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"神经性呕吐\")-[:no_eat@0{}]->(\"南瓜子仁\"), (\"神经性呕吐\")-[:cure_way@0{}]->(\"药物治疗\"), (\"中风\")-[:no_eat@0{}]->(\"杏仁\"), (\"中风\")-[:no_eat@0{}]->(\"腐竹\"), (\"中风\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"中风\")-[:do_eat@0{}]->(\"芝麻\"), (\"小儿先天性肾盂输尿管连接部梗阻\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肝豆状核变性\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿肝豆状核变性\")-[:cure_way@0{}]->(\"药物治疗\"), (\"左束支中隔支传导阻滞\")-[:need_check@0{}]->(\"心电图\"), (\"左束支中隔支传导阻滞\")-[:cure_department@0{}]->(\"心内科\"), (\"左束支中隔支传导阻滞\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"左束支中隔支传导阻滞\")-[:cure_way@0{}]->(\"药物治疗\"), (\"新疆出血热\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"新疆出血热\")-[:cure_way@0{}]->(\"药物治疗\"), (\"新疆出血热\")-[:do_eat@0{}]->(\"松子仁\"), (\"新疆出血热\")-[:do_eat@0{}]->(\"芝麻\"), (\"新疆出血热\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾动脉瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾动脉瘤\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾积水\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾积水\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾积水\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾积水\")-[:has_symptom@0{}]->(\"血压高\"), (\"单纯性肾囊肿\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吸烟中毒症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"吸烟中毒症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"围绝经期综合征\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"围绝经期综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"围绝经期综合征\")-[:do_eat@0{}]->(\"鸡肉\"), (\"小儿原发性膀胱输尿管反流\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿原发性膀胱输尿管反流\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿麻痹症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿麻痹症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲状旁腺功能亢进性心肌病\")-[:no_eat@0{}]->(\"腐竹\"), (\"甲状旁腺功能亢进性心肌病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"甲状旁腺功能亢进性心肌病\")-[:need_check@0{}]->(\"心电图\"), (\"甲状旁腺功能亢进性心肌病\")-[:cure_department@0{}]->(\"心内科\"), (\"甲状旁腺功能亢进性心肌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"甲状旁腺功能亢进性心肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"甲状旁腺功能亢进性心肌病\")-[:do_eat@0{}]->(\"芝麻\"), (\"甲状旁腺功能亢进性心肌病\")-[:has_symptom@0{}]->(\"乏力\"), (\"甲状旁腺功能亢进性心肌病\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"老年人痛风\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人痛风\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人痛风\")-[:has_symptom@0{}]->(\"乏力\"), (\"老年人颅内压增高\")-[:no_eat@0{}]->(\"腐竹\"), (\"老年人颅内压增高\")-[:cure_way@0{}]->(\"手术治疗\"), (\"老年人颅内压增高\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人颅内压增高\")-[:do_eat@0{}]->(\"芝麻\"), (\"老年人颅内压增高\")-[:do_eat@0{}]->(\"鸡肉\"), (\"老年人颅内压增高\")-[:has_symptom@0{}]->(\"乏力\"), (\"肥胖性心肌病\")-[:need_check@0{}]->(\"心电图\"), (\"肥胖性心肌病\")-[:cure_department@0{}]->(\"心内科\"), (\"肥胖性心肌病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肥胖性心肌病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾胚胎瘤\")-[:cure_way@0{}]->(\"手术治疗\"), (\"肾胚胎瘤\")-[:cure_way@0{}]->(\"药物治疗\"), (\"胰岛素抵抗与代谢综合征\")-[:need_check@0{}]->(\"动态血压监测(ABPM)\"), (\"胰岛素抵抗与代谢综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"胰岛素抵抗与代谢综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊椎病\")-[:cure_way@0{}]->(\"手术治疗\"), (\"脊椎病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"脊椎病\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"脊椎病\")-[:do_eat@0{}]->(\"松子仁\"), (\"薄肾小球基底膜病\")-[:no_eat@0{}]->(\"杏仁\"), (\"薄肾小球基底膜病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"薄肾小球基底膜病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"薄肾小球基底膜病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒精中毒性神经疾病\")-[:no_eat@0{}]->(\"腐竹\"), (\"酒精中毒性神经疾病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"酒精中毒性神经疾病\")-[:need_check@0{}]->(\"心电图\"), (\"酒精中毒性神经疾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"酒精中毒性神经疾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"酒精中毒性神经疾病\")-[:do_eat@0{}]->(\"芝麻\"), (\"高原性心脏病\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"高原性心脏病\")-[:cure_department@0{}]->(\"心内科\"), (\"高原性心脏病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高原性心脏病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高尿酸血症肾病\")-[:no_eat@0{}]->(\"杏仁\"), (\"高尿酸血症肾病\")-[:no_eat@0{}]->(\"鸡肝\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"高尿酸血症肾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"高尿酸血症肾病\")-[:has_symptom@0{}]->(\"肾功能衰竭\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"高尿酸血症肾病\")-[:accompany_with@0{}]->(\"肾囊肿\"), (\"Ⅳ型肾小管性酸中毒\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"Ⅳ型肾小管性酸中毒\")-[:cure_way@0{}]->(\"药物治疗\"), (\"Ⅳ型肾小管性酸中毒\")-[:do_eat@0{}]->(\"鸡肉\"), (\"Ⅳ型肾小管性酸中毒\")-[:do_eat@0{}]->(\"鸡肝\"), (\"Ⅳ型肾小管性酸中毒\")-[:has_symptom@0{}]->(\"乏力\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:need_check@0{}]->(\"心电图\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿乙型肝炎病毒相关肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾结核\")-[:cure_way@0{}]->(\"手术治疗\"), (\"小儿肾结核\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿肾结核\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"小儿肾结核\")-[:has_symptom@0{}]->(\"乏力\"), (\"急进性肾小球肾炎\")-[:no_eat@0{}]->(\"腐竹\"), (\"急进性肾小球肾炎\")-[:no_eat@0{}]->(\"鸡肝\"), (\"急进性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急进性肾小球肾炎\")-[:do_eat@0{}]->(\"鸡肉\"), (\"急进性肾小球肾炎\")-[:accompany_with@0{}]->(\"肾功能衰竭\"), (\"慢性肾盂肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"慢性肾盂肾炎\")-[:do_eat@0{}]->(\"鸡肉\"), (\"慢性肾盂肾炎\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"老年人肥胖症\")-[:cure_way@0{}]->(\"手术治疗\"), (\"老年人肥胖症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"老年人肥胖症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"老年人肥胖症\")-[:do_eat@0{}]->(\"松子仁\"), (\"肾功能不全\")-[:no_eat@0{}]->(\"鸡肝\"), (\"肾功能不全\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肾功能不全\")-[:do_eat@0{}]->(\"杏仁\"), (\"肾功能不全\")-[:do_eat@0{}]->(\"鸡肉\"), (\"肾功能不全\")-[:has_symptom@0{}]->(\"乏力\"), (\"肾功能不全\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"血管性帕金森综合征\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"过敏性紫癜肾炎\")-[:no_eat@0{}]->(\"咸鸭蛋\"), (\"过敏性紫癜肾炎\")-[:no_eat@0{}]->(\"鸡肝\"), (\"过敏性紫癜肾炎\")-[:cure_way@0{}]->(\"手术治疗\"), (\"过敏性紫癜肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"过敏性紫癜肾炎\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"过敏性紫癜肾炎\")-[:do_eat@0{}]->(\"芝麻\"), (\"隐匿性肾小球肾炎\")-[:no_eat@0{}]->(\"杏仁\"), (\"隐匿性肾小球肾炎\")-[:cure_way@0{}]->(\"药物治疗\"), (\"隐匿性肾小球肾炎\")-[:do_eat@0{}]->(\"松子仁\"), (\"隐匿性肾小球肾炎\")-[:do_eat@0{}]->(\"芝麻\"), (\"假性高血压\")-[:no_eat@0{}]->(\"腐竹\"), (\"假性高血压\")-[:no_eat@0{}]->(\"鸡肝\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"厄贝沙坦片\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"替米沙坦片\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"盐酸贝那普利片\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"缬沙坦胶囊\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"苯磺酸氨氯地平胶囊\"), (\"假性高血压\")-[:recommend_drug@0{}]->(\"马来酸氨氯地平片\"), (\"假性高血压\")-[:cure_department@0{}]->(\"心内科\"), (\"假性高血压\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"假性高血压\")-[:cure_way@0{}]->(\"药物治疗\"), (\"假性高血压\")-[:has_symptom@0{}]->(\"血压高\"), (\"厥阴头痛\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"厥阴头痛\")-[:do_eat@0{}]->(\"芝麻\"), (\"厥阴头痛\")-[:do_eat@0{}]->(\"鸡肉\"), (\"厥阴头痛\")-[:has_symptom@0{}]->(\"头晕\"), (\"口腔疾病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"家族性载脂蛋白B100缺陷症\")-[:cure_department@0{}]->(\"心内科\"), (\"家族性载脂蛋白B100缺陷症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿狂犬病\")-[:need_check@0{}]->(\"心电图\"), (\"小儿狂犬病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"小儿狂犬病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"小儿狂犬病\")-[:has_symptom@0{}]->(\"乏力\"), (\"急性肾功能不全\")-[:cure_way@0{}]->(\"药物治疗\"), (\"急性肾功能不全\")-[:accompany_with@0{}]->(\"急性肾功能衰竭\"), (\"慢性肾功能衰竭\")-[:need_check@0{}]->(\"心电图\"), (\"慢性肾功能衰竭\")-[:cure_way@0{}]->(\"药物治疗\"), (\"更年期综合征\")-[:need_check@0{}]->(\"心电图\"), (\"更年期综合征\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"更年期综合征\")-[:cure_way@0{}]->(\"药物治疗\"), (\"更年期综合征\")-[:do_eat@0{}]->(\"南瓜子仁\"), (\"烟雾病\")-[:accompany_with@0{}]->(\"肾动脉狭窄\"), (\"糖尿病\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"糖尿病\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肢端肥大症\")-[:cure_way@0{}]->(\"药物治疗\"), (\"肢端肥大症\")-[:has_symptom@0{}]->(\"乏力\"), (\"肢端肥大症\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"肾虚\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"肾虚\")-[:do_eat@0{}]->(\"芝麻\"), (\"肾虚\")-[:accompany_with@0{}]->(\"糖尿病\"), (\"遗传性肥胖\")-[:cure_way@0{}]->(\"支持性治疗\"), (\"遗传性肥胖\")-[:cure_way@0{}]->(\"药物治疗\")]]']"}
{"prompt": "返回所有在2001年加入球队的球员和他们所在的球队名称。", "content": "match (player)-[s:serve]->(team) where s.start_year == 2001 return player.player.name AS player, team.team.name AS team", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Paul Gasol\", \"Grizzlies\"]", "[\"Jason Kidd\", \"Nets\"]"]}
{"prompt": "Find all the entities that a player named 'Tracy McGrady' likes', with a level of liking of 90, and return these entities and their relationships.", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:like{likeness: 90}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Grant Hill\"), (\"Grant Hill\" :player{age: 46, name: \"Grant Hill\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Kobe Bryant\"), (\"Kobe Bryant\" :player{age: 40, name: \"Kobe Bryant\"})]", "[(\"Tracy McGrady\")-[:like@0{likeness: 90}]->(\"Rudy Gay\"), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]"]}
{"prompt": "找出和 'Danny Green' 有 '喜欢' 关系的实体，再找出这些实体的 '队友'，返回这些实体及其关系的源节点和目标节点的ID。", "content": "$a = GO FROM 'Danny Green' OVER like YIELD like._src AS src, like._dst AS dst;\nGO FROM $a.dst OVER teammate YIELD $a.src AS src, $a.dst, teammate._dst AS dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\", \"Tim Duncan\", \"Danny Green\"]", "[\"Danny Green\", \"Tim Duncan\", \"LaMarcus Aldridge\"]", "[\"Danny Green\", \"Tim Duncan\", \"Manu Ginobili\"]", "[\"Danny Green\", \"Tim Duncan\", \"Tony Parker\"]"]}
{"prompt": "Count the number of paths, indicating that player v1 likes team paths with a relationship between 'Tim Duncan' and 'Tim Duncan'.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "软纤维瘤的得病概率是多少？", "content": "LOOKUP ON disease WHERE disease.name == \"软纤维瘤\" YIELD properties(vertex).get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.005%\"]']"}
{"prompt": "Hello, please help me identify entities that have a 'like' relationship with 'Tim Duncan', and their distance from 'Tim Duncan' is 2 steps. Can we return the edge information of these relationships?", "content": "GET SUBGRAPH 2 STEPS FROM \"Tim Duncan\" BOTH like YIELD edges as e\n| UNWIND $-.e as a | YIELD $-.a AS a", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Manu Ginobili\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Tim Duncan\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tim Parker\")]", "[(\"Tim Duncan\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Yao Ming\")-[:like@0{}]->(\"Shaquille O'Neal\")]", "[(\"Shaquille O'Neal\")-[:like@0{}]->(\"JaVale McGee\")]", "[(\"Danny Green\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Danny Green\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Chris Paul\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"James Harden\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kevin Durant\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Kyle Anderson\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Marco Belinelli\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Russell Westbrook\")]", "[(\"Dejounte Murray\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tim Parker\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Tony Parker\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Damian Lillard\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"Rudy Gay\")-[:like@0{}]->(\"LaMarcus Aldridge\")]", "[(\"LaMarcus Aldridge\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Tiago Splitter\")-[:like@0{}]->(\"Manu Ginobili\")]", "[(\"Boris Diaw\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Danny Green\")]", "[(\"Marco Belinelli\")-[:like@0{}]->(\"Tony Parker\")]", "[(\"Chris Paul\")-[:like@0{}]->(\"LeBron James\")]", "[(\"Russell Westbrook\")-[:like@0{}]->(\"James Harden\")]", "[(\"James Harden\")-[:like@0{}]->(\"Russell Westbrook\")]"]}
{"prompt": "Hello, could you help me find a player who likes' Tim Duncan '? Can you help me count the number of paths and return them?", "content": "MATCH (a:player)\nWHERE id(a)=='Tim Duncan'\nMATCH (a)-[:like]-(b)\nRETURN count(*) AS cnt", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[12]"]}
{"prompt": "卢卡斯·皮奎利的出生时间是什么？", "content": "LOOKUP ON character WHERE character.name=='卢卡斯·皮奎利' YIELD properties(vertex).born AS born", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"晚于1976年\"]']"}
{"prompt": "Can you help me find all the entities that like Steve Nash and their relationship with the target entity?", "content": "GO FROM \"Steve Nash\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Amar'e Stoudemire\"]", "[\"Dirk Nowitzki\"]", "[\"Jason Kidd\"]"]}
{"prompt": "伯莎·乔金斯可能存在关系的人有哪些？", "content": "MATCH (n:character{name:'伯莎·乔金斯'})-[e]-(n1) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"格丝尔达·乔金斯\" :character{marital: \"\", name: \"格丝尔达·乔金斯\", dead: \"\", born: \"1998年12月6日\", blood: \"\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]', '[(\"魔法部\" :group{name: \"魔法部\"})]', '[(\"格丝尔达·乔金斯\" :character{marital: \"\", name: \"格丝尔达·乔金斯\", dead: \"\", born: \"1998年12月6日\", blood: \"\", species: \"人类\", height: \"\", hair: \"\", eye: \"\", gender: \"女\"})]']"}
{"prompt": "遗传性耳瘘的治愈概率是多少？", "content": "MATCH (n:disease{name:\"遗传性耳瘘\"}) return n.disease.cured_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"82%\"]']"}
{"prompt": "Hello, could you help me find the names of players who have a 0 or 1 hop service relationship with the player node named 'Rudy'?", "content": "MATCH (v:player {name: \"Rudy Gay\"})-[:serve*0..1]->(n) RETURN n.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Rudy Gay\"]", "[__NULL__]", "[__NULL__]", "[__NULL__]", "[__NULL__]"]}
{"prompt": "眼颧部褐蓝痣的治疗时长通常是多久？", "content": "MATCH (n:disease{name:\"眼颧部褐蓝痣\"}) return n.disease.cure_lasttime", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1-2年\"]']"}
{"prompt": "Hello, please help me find the players Tony Parker likes who play for the Spurs team, and return all the nodes on the path to me.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "赤丝虬脉的预防措施是什么？", "content": "MATCH (n:disease{name:\"赤丝虬脉\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1.血热瘀滞证：白睛脉络赤紫虬蟠，灼热沙涩，轻度畏光流泪，舌质红，苔薄黄，脉数。清热化瘀。 2.气轮湿热证：嗜食酒甘，白睛污浊，赤脉纵横，尿赤便溏，舌红苔黄腻，脉濡数或滑数。清热利湿。 3.阴虚火炎证：白睛赤脉细小稀疏，时轻时重，眼内干涩明显，视物昏朦，或开睑乏力，不耐久视，舌红少苔，脉细数。滋阴降火。\"]']"}
{"prompt": "若久耀西是哪个国家的魁地奇队员？", "content": "MATCH (n:character{name:'若久耀西'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"日本魁地奇国家队\" :group{name: \"日本魁地奇国家队\"})]']"}
{"prompt": "您好，请帮我找一下球队名为'Spurs'的所有球员，然后把他们的节点信息给我返回一下好吗？", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "您好，请帮我查找与 'Manu Ginobili' 有关系的所有实体，并提供这些实体的 '喜欢程度'、'队友开始年份'、'服务开始年份'以及终点球员名字。", "content": "GO FROM \"Manu Ginobili\" OVER * REVERSELY YIELD like.likeness, teammate.start_year, serve.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, __EMPTY__, \"Dejounte Murray\"]", "[90, __EMPTY__, __EMPTY__, \"Tiago Splitter\"]", "[95, __EMPTY__, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, __EMPTY__, \"Tony Parker\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, 2002, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "特发性非硬化性门脉高压综合征的得病概率是多少？", "content": "MATCH (n:disease{name:\"特发性非硬化性门脉高压综合征\"}) return n.disease.get_prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"0.001%\"]']"}
{"prompt": "Bidirectional search for all entities that have a valid or favorite relationship with 'Tim Duncan' and return the deduplicated IDs of these entities.", "content": "GO FROM 'Tim Duncan' OVER serve, like bidirect YIELD distinct dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]", "[\"Tony Parker\"]", "[\"Tim Parker\"]", "[\"Manu Ginobili\"]", "[\"Spurs\"]"]}
{"prompt": "罗恩·韦斯莱的头发颜色是什么？", "content": "MATCH (n:character{name:'罗恩·韦斯莱'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"红\"]']"}
{"prompt": "您好，请帮我找到'Boris Diaw'的球员节点并返回给我。", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "高血压的注意事项有哪些？", "content": "LOOKUP ON disease WHERE disease.name == \"高血压\" YIELD properties(vertex).prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"高血压病的日常预防 一、合理膳食 1、饮食对于高血压的重要性：民以食为天，合理的膳食可以使你不胖也不瘦，胆固醇不高也不低。 2、高血压患者的饮食宜忌： (1)碳水化合物食品： 适宜的食品---米饭，粥，面，面类，葛粉，汤，芋类，软豆类。 应忌的食品---蕃薯(产生腹气的食物)，干豆类，味浓的饼干类。 (2)蛋白质食品---牛肉，猪瘦肉，白肉鱼，蛋，牛奶，奶制品(鲜奶油，酵母乳，冰淇淋，乳酪)，大豆制品(豆腐，纳豆，黄豆粉，油豆腐)。 应忌的食物---脂肪多的食品(牛，猪的五花肉，排骨肉，鲸鱼，鲱鱼，金枪鱼等，加工品(香肠)。 (3)脂肪类食品。 适宜的食品---植物油，少量奶油，沙拉酱。 应忌的食品---动物油，生猪油，熏肉，油浸沙丁鱼。 (4)维生素，矿物质食品。 适宜的食品---蔬菜类(菠菜，白菜，胡萝卜，番茄，百合根，南瓜，茄子，黄瓜)水果类(苹果，桔子，梨，葡萄，西瓜)。 海藻类，菌类宜煮熟才吃。 应忌的食物---纤维硬的蔬菜(牛蒡，竹笋，豆类)。 刺激性强的蔬菜(香辛蔬菜，芒荽，芥菜，葱，芥菜)。 (5)其他食物 适宜的食品---淡香茶，酵母乳饮料。 应忌的食物---香辛料(辣椒，咖喱粉) 酒类饮料，盐浸食物(成菜类，成鱼子)酱菜类，咖啡。 3、 高血压病人应注意的饮食习惯： (1) 首先要控制能量的摄入，提倡吃复合糖类，如淀粉，玉米，少吃葡萄糖，果糖及蔗糖，这类糖属于单糖，易引起血脂升高。 (2)限制脂肪的摄入，烹调时，选用植物油，可多吃海鱼，海鱼含有不饱和脂肪酸，能使胆固醇氧化，从而降低血浆胆固醇，还可延长血小板的凝聚，抑制血栓形成，防止中风，还含有较多的亚油酸，对增加微血管的弹性，防止血管破裂，防止高血压并发症有一定的作用。 (3)适量摄入蛋白质，高血压病人每日蛋白质的量为每公斤体重1g为宜，每周吃2-3次鱼类蛋白质，可改善血管弹性和通透性，增加尿钠排出，从而降低血压，如高血压合并肾功能不全时，应限制蛋白质的摄入。 (4)多吃含钾，钙丰富而含钠低的食品，如土豆，茄子，海带，莴笋，含钙高的食品：牛奶，酸牛奶，虾皮，少吃肉汤类，因为肉汤中含氮浸出物增加，能够促进体内尿酸增加，加重心，肝，肾脏的负担。 (5)限制盐的摄入量：每日应逐渐减至6g以下，即普通啤酒盖去掉胶垫后，一平盖食盐约为6g，这量指的是食盐量包括烹调用盐及其他食物中所含钠折合成食盐的总量，适当的减少钠盐的摄入有助于降低血压，减少体内的钠水潴留。 (6)多汔新鲜蔬菜，水果，每天吃新鲜蔬菜不少于8两，水果2至4两。 (7)适当增加海产品摄入：如海带，紫菜，海产鱼等。 二、适量运动 运动对高血压的重要性：有句话说：“年轻时，用健康换取金钱，年老时，用运动换取健康，”运动除了可以促进血液循环，降低胆固醇的生成外，并能增强肌肉，骨骼与关节僵硬的发生，运动能增加食欲，促进肠胃蠕动，预防便秘，改善睡眠，有持续运动的习惯：最好是做到有氧运动，才会有帮助，有氧运动同减肥一样可以降低血压，如散步，慢跑，太极拳，骑自行车和游泳都是有氧运动。 1、进行运动的注意事项： (1)勿过量或太强太累，要采取循序渐进的方式来增加活动量。 (2)注意周围环境气候：夏天：避免中午艳阳高照的时间，冬天：要注意保暖，防中风。 (3)穿着舒适吸汗的衣服：选棉质衣料，运动鞋等是必要的。 (4)选择安全场所：如公园，学校，勿在巷道，马路边。 (5)进行运动时，切勿空腹，以免发生低血糖，应在饭后2小时。 2、运动的禁忌： (1)生病或不舒服时应停止运动。 (2)饥饿时或饭后一小时不宜做运动。 (3)运动中不可立即停止，要遵守运动程序的步骤。 (4)运动中有任何不适现象，应即停止。 三、戒烟限酒 吸烟会导致高血压，研究证明，吸一支烟后心率每分钟增加5-20次/分，收缩压增加10-25mmhg，这是为什么呢?因为烟叶内含有尼古丁(烟碱)会兴奋中枢神经和交感神经，使心率加快，同时也促使肾上腺释放大量儿茶酚胺，使小动脉收缩，导致血压升高，尼古丁还会刺激血管内的化学感受器，反射性地引起血压升高。 长期大量吸烟还会促进大动脉粥样硬化，小动脉内膜逐渐增厚，使整个血管逐渐硬化，同时由于吸烟者血液中一氧化碳血红蛋白含量增多，从而降低了血液的含氧量，使动脉内膜缺氧，动脉壁内脂的含氧量增加，加速了动脉粥样硬化的形成，因此，无高血压的人戒烟可预防了高血压的发生，有高血压的人更应戒烟。 与吸烟相比，饮酒对身体的利弊就存在争议，不时出现各种报告，有的说饮少量酒有益，有的说有害，但可以肯定的一点是，大量饮酒肯定有害，高浓度的酒精会导致动脉硬化，加重高血压。 四、心理平衡 高血压患者的心理表现是紧张，易怒，情绪不稳，这些又都是使血压升高的诱因，患者可通过改变自己的行为方式，培养对自然环境和社会的良好适应能力，避免情绪激动及过度紧张，焦虑，遇事要冷静，沉着;当有较大的精神压力时应设法释放，向朋友，亲人倾吐或鼓励参加轻松愉快的业余活动，将精神倾注于音乐或寄情于花卉之中，使自己生活在最佳境界中，从而维持稳定的血压。 健康教育 1、定期测量血压，1-2周应至少测量一次。 2、治疗高血压应坚持“三心”，即信心，决心，恒心，只有这样做才能防止或推迟机体重要脏器受到损害。 3、定时服用降压药，自己不随意减量或停药，可在医生指导下及现病情加予调整，防止血压反跳。 4、条件允许，可自备血压计及学会自测血压。 5、随服用适当的药物外，还要注意劳逸结合，注意饮食，适当运动，保持情绪稳定，睡眠充足。 6、老年人降压不能操之过急，血压宜控制在140-159mmhg为宜，减少心脑血管并发症的发生。 7、老年人及服用去甲肾上腺素能神经末梢阻断药的防止体位性低血压。 8、不需要严格禁止性生活：注意以下几种情况，不宜进行性生活：①事后不要立即进行房事;②酒后应禁止性生活;③若有头晕，胸闷等不适应停止性生活，并及时就医。\"]']"}
{"prompt": "Hello, please help me calculate the result of multiplying the number of players who like 'Tim Duncan' by the number of teams' Tim Duncan 'belongs to.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "Hey, can you help me find the player Tony Parker likes who plays for Spurs? Then tell me their team and player information.", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v3) == 'Spurs' AND id(v1) == 'Tony Parker'\nRETURN v1, v2, v3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Manu Ginobili\" :player{name: \"Manu Ginobili\", age: 41}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"Tim Duncan\" :player{name: \"Tim Duncan\", age: 42} :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"}), (\"Spurs\" :team{name: \"Spurs\"})]", "[(\"Tony Parker\" :player{name: \"Tony Parker\", age: 36}), (\"LaMarcus Aldridge\" :player{name: \"LaMarcus Aldridge\", age: 33}), (\"Spurs\" :team{name: \"Spurs\"})]"]}
{"prompt": "Identify all entities connected to 'Paul Gasol' through 'likes',' services', and 'teammates' relationships, and return the IDs of the target entities for these relationships.", "content": "GO FROM \"Paul Gasol\" OVER * YIELD like._dst, serve._dst, teammate._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Kobe Bryant\", __EMPTY__, __EMPTY__]", "[\"Marc Gasol\", __EMPTY__, __EMPTY__]", "[__EMPTY__, \"Bucks\", __EMPTY__]", "[__EMPTY__, \"Bulls\", __EMPTY__]", "[__EMPTY__, \"Grizzlies\", __EMPTY__]", "[__EMPTY__, \"Lakers\", __EMPTY__]", "[__EMPTY__, \"Spurs\", __EMPTY__]"]}
{"prompt": "Identify entities that have a 'liking' or 'teammate' relationship with 'Manu Ginobili'. If 'liking', entities with a degree greater than 90 are required. Return the 'liking' level of these entities, the start year of the teammate relationship with 'Manu Ginobili', and the entity name.", "content": "GO FROM \"Manu Ginobili\" OVER like, teammate REVERSELY WHERE like.likeness > 90\nYIELD like.likeness, teammate.start_year, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[99, __EMPTY__, \"Dejounte Murray\"]", "[95, __EMPTY__, \"Tim Duncan\"]", "[95, __EMPTY__, \"Tony Parker\"]"]}
{"prompt": "Hello, could you please help me find the preferred entity for a player named 'Duncan', which can include 2 to 3 levels of relationships? Can you return these relationships and entities to me?", "content": "MATCH (:player{name: \"Tim Duncan\"})-[e:like*2..3]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")], (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")], (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")], (\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[[(\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")], (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "西弗勒斯·斯内普从属于哪个组织？", "content": "MATCH (n:character{name:'西弗勒斯·斯内普'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"凤凰社\" :group{name: \"凤凰社\"})]', '[(\"斯内普家庭\" :group{name: \"斯内普家庭\"})]', '[(\"斯莱特林学院\" :college{name: \"斯莱特林学院\"} :group{name: \"斯莱特林学院\"})]', '[(\"普林斯家庭\" :group{name: \"普林斯家庭\"})]', '[(\"莉莉·伊万斯\" :group{name: \"莉莉·伊万斯\"} :character{marital: \"已婚（被谋杀前短暂丧偶）\", name: \"莉莉·伊万斯\", dead: \"1981年10月31日 (21岁)戈德里克山谷，英格兰\", born: \"1960年1月30日英格兰\", blood: \"麻瓜出身\", species: \"人类\", height: \"\", hair: \"深红色\", eye: \"亮绿色\", gender: \"女\"})]', '[(\"阿不思·邓布利多\" :group{name: \"阿不思·邓布利多\"} :character{marital: \"单身 (前度爱人为盖勒特·格林德沃)\", name: \"阿不思·邓布利多\", dead: \"1997年6月30日 (115岁)天文塔，霍格沃茨城堡，苏格兰高地，苏格兰，英国\", born: \"1881年8月下旬沃土原，英格兰，英国\", blood: \"混血统\", species: \"人类\", height: \"约180㎝\", hair: \"银色，原为赤褐色\", eye: \"蓝色\", gender: \"男\"})]', '[(\"食死徒\" :group{name: \"食死徒\"})]']"}
{"prompt": "Could you please help me find out all the physical paths that can be reached through a maximum of 5 steps, starting from 'Tim Duncan', through the relationship between 'likes' and' services'? Then sort by path length and return to the top 10 paths.", "content": "GO FROM \"Tim Duncan\" over * YIELD like._dst AS src, serve._src AS dst |\nFIND SHORTEST PATH FROM $-.src TO $-.dst OVER like UPTO 5 STEPS YIELD path as p |\nORDER BY $-.p | LIMIT 10", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Manu Ginobili\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tim Parker\" )-[:like@0{}]->(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]", "[(\"Tony Parker\" )-[:like@0{}]->(\"Tim Duncan\" )]"]}
{"prompt": "磨牙的注意事项有哪些？", "content": "MATCH (n:disease{name:\"磨牙\"}) return n.disease.prevent", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"1、睡前尽量放松自己，尤其是在入睡前，可以适当的做些体操，泡泡热水澡，听听轻音乐等。 2、避免兴奋性食品和吸烟，改善睡眠环境。 3、尽量避免含有咖啡因等饮料或食物，如咖啡，巧克力，可乐等尽量避免。 4、多吃些含维生素丰富的食物。 5、要懂得如何缓解压力，放松心情，调整心态。 6、热敷上下颚，可松弛咬合肌肉，也可减少头痛的机会。 7、保持正确姿式，弯腰驼背也会导至磨牙。 8、睡前一定要刷牙，晚饭不要过饱。 9、日常饮食注意补充钙质，定期驱虫。 10、白天时让嘴巴保持在健康的休息状态，即让牙齿维持松弛。\"]']"}
{"prompt": "蝶骨嵴脑膜瘤眼部病变的主要症状是什么？", "content": "MATCH (n:disease{name:\"蝶骨嵴脑膜瘤眼部病变\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": " 您好，请帮我计算一下喜欢'Tim Duncan'的球员数量和'Tim Duncan'所在球队的数量相乘的结果。", "content": "MATCH (v1)-[:like]->(v2:player)-[:serve]->(v3)\nWHERE id(v2) == 'Tim Duncan'\nRETURN COUNT(*)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[10]"]}
{"prompt": "Hello, could you please help me find out, starting from 'Ricky Rubio' and following the 'like' relationship, extending 1 to 2 steps outward to return the IDs, relationship weights, and names of all entities?", "content": "GO 1 TO 2 STEPS FROM 'Tony Parker' OVER like YIELD DISTINCT like._dst, like.likeness, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"LaMarcus Aldridge\", 90, \"LaMarcus Aldridge\"]", "[\"Manu Ginobili\", 95, \"Manu Ginobili\"]", "[\"Tim Duncan\", 95, \"Tim Duncan\"]", "[\"Tim Duncan\", 90, \"Tim Duncan\"]", "[\"Tim Parker\", 99, __NULL__]", "[\"Tony Parker\", 95, \"Tony Parker\"]", "[\"Tim Duncan\", 75, \"Tim Duncan\"]", "[\"Tony Parker\", 75, \"Tony Parker\"]"]}
{"prompt": "伯莎·乔金斯是哪个组织的成员？", "content": "MATCH (n:character{name:'伯莎·乔金斯'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"魔法部\" :group{name: \"魔法部\"})]']"}
{"prompt": "Hey, I want to find all the entities and relationships that I like between 95 and 100 in two steps starting from 'Tim Duncan'. Can you help me find them?", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan'\n  WHERE like.likeness > 95 AND like.likeness < 100\n  YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\")]]", "[[(\"Tim Parker\" ), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})], [(\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Chris Paul\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"James Harden\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kevin Durant\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Kyle Anderson\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"LeBron James\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Russell Westbrook\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\")]]", "[[(\"James Harden\" :player{age: 29, name: \"James Harden\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"}), (\"Kevin Durant\" :player{age: 30, name: \"Kevin Durant\"}), (\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"}), (\"Russell Westbrook\" :player{age: 30, name: \"Russell Westbrook\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Chris Paul\" :player{age: 33, name: \"Chris Paul\"}), (\"LeBron James\" :player{age: 34, name: \"LeBron James\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})], []]"]}
{"prompt": "您好，请帮我找出所有喜欢 'Tony Parker' 和 'Tim Duncan' 的球员，然后给我他们的关系，但是不要包括 'Tony Parker' 和 'Tim Duncan' 之间的喜欢关系。", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Can you help me find out who Tracy McGrady likes and then find out the IDs of the players they like?", "content": "$var = GO FROM \"Tracy McGrady\" OVER like YIELD like._dst as id; GO FROM $var.id OVER like YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tracy McGrady\"]", "[\"LaMarcus Aldridge\"]"]}
{"prompt": "Hello, could you please help me find all the players in the team named 'Spurs' and return their node information to me?", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "请问您能帮我查找一下球员名为'Tim Duncan'的姓名吗？", "content": "MATCH (v:player{name: 'Tim Duncan'}) return v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Tim Duncan\"]"]}
{"prompt": "吉米·珀克斯是哪个组织的成员？", "content": "MATCH (n:character{name:'吉米·珀克斯'})-[e:belong_to]-(n1:group) return n1", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"格兰芬多学院\" :college{name: \"格兰芬多学院\"} :group{name: \"格兰芬多学院\"})]', '[(\"格兰芬多魁地奇球队\" :group{name: \"格兰芬多魁地奇球队\"})]', '[(\"珀克斯家族\" :group{name: \"珀克斯家族\"})]']"}
{"prompt": " 您好，请帮我找一下40岁的球员，然后给我他们的姓名和年龄加1的结果。", "content": "LOOKUP ON player WHERE player.age == 40 YIELD player.name, player.age + 1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Dirk Nowitzki\", 41]", "[\"Kobe Bryant\", 41]"]}
{"prompt": "哈维·瑞吉比特的眼睛颜色是什么？", "content": "MATCH (n:character{name:'哈维·瑞吉比特'}) return n.character.eye", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"绿色\"]']"}
{"prompt": "肱骨内髁骨折的易感人群是哪些？", "content": "MATCH (n:disease{name:\"肱骨内髁骨折\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"好发生于儿童\"]']"}
{"prompt": "鲍曼·赖特的头发颜色是什么？", "content": "MATCH (n:character{name:'鲍曼·赖特'}) return n.character.hair", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[\"黑色\"]']"}
{"prompt": "请帮我查找一下名为'Damian Lillard'的球员喜欢的所有人物，并按照他们的年龄从小到大排序，给我返回前三个人物及其年龄信息好吗？", "content": "MATCH (v:player{name: \"Damian Lillard\"})-[:like]-(v2)--(v3)\nWITH v3, v3.player.age AS age\nRETURN v3, age ORDER BY age LIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), 32]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), 36]"]}
{"prompt": "三叉神经痛的主要原因是什么？", "content": "MATCH (n:disease{name:\"三叉神经痛\"}) return n.disease.cause", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"在临床上曾有人报道，一个家庭兄弟姊妹7人其中6人患有三叉神经痛，其中2人患双侧性疼痛，另有一个家庭中，母亲及6个孩子中的3个孩子患有三叉神经痛，其中2人为双侧性疼痛，从而认为三叉神经痛可能与家族遗传有关，但多数学者认为本病与遗传因素关系不大与人类种族无关。 大脑皮质是周身感觉的最高中枢，早有定论，对三叉神经系统任何部位的病灶所致的疼痛，均是通过大脑皮质反映出来的，如疱疹和单纯疱疹的病毒感染，可沿三叉神经系统的通路而侵入三叉神经分布相应的大脑皮质，使三叉神经疼痛发作。 三叉神经末梢到脑干核团的任何部位发生病变都可刺激三叉神经，使中枢神经系统发生生理功能紊乱和器质性改变，从而发生三叉神经分布区范围内的阵发性剧痛性的学说。 三叉神经系统中枢部的脑内核团，三叉神经脊束核丘脑及大脑皮质均可因周围病变刺激及中枢本身的伤害性刺激，而导致三叉神经痛。 1967年Hanes根据三叉神经痛突然发作和可逆性，曾提出三叉神经痛可能是一种与变态反应有关的疾病。 上述各种学说均不能满意解释三叉神经痛的病因，以致Dott(1951年)认为三叉神经痛的起因在脑干内，动作或触动扳机点可引起短的冲动(Short Circuit)在脑干内迅速叠加，从而引起剧烈疼痛发作。 继发性三叉神经痛的病因 近几年来通过临床实践和研究，特别是神经显微外科手术的应用和手术方式的不断改进，对继发性三叉神经痛的病因，发病率的认识有了更深入了解和认识，发现三叉神经系统的所属部位或邻近部位的各种病灶均可引起三叉神经痛，最常见的病因有颅内和颅底骨的肿瘤，血管畸形，蛛网膜粘连增厚，多发性硬化等。 原发性(特发性)三叉神经痛的病因及发病机制尚不清楚，大多数病例无第Ⅴ对脑神经或中枢神经系统的器质性病变，Gasser神经节有退行性或纤维性改变，但是改变的轻重差别太大，不能认为它们是病因。 原发性三叉神经痛的病因虽不明确，尚无统一认识，而从现代医学来看其发病机制可能是一种致伤因素，使感觉根半月节和邻近的运动支发生脱髓鞘改变，有—些研究认为，大多数原发性三叉神经痛的病人有颅底血管对神经的反常压迫。 经临床证明，部分所谓原发性三叉神经痛，实际上还是可找到原因的，如在手术中发现供应神经的血管发生硬化，异位血管的压迫，增厚的蛛网膜和神经通过的孔发生骨膜炎，狭窄的骨孔等，而致神经根的压迫。 发病机制 1.周围病原学说： (1)局部刺激：在三叉神经所支配的组织器官发生了炎性病灶(如副鼻窦炎，牙源性炎症等)或外伤性病灶的长期慢性刺激，致使神经发炎，纤维化，半月神经节中毒等的综合作用，使分布在三叉神经根上的滋养血管，发生功能障碍，痉挛，最后发生继发性缺血，导致感觉根脱髓鞘病变，而引起三叉神经痛。 (2)局部压迫：三叉神经感觉根任何一段受到各种原因的压迫和(或)牵拉都可导致三叉神经痛。 ①血管性压迫：继Cushing在20世纪初提出机械性压迫三叉神经可以引起疼痛的假说后，Dandy在1934年进一步报道了60%的三叉神经痛患者是由于各种压迫引起的，并认为主要是血管性压迫，报道了其在三叉神经痛患者的小脑脑桥角部位的解剖和病理方面的异常所见，发现动脉襻压迫感觉根占30.7%，静脉压迫占14%，肿瘤压迫占5.6%。 ②硬膜鞘，硬膜带或骨性压迫：此类压迫分先天性和后天性两类，其压迫的主要原因是因岩骨抬高，骨孔狭窄和岩上窦变异等原因而致三叉神经痛。 岩骨角的抬高多为先天性，一般右侧多于左侧，1937年Lee发现岩骨角可随年龄增长而增高，并发现右侧明显高于左侧，半月节及后根受包裹它的硬膜鞘及岩上窦的压迫，在通过硬膜孔或翘起的岩骨脊处形成角扭曲，使后根受压引起三叉神经痛。 ③缺血学说：Woff(1948)曾试用血管扩张药烟酸200mg，5次/d，治疗10例，60%有明显效果，说明因血管扩张，可使三叉神经根缺血部分解除，解除神经的缺血性的刺激，终止了疼痛的发病。 三叉神经周围结构的反射性血管收缩也可能是引起发作性疼痛的原因，Karl(1945)等对有扳机点的7例病人给予组胺亚硝酸戊酯，10% CO2以及烟酸刺激扳机点时疼痛可减轻或不发作，安慰剂则无效。 2.中枢病因学说 有人从三叉神经痛的疼痛特殊性质，骤发，骤停，持续时间短暂，有触发点等特点，而提出癫痫学说。 Bergouignan(1942)首先报道用苯妥英钠治疗该病有效，以及大家又用卡马西平亦取得明显效果，而此二药均为抗癫痫的良药。 Nashold(1966)还发现在疼痛发作时，在中脑处记录到局灶性癫痫放电。 1990年国内李立对133例原发性三叉神经痛者行EEG检查，异常者66例占45.1%，表现为：①散发性中至高电位尖波，②弥漫性中至高电位慢活动，③基本节律变慢，且在当射频治疗使疼痛消失后，原来异常的EEG的转阴率高达73.5%。 资料显示患者脑皮质的病理性质与癫痫样放电类似，为此，认为三叉神经痛属感觉性癫痫发作的一种特殊类型。 根据各学者们的临床资料和实验室研究，多数学者对中枢发病学说做出了科学性的评价，认为三叉神经脊束核，丘脑，大脑皮质等低，高级中枢，都可因周围的病损刺激及中枢本身的损害性刺激，细胞集聚的地方形成惰性病理兴奋灶，产生癫痫样三叉神经痛的发作。 3.变态反应学说 Hanes经过16年的研究，曾先后观察了183例三叉神经痛患者，89%的病例胃液分析无游离盐酸或少酸，此类患者采用口服盐酸，抗组胺脱敏疗法，使57%的患者疼痛完全消失，11.4%大部分消失，这种变态反应的原理尚未搞清，可能是因为过敏性体质的患者，由于胃酸缺乏而导致蛋白消化异常，组胺(histamine)和组胺样物质大量吸入血，随血循环达三叉神经而引起疼痛发作。 4.病毒感染学说 Knight(1954)观察到60%的三叉神经痛病人，术前伴有肉眼可见的单纯疱疹，病人先产生三叉神经痛，随之在相应三叉神经分支上出现疱疹，他认为在出现疱疹前病毒可能已进入中枢神经，引起过敏反应，在他观察的病人中对单纯疱疹的抗体滴度都较高，但无对照组对照，以后多年也未能进一步证实，Bariager(1973)在尸解患者的半月神经节中，发现有单纯疱疹病毒，但Rothman(1973)在526例患者的流行病调整中未发现口唇单纯疱疹感染和三叉神经痛之间存在联系，所以他认为单纯疱疹不是本病的病因，刘国伟等(2001)报道，带状疱疹后三叉神经痛临床病理分析结论为，本病病因是带状疱疹病毒侵入三叉神经感觉根引起脱髓鞘所致。 5.家族遗传学说 有人报道，一个家庭兄弟姊妹7人，其中6人患有三叉神经痛，其中2人患双侧性疼痛，另有一个家庭中，母亲及6个孩子中的3个孩子患有三叉神经痛，其中2人为双侧性疼痛，从而认为三叉神经痛可能与家族遗传有关，但多数学者认为本病与遗传因素关系不大与人类种族无关。\"]']"}
{"prompt": "从 'Tim Duncan' 出发，经过 '喜欢' 和 '服务' 关系，找出距离为 3 的所有实体，且这些实体有标签且年龄大于 40，返回这些实体。", "content": "GO 3 STEPS FROM \"Tim Duncan\" OVER like,serve\n  WHERE size(labels($$))>0 AND $$.player.age>40\n  yield $$ as v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Tim Duncan\" :bachelor{name: \"Tim Duncan\", speciality: \"psychology\"} :player{age: 42, name: \"Tim Duncan\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]"]}
{"prompt": "找出和赫尔伯特·斯普林相关的两个人？", "content": "MATCH (n:character{name:'赫尔伯特·斯普林'})-[e]-(n1) return n LIMIT 2", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[(\"赫尔伯特·斯普林\" :character{name: \"赫尔伯特·斯普林\", marital: \"\", born: \"\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]', '[(\"赫尔伯特·斯普林\" :character{name: \"赫尔伯特·斯普林\", marital: \"\", born: \"\", dead: \"\", blood: \"\", species: \"人类\", gender: \"男\", eye: \"\", height: \"\", hair: \"\"})]']"}
{"prompt": "得了戊型病毒性肝炎的治疗药物有哪些？", "content": "GO FROM \"戊型病毒性肝炎\" OVER recommend_drug YIELD dst(edge);", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"利肝隆片\"]', '[\"强肝糖浆\"]', '[\"注射用促肝细胞生长素\"]', '[\"珍熊胆丸\"]', '[\"胸腺肽肠溶片\"]', '[\"苦参碱注射液\"]']"}
{"prompt": "请问您能帮我查找一下评分为666的'喜欢'关系吗？我需要获取这些关系的起始点和终止点。", "content": "LOOKUP ON like WHERE like.grade == 666 YIELD src(edge) as src, dst(edge) as dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Hello, could you please help me search for 'Tim Duncan' and expand 1 to 4 steps outward to find the 'likes' and edge information between each edge.", "content": "go 1 to 4 steps from \"Tim Duncan\" over like yield like.likeness, edge as e", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]", "[90, (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\")]", "[90, (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\")]", "[75, (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[99, (\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]", "[95, (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\")]", "[90, (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\")]", "[95, (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]"]}
{"prompt": "小儿中暑和暑热症的易感人群是哪些？", "content": "MATCH (n:disease{name:\"小儿中暑和暑热症\"}) return n.disease.easy_get", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"儿童\"]']"}
{"prompt": "Find all the teams' Boris Diaw 'belongs to, return the player name, start and end years of service, and team name.", "content": "GO FROM \"Boris Diaw\" OVER serve YIELD $^.player.name, serve.start_year, serve.end_year, $$.team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\", 2003, 2005, \"Hawks\"]", "[\"Boris Diaw\", 2008, 2012, \"Hornets\"]", "[\"Boris Diaw\", 2016, 2017, \"Jazz\"]", "[\"Boris Diaw\", 2012, 2016, \"Spurs\"]", "[\"Boris Diaw\", 2005, 2008, \"Suns\"]"]}
{"prompt": "Hello, could you help me find entities and relationships that have a liking and effectiveness relationship with 'Tim Duncan'?", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "查找年龄为（1+19）岁的球员，并返回这些球员的所有节点信息。", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "查找年龄为20岁的球员，并返回这些球员的所有节点信息。", "content": "match (v:player{age: 1+19}) RETURN v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Luka Doncic\" :player{age: 20, name: \"Luka Doncic\"})]"]}
{"prompt": "急性肾功能不全的主要症状是什么？", "content": "MATCH (n:disease{name:\"急性肾功能不全\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": " 嘿，你能帮我找一下所有喜欢'Tony Parker'和'Tim Duncan'的人吗？然后告诉我这些人和其他实体之间的关系，但是不要包括'Tony Parker'和'Tim Duncan'之间的关系。", "content": "MATCH (v:player)-[e:like]->(v2) WHERE none_direct_dst(e) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *\nMINUS\nMATCH (v:player)-[e:like]->(v2) WHERE id(v2) IN [\"Tony Parker\", \"Tim Duncan\"] RETURN *", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "找出所有被其他球员喜欢的球员，并返回这些球员的姓名。", "content": "MATCH (v:player) WHERE [t in [v] | (v)-[:like]->(t)] RETURN v.player.name AS name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Danny Green\"]", "[\"Dejounte Murray\"]", "[\"Grant Hill\"]", "[\"Manu Ginobili\"]", "[\"Marc Gasol\"]", "[\"Nobody\"]", "[\"Rajon Rondo\"]", "[\"Amar'e Stoudemire\"]", "[\"David West\"]", "[\"Jason Kidd\"]", "[\"Kyrie Irving\"]", "[\"LeBron James\"]", "[\"Luka Doncic\"]", "[\"Paul Gasol\"]", "[\"Paul George\"]", "[\"Tony Parker\"]", "[\"Vince Carter\"]", "[\"Blake Griffin\"]", "[\"Chris Paul\"]", "[\"Kobe Bryant\"]", "[\"NULL\"]", "[\"Shaquille O'Neal\"]", "[\"Boris Diaw\"]", "[\"Dwight Howard\"]", "[\"Dwyane Wade\"]", "[\"Giannis Antetokounmpo\"]", "[\"Jonathon Simmons\"]", "[\"Klay Thompson\"]", "[\"Steve Nash\"]", "[\"Aron Baynes\"]", "[\"Damian Lillard\"]", "[\"DeAndre Jordan\"]", "[\"JaVale McGee\"]", "[\"null\"]", "[\"Joel Embiid\"]", "[\"Kristaps Porzingis\"]", "[\"Rudy Gay\"]", "[\"Cory Joseph\"]", "[\"James Harden\"]", "[\"Marco Belinelli\"]", "[\"Null\"]", "[\"Yao Ming\"]", "[\"Kevin Durant\"]", "[\"Kyle Anderson\"]", "[\"Ricky Rubio\"]", "[\"Tracy McGrady\"]", "[\"Dirk Nowitzki\"]", "[\"__NULL__\"]", "[\"Ben Simmons\"]", "[\"Carmelo Anthony\"]", "[\"LaMarcus Aldridge\"]", "[\"Ray Allen\"]", "[\"Russell Westbrook\"]", "[\"Stephen Curry\"]", "[\"Tiago Splitter\"]", "[\"Tim Duncan\"]"]}
{"prompt": "睾丸肿瘤的主要症状有哪些？", "content": "MATCH (n:disease{name:\"睾丸肿瘤\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "查找名为'Tracy McGrady'的球员在2000年之后所服务或喜欢的实体及其关系。", "content": "MATCH (:player{name:\"Tracy McGrady\"})-[e:serve|like{start_year: 2000}]->(v)\nRETURN e, v", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Tracy McGrady\")-[:serve@0{start_year: 2000, end_year: 2004}]->(\"Magic\"), (\"Magic\" :team{name: \"Magic\"})]"]}
{"prompt": "找出名为'Duncan'球员对其他球员具有互相喜欢的关系，返回这些关系的喜欢程度。", "content": "MATCH p2=(:player{name:\"Tim Duncan\"})-[e:like*1..2]-(:player{name:\"Tim Duncan\"})\nRETURN e.likeness AS e1", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]", "[BAD_TYPE]"]}
{"prompt": "Obtain the attributes of the player for 'Boris Diaw' and return the player node.", "content": "FETCH PROP ON player 'Boris Diaw' YIELD vertex as node", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]"]}
{"prompt": "母儿ABO血型不合的主要症状是什么？", "content": "MATCH (n:disease{name:\"母儿ABO血型不合\"}) return n.disease.symptom", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"\"]']"}
{"prompt": "找出名为'Joseph'的球员有喜欢关系的所有实体及其关系，并返回这些实体和关系的路径。", "content": "MATCH p = (v:player{name: \"Cory Joseph\"})-[e:like]-(v2)\nRETURN p", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "Starting from 'Tim Duncan', obtain all entities and relationships within two steps through liking and effectiveness relationships.", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM 'Tim Duncan' IN like, serve YIELD vertices as nodes, edges as relationships", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})], [(\"Aron Baynes\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Danny Green\")-[:like@0{likeness: 70}]->(\"Tim Duncan\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tim Duncan\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tim Duncan\"), (\"Manu Ginobili\")-[:like@0{likeness: 90}]->(\"Tim Duncan\"), (\"Marco Belinelli\")-[:like@0{likeness: 55}]->(\"Tim Duncan\"), (\"Shaquille O'Neal\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tiago Splitter\")-[:like@0{likeness: 80}]->(\"Tim Duncan\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Tim Duncan\")]]", "[[(\"Shaquille O'Neal\" :player{age: 47, name: \"Shaquille O'Neal\"}), (\"Danny Green\" :player{age: 31, name: \"Danny Green\"}), (\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"}), (\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"}), (\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"}), (\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"}), (\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"}), (\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"}), (\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"}), (\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})], [(\"Yao Ming\")-[:like@0{likeness: 90}]->(\"Shaquille O'Neal\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Danny Green\"), (\"Marco Belinelli\")-[:like@0{likeness: 60}]->(\"Danny Green\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Manu Ginobili\"), (\"Tiago Splitter\")-[:like@0{likeness: 90}]->(\"Manu Ginobili\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Tony Parker\")-[:like@0{likeness: 95}]->(\"Manu Ginobili\"), (\"Boris Diaw\")-[:like@0{likeness: 80}]->(\"Tony Parker\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Tony Parker\"), (\"LaMarcus Aldridge\")-[:like@0{likeness: 75}]->(\"Tony Parker\"), (\"Marco Belinelli\")-[:like@0{likeness: 50}]->(\"Tony Parker\"), (\"Tim Duncan\")-[:like@0{likeness: 95}]->(\"Tony Parker\"), (\"Tim Parker\")-[:like@0{likeness: 90}]->(\"Tony Parker\"), (\"Damian Lillard\")-[:like@0{likeness: 80}]->(\"LaMarcus Aldridge\"), (\"Rudy Gay\")-[:like@0{likeness: 70}]->(\"LaMarcus Aldridge\"), (\"Tony Parker\")-[:like@0{likeness: 90}]->(\"LaMarcus Aldridge\"), (\"Danny Green\")-[:like@0{likeness: 83}]->(\"Marco Belinelli\"), (\"Dejounte Murray\")-[:like@0{likeness: 99}]->(\"Marco Belinelli\")]]", "[[(\"Damian Lillard\" :player{age: 28, name: \"Damian Lillard\"}), (\"Yao Ming\" :player{age: 38, name: \"Yao Ming\"}), (\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"}), (\"Tim Parker\" )], [(\"Tim Duncan\")-[:like@0{likeness: 99}]->(\"Tim Parker\")]]"]}
{"prompt": "嘿，你能帮我找一下'Spurs'这个团队里的所有球员吗？然后把这些球员的信息给我返回一下。", "content": "MATCH (v:team{name:\"Spurs\"})--(v2)\nRETURN v2 AS Player", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[(\"Aron Baynes\" :player{age: 32, name: \"Aron Baynes\"})]", "[(\"Boris Diaw\" :player{age: 36, name: \"Boris Diaw\"})]", "[(\"Cory Joseph\" :player{age: 27, name: \"Cory Joseph\"})]", "[(\"Danny Green\" :player{age: 31, name: \"Danny Green\"})]", "[(\"David West\" :player{age: 38, name: \"David West\"})]", "[(\"Dejounte Murray\" :player{age: 29, name: \"Dejounte Murray\"})]", "[(\"Jonathon Simmons\" :player{age: 29, name: \"Jonathon Simmons\"})]", "[(\"Kyle Anderson\" :player{age: 25, name: \"Kyle Anderson\"})]", "[(\"LaMarcus Aldridge\" :player{age: 33, name: \"LaMarcus Aldridge\"})]", "[(\"Manu Ginobili\" :player{age: 41, name: \"Manu Ginobili\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]", "[(\"Paul Gasol\" :player{age: 38, name: \"Paul Gasol\"})]", "[(\"Rudy Gay\" :player{age: 32, name: \"Rudy Gay\"})]", "[(\"Tiago Splitter\" :player{age: 34, name: \"Tiago Splitter\"})]", "[(\"Tim Duncan\" :player{age: 42, name: \"Tim Duncan\"} :bachelor{speciality: \"psychology\", name: \"Tim Duncan\"})]", "[(\"Tony Parker\" :player{age: 36, name: \"Tony Parker\"})]", "[(\"Tracy McGrady\" :player{age: 39, name: \"Tracy McGrady\"})]", "[(\"Marco Belinelli\" :player{age: 32, name: \"Marco Belinelli\"})]"]}
{"prompt": "得了戊型病毒性肝炎的治愈概率是多少？", "content": "FETCH PROP ON disease \"戊型病毒性肝炎\" YIELD properties(vertex).cured_prob as prob", "text_schema": "\nthe node type:[{'drug':[name]},{\"disease\":[name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob]},{'food':[name]},{'check':[name]},{'department':[name]},{'producer':[name]},{'symptom':[name]},{'cure':[name]}]\nthe node type:[{'accompany_with':[]},{'cure_department':[]},{'cure_way':[]},{'recommend_eat':[]},{'has_symptom':[]},{'need_check':[]},{'no_eat':[]},{'recommend_drug':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass ():\n    def __init__(self,name):\n        self.name=name\n\n\nclass drug():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass disease():\n    def __init__(self, vid, name, describe, prevent, cause, easy_get, cure_lasttime, symptom, cured_prob, get_prob):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n        self.describe = describe\n        self.prevent = prevent\n        self.cause = cause\n        self.easy_get = easy_get\n        self.cure_lasttime = cure_lasttime\n        self.symptom = symptom\n        self.cured_prob = cured_prob\n        self.get_prob = get_prob\n\nclass food():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass check():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass department():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass producer():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass symptom():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\nclass cure():\n    def __init__(self, vid, name):\n        super().__init__(name)\n        self.vid = vid\n        self.name = name\n\n# Edges\nclass Edge():\n    def __init__(self,src_id,tag_id):\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass accompany_with(Edge):\n    # 并发症 disease--disease\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_department(Edge):\n    # 诊断科室 disease-->department\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass cure_way(Edge):\n    # 治疗方法 disease-->cure\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_eat(Edge):\n    # 推荐食物 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass has_symptom(Edge):\n    # 发病症状 disease-->symptom\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass need_check(Edge):\n    # 所需诊断方式 disease-->check\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass no_eat(Edge):\n    # 禁止食用 disease-->food\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id\n\nclass recommend_drug(Edge):\n    # 推荐药品 disease-->drug\n    def __init__(self, src_id, tag_id):\n        super().__init__(src_id, tag_id)\n        self.src_id=src_id\n        self.tag_id=tag_id", "class": "disease", "result": "['[\"70%\"]']"}
{"prompt": "获取名称为'Spurs'的球队的队名属性。", "content": "FETCH PROP ON team \"Spurs\" YIELD team.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Spurs\"]"]}
{"prompt": "请问您能帮我找出与'LaMarcus Aldridge'有关的球队名称和相关球员的名称吗？", "content": "GO FROM \"LaMarcus Aldridge\" OVER * YIELD $$.team.name, $$.player.name", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[__EMPTY__, \"Tim Duncan\"]", "[__EMPTY__, \"Tony Parker\"]", "[\"Spurs\", __EMPTY__]", "[__NULL__, __NULL__]"]}
{"prompt": "雷古勒斯·布莱克参与了多少个组织？", "content": "MATCH (n:character{name:'雷古勒斯·布莱克'})-[e]-(n1:group) return count(n1)", "text_schema": "\nthe node type:[{'character':[name, born, dead, blood, marital, species, gender, height, hair, eye]},{\"college\":[name]},{'group':[name]}]\nthe node type:[{'belong_to':[]},{'kindred':[]},{'learn_from':[]}]\n", "schema": "# this is the schema of this graph\n# Nodes\nclass Node():\n    def __init__(self,name):\n        self.name=name\n\nclass character(Node):\n    #The Characters in Novels, often appearing in the form of character names\n    def __init__(self, vid, name, born, dead, blood, marital, species, gender, height, hair, eye):\n        self.vid = vid\n        self.name = name\n        self.born = born\n        self.dead = dead\n        self.blood = blood\n        self.marital = marital\n        self.species = species\n        self.gender = gender\n        self.height = height\n        self.hair = hair\n        self.eye = eye\n\nclass college(Node):\n    #College where the character learn from\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\nclass group(Node):\n    # Group where the character belong to\n    def __init__(self,vid,name):\n        self.vid=vid\n        self.name=name\n\n# Edges\nclass Edge():\n    def __init__(self, scr_id, tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\nclass belong_to(Edge):\n    #character-->group\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\nclass kindred(Edge):\n    #character-->character\n    def __init__(self,scr_id,tag_id,rel_type):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n        # rel_type such as 鐖朵翰 姣嶄翰 绁栨瘝\n        self.rel_type = rel_type\n\n\nclass learn_from(Edge):\n    #character-->college\n    def __init__(self,scr_id,tag_id):\n        self.scr_id = scr_id\n        self.tag_id = tag_id\n\n\n", "class": "potter", "result": "['[6]']"}
{"prompt": "Find all entities that 'like' and 'Tony Parker', and return the IDs of the 'like' entities in their relationship with 'Tony Parker'.", "content": "GO FROM \"Tony Parker\" OVER like REVERSELY YIELD like._dst", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Boris Diaw\"]", "[\"Dejounte Murray\"]", "[\"LaMarcus Aldridge\"]", "[\"Marco Belinelli\"]", "[\"Tim Duncan\"]", "[\"Tim Parker\"]"]}
{"prompt": "Hey, can you help me find players over 35 years old? Then count their number, total age, maximum age, minimum age, average age plus 1, and their respective labels. Finally, sort by ID, quantity, maximum age, and minimum age, skip the top 10 results, and return me 20 results.", "content": "MATCH(n:player)-[:like]->(m)\n  WHERE n.player.age > 35\n  RETURN DISTINCT id(n) AS id,\n                  count(n) AS count,\n                  sum(floor(n.player.age)) AS sum,\n                  max(m.player.age) AS max,\n                  min(n.player.age) AS min,\n                  avg(distinct n.player.age)+1 AS age,\n                  labels(m) AS lb\n        ORDER BY id, count, max, min\n        SKIP 10 LIMIT 20;", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[\"Shaquille O'Neal\", 1, 47.0, 31, 47, 48.0, [\"player\"]]", "[\"Shaquille O'Neal\", 1, 47.0, 42, 47, 48.0, [\"player\", \"bachelor\"]]", "[\"Steve Nash\", 4, 180.0, 45, 45, 46.0, [\"player\"]]", "[\"Tim Duncan\", 2, 84.0, 41, 42, 43.0, [\"player\"]]", "[\"Tony Parker\", 1, 36.0, 42, 36, 37.0, [\"player\", \"bachelor\"]]", "[\"Tony Parker\", 2, 72.0, 41, 36, 37.0, [\"player\"]]", "[\"Tracy McGrady\", 3, 117.0, 46, 39, 40.0, [\"player\"]]", "[\"Vince Carter\", 2, 84.0, 45, 42, 43.0, [\"player\"]]", "[\"Yao Ming\", 2, 76.0, 47, 38, 39.0, [\"player\"]]"]}
{"prompt": "找出与 'Dejounte' 有 '喜欢' 关系的实体，按照年龄降序、姓名升序排序，跳过前11个结果，返回接下来的3个实体的姓名和年龄。", "content": "MATCH (v1) -[:like]-> (v)\nWHERE id(v1) == 'Dejounte Murray'\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age DESC, Name ASC\nSKIP 11\nLIMIT 3", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": []}
{"prompt": "返回 'Tony Parker' 喜欢 'Tim Duncan' 和 'Grant Hill' 喜欢 'Tracy McGrady' 的关系属性。", "content": "FETCH PROP ON like \"Tony Parker\"->\"Tim Duncan\", \"Grant Hill\" -> \"Tracy McGrady\" YIELD edge as relationship |\nYIELD properties($-.relationship)", "text_schema":"the node type:[{'player':[name,age],'team':[name],'bachelor':[name,speciality]}],the edge type:[{'like':[likeness],'serve':[start_year,end_year],'teammate':[start_year]}]","schema":"# this is the schema of this graph\n# Nodes\nclass Tag():\n    def __init__(self,tag_name):\n        self.tag_name=tag_name\n\nclass player(Tag):\n    def __init__(self,vid,name:str,age:int):\n        self.vid=vid\n        self.name=name\n        self.age=age\n\nclass team(Tag):\n    def __init__(self,vid,name:str):\n        self.vid=vid\n        self.name=name\n\nclass bachelor(Tag):\n    def __init__(self,vid,name:str,speciality:str):\n        self.vid=vid\n        self.name=name\n        self.speciality=speciality\n\n# Edge\nclass Edge():\n    def __init__(self,edge_type_name):\n        self.edge_type_name=edge_type_name\n\nclass like(Edge):\n    def __init__(self,src_vid,dst_vid,likeness:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.likeness=likeness\n\nclass serve(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year\n\nclass teammate(Edge):\n    def __init__(self,src_vid,dst_vid,start_year:int,end_year:int):\n        self.src_vid=src_vid\n        self.dst_vid=dst_vid\n        self.start_year=start_year\n        self.end_year = end_year","class":'nba',"result": ["[{'likeness': 95}]", "[{'likeness': 90}]"]}
