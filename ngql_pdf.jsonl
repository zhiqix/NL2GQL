{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "请显示数据库中所有的空间。", "content": "SHOW SPACES"}
{"prompt": "创建一个名为basketballplayer的空间，分区数为15，副本因子为1，实体ID类型为固定长度字符串(30)。", "content": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "请创建一个分区数为15，副本因子为1，实体ID类型为固定长度为30的字符串，且名为basketballplayer的空间。", "content": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "显示 Graph、Storage、Meta 服务主机信息、版本信息。", "content": "SHOW HOSTS"}
{"prompt": "请展示数据库中 Graph、Storage、Meta 服务主机信息、版本信息。", "content": "SHOW HOSTS"}
{"prompt": "创建一个名为player的标签，包含姓名和年龄两个属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为player，且包含姓名和年龄两个属性的标签。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为team的标签，该标签包含一个字符串类型的属性name。", "content": "CREATE TAG team(name string)"}
{"prompt": "创建一个名为team的标签，其中包含一个名为name的属性。", "content": "CREATE TAG team(name string)"}
{"prompt": "创建一条名为follow的边，该边具有一个名为degree的属性。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条带有degree（度）属性的follow边。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条边，表示服务的开始年份和结束年份。", "content": "CREATE EDGE serve(start_year int, end_year int)"}
{"prompt": "创建一条边，表示服务关系，包括起始年份和结束年份两种属性。", "content": "CREATE EDGE serve(start_year int, end_year int)"}
{"prompt": "将名为'Tim Duncan'且年龄为 42 的球员插入到 player 顶点，并赋予'player100'作为其唯一标识。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个名为'Tim Duncan'，年龄为42岁的球员实体，其ID为'player100'。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "将一个名为'Tony Parker'，年龄为36的球员插入到player类型集合中，其ID为'player101'。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入一个名为'Tony Parker'，年龄为 36 的球员实体，，其ID为'player101'。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入一个名为LaMarcus Aldridge，年龄为33的球员实体，其ID为player102。", "content": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "增加一个名为LaMarcus Aldridge，年龄为33的球员，其ID为player102。", "content": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入两个球队节点，分别是名称为'Trail Blazers'的球队和名称为'Spurs'的球队。", "content": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"}
{"prompt": "插入两个顶点，一个顶点的属性为团队名称为\"Trail Blazers\"，另一个顶点的属性为团队名称为\"Spurs\"。", "content": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"}
{"prompt": "将'player101'关注'player100'，并设置关注度为95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "将实体'player101'和实体'player100'之间建立一条'关注'边，边的属性为'degree'，值为 95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "创建一条名为follow的边，表示从实体player101到实体player102的关注关系，该关系的程度为90。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"}
{"prompt": "在'player101'和'player102'之间建立一条'关注'边，边的属性为'degree'，值为 90。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"}
{"prompt": "将实体'player102'关注实体'player100'，并设置关注度为 75。", "content": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"}
{"prompt": "在'player102'和'player100'之间建立一条'follow'边，边的属性为'degree'，值为75。", "content": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"}
{"prompt": "插入一条边，表示'player101'从 1999 年到 2018 年为'team204'服务，同时插入另一条边，表示'player102'从 2006 年到 2015 年为'team203'服务。", "content": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"}
{"prompt": "添加'player101'从 1999 年到 2018 年期间对'team204'的服务边以及'player102'从 2006 年到 2015 年期间对'team203'的服务边。", "content": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。", "content": "GO FROM \"player101\" OVER follow YIELD id($$)"}
{"prompt": "请帮忙找出'player101'关注的所有实体，并返回终点所有实体的 ID。", "content": "GO FROM \"player101\" OVER follow YIELD id($$)"}
{"prompt": "请找出在'player101'所关注的人，年龄大于等于35岁的姓名和年龄。", "content": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"}
{"prompt": "找出年龄大于等于35岁的'player101'的所有关注者，并返回他们的姓名和年龄。", "content": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"}
{"prompt": "找出以'player101'为起点，通过'follow'关系连接的所有实体，并返回这些实体的属性中的'Team'和'Player'。", "content": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"}
{"prompt": "找出以'player101'为起点，通过'follow'关系所连接的实体，并返回这些实体的属性中的'Team'和'Player'。", "content": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"}
{"prompt": "找出'player101'关注的所有实体，并返回这些实体的 ID。", "content": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。", "content": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"}
{"prompt": "找到'player100'实体，并返回该实体的属性信息。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "返回'player100'实体的所有属性信息。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "将'player100'的名称更新为'Tim'。", "content": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""}
{"prompt": "将'player100'的姓名更新为'Tim'。", "content": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""}
{"prompt": "获取实体'player100'的属性并返回。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "获取'player100'的属性，并返回该实体的属性信息。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "将从'player101'指向'player100'的follow关系degree属性更新为96。", "content": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"}
{"prompt": "更新从'player101'指向'player100'的'follow'关系，将其的度数设置为96。", "content": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"}
{"prompt": "获取'player101'关注'player100'的边的属性。", "content": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"}
{"prompt": "获取从'player101'到'player100'的跟随关系上的属性，并返回这些属性。", "content": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"}
{"prompt": "插入一个名为‘David West’，唯一标识为'player111'且年龄为38的选手实体。", "content": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"}
{"prompt": "插入一个名为'David West'，年龄为38的球员实体，其唯一标识为'player111'。", "content": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"}
{"prompt": "如果player的名字是'David West'且年龄大于20，那么将player的名字改为'David'，年龄增加11岁，并返回修改后的名字和年龄。", "content": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"}
{"prompt": "如果存在名为'David West'且年龄大于20的球员，则将其姓名改为'David'，年龄增加11，并返回姓名和年龄。", "content": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"}
{"prompt": "删除实体'player111'和'team203'。", "content": "DELETE VERTEX \"player111\", \"team203\""}
{"prompt": "删除球员实体'player111'和队伍实体'team203'。", "content": "DELETE VERTEX \"player111\", \"team203\""}
{"prompt": "删除一条'follow'边，该边连接'player101'和'team204'。", "content": "DELETE EDGE follow \"player101\" -> \"team204\""}
{"prompt": "删除'player101'关注'team204'的边。", "content": "DELETE EDGE follow \"player101\" -> \"team204\""}
{"prompt": "如果不存在名为player_index_1的标签索引，就创建一个索引，该索引基于player标签的name属性，长度限制为20。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"}
{"prompt": "如果不存在名为player_index_1的标签索引，则创建一个名为player的标签上的索引，索引的属性为name，长度为20。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"}
{"prompt": "重建标签索引 player_index_1。", "content": "REBUILD TAG INDEX player_index_"}
{"prompt": "重建标签索引 player_index_1。", "content": "REBUILD TAG INDEX player_index_"}
{"prompt": "查找名字为'Tony Parker'的球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"}
{"prompt": "查找名为'Tony Parker'的球员的姓名和年龄。", "content": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"}
{"prompt": "找出名为\"Tony Parker\"的球员。", "content": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"}
{"prompt": "找出名为'Tony Parker'的球员。", "content": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"}
{"prompt": "添加主机 192.168.10.100:9779、192.168.10.101:9779、192.168.10.102:9779。", "content": "ADD HOSTS 192.168.10.100:9779, 192.168.10.101:9779, 192.168.10.102:9779"}
{"prompt": "添加主机192.168.10.100:9779、192.168.10.101:9779、192.168.10.102:9779。", "content": "ADD HOSTS 192.168.10.100:9779, 192.168.10.101:9779, 192.168.10.102:9779"}
{"prompt": "创建一个名为player的标签，包含姓名和年龄属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为player的标签，包含名字和年龄两个属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为team的标签，标签中包含一个名为name的字符串属性。", "content": "CREATE TAG team(name string)"}
{"prompt": "创建一个名为team的标签，该标签包含一个名为name的字符串属性。", "content": "CREATE TAG team(name string)"}
{"prompt": "创建一条名为follow的边，该边具有一个名为degree的属性。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条名为follow的边，该边具有一个名为degree的属性。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条带有起始年份和结束年份属性的serve边。", "content": "CREATE EDGE serve(start_year int, end_year int)"}
{"prompt": "创建一条边，表示服务关系，包括开始年份和结束年份。", "content": "CREATE EDGE serve(start_year int, end_year int)"}
{"prompt": "插入一个名为'Tim Duncan'，年龄为 42 的选手实体，并赋予其唯一标识'player100'。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个名为'player100'的球员实体，其姓名为'Tim Duncan'，年龄为 42 岁。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个名为'Tony Parker'年龄为 36 的选手实体。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入一个名为'Tony Parker'，年龄为36的球员实体，其ID为'player101'\"。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入一个名为LaMarcus Aldridge，年龄为33的球员实体，其ID为player102。", "content": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "新增一个ID为'player102'，名为'LaMarcus Aldridge'的33岁的球员。", "content": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入两个顶点，一个顶点的ID为team203，名称为'Trail Blazers'，另一个顶点的ID为team204，名称为'Spurs'。", "content": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"}
{"prompt": "插入两个顶点，一个顶点的ID为team203,姓名为Trail Blazers，另一个顶点的ID为team204，姓名为Spurs。", "content": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"}
{"prompt": "将实体'player101'关注实体'player100'的关系插入，关注度为95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "添加从'player101'到'player100'的关注边，并设置关注度为95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "将实体'player101'和实体'player102'之间建立一条'关注'边，边的属性为'degree'，值为 90。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"}
{"prompt": "将实体'player101'关注实体'player102'，并设置关注度为90。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"}
{"prompt": "将实体'player102'关注实体'player100'，并设置关注度为 75。", "content": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"}
{"prompt": "在follow关系中，将实体'player102'关注实体'player100'的度设置为75。", "content": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"}
{"prompt": "插入一条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，并插入另一条边，表示'player102'在 2006 年至 2015 年期间为'team203'服务。", "content": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"}
{"prompt": "将球员player101从1999年到2018年期间服务于球队team204，将球员player102从2006年到2015年期间服务于球队team203。", "content": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。", "content": "GO FROM \"player101\" OVER follow YIELD id($$)"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。", "content": "GO FROM \"player101\" OVER follow YIELD id($$)"}
{"prompt": "找出年龄大于等于35岁的'player101'的所有关注者，并返回他们的姓名和年龄。", "content": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"}
{"prompt": "找出年龄大于等于35岁的'player101'所关注的所有实体，并返回这些实体的姓名和年龄。", "content": "GO FROM \"player101\" OVER follow WHERE properties($$).age >= 35\nYIELD properties($$).name AS Teammate, properties($$).age AS Age"}
{"prompt": "找出以'player101'为起点的所有关注关系，然后找出这些关注关系的目标实体，并返回这些目标实体的属性中的球队名称和球员名称。", "content": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"}
{"prompt": "找出以'player101'为起点，通过'follow'关系连接的实体，并返回这些实体的属性中的'Team'和'Player'。", "content": "GO FROM \"player101\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"}
{"prompt": "找出'player101'关注的所有实体，并返回这些实体的 ID。", "content": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID。", "content": "$var = GO FROM \"player101\" OVER follow YIELD dst(edge) AS id"}
{"prompt": "获取'player100'的所有属性。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "获取'player100'的属性，并返回该实体的属性信息。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "将'player100'的姓名更新为'Tim'。", "content": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""}
{"prompt": "更新球员实体'player100'的姓名为'Tim'。", "content": "UPDATE VERTEX \"player100\" SET player.name = \"Tim\""}
{"prompt": "获取'player100'的属性，并返回该实体的属性信息。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "获取实体'player100'的所有属性。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "将关注关系中从'player101'到'player100'的边更新为度数为 96。", "content": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"}
{"prompt": "将从'player101'到'player100'的关注边的关注度设置为96。", "content": "UPDATE EDGE ON follow \"player101\" -> \"player100\" SET degree = 96"}
{"prompt": "获取从'player101'到'player100'的关注关系的属性。", "content": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"}
{"prompt": "获取从'player101'到'player100'的关注关系的属性。", "content": "FETCH PROP ON follow \"player101\" -> \"player100\" YIELD properties(edge)"}
{"prompt": "插入一个名为'David West'，年龄为 38 的选手实体，其标识为'player111'。", "content": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"}
{"prompt": "\"插入一个名为'player111'，年龄为 38 岁的球员'David West'的顶点\"。", "content": "INSERT VERTEX player(name,age) VALUES \"player111\":(\"David West\", 38)"}
{"prompt": "如果存在名为'David West'且年龄大于20的球员，将其姓名改为'David'，年龄增加11岁，并返回姓名和年龄。", "content": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"}
{"prompt": "如果存在名为'David West'且年龄大于20的球员，将其姓名改为'David'，年龄增加11岁，并返回姓名和年龄。", "content": "UPSERT VERTEX \"player111\" SET player.name = \"David\", player.age = $^.player.age + 11\nWHEN $^.player.name == \"David West\" AND $^.player.age > 20\nYIELD $^.player.name AS Name, $^.player.age AS Age"}
{"prompt": "删除实体'player111'和'team203'。", "content": "DELETE VERTEX \"player111\", \"team203\""}
{"prompt": "删除两个实体，id分别为'player111'和'team203'。", "content": "DELETE VERTEX \"player111\", \"team203\""}
{"prompt": "删除从'player101'到'team204'的关注关系边。", "content": "DELETE EDGE follow \"player101\" -> \"team204\""}
{"prompt": "删除一条关注边，是从'player101'到'team204'的边。", "content": "DELETE EDGE follow \"player101\" -> \"team204\""}
{"prompt": "如果不存在名为player_index_1的标签索引，就创建一个索引，索引的字段为player的name属性，长度限制为20。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"}
{"prompt": "如果不存在名为player_index_1的标签索引，则创建一个名为player的标签的索引，索引的属性为name，长度为20。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"}
{"prompt": "重建标签索引 player_index_1。", "content": "REBUILD TAG INDEX player_index_"}
{"prompt": "重建名为player_index_1的标签索引。", "content": "REBUILD TAG INDEX player_index_"}
{"prompt": "查找名为'Tony Parker'的球员的姓名和年龄。", "content": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"}
{"prompt": "查找名为'Tony Parker'的球员，并返回他的姓名和年龄。", "content": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"}
{"prompt": "找出名为'Tony Parker'的球员实体并返回。", "content": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"}
{"prompt": "找出名为'Tony Parker'的球员。", "content": "MATCH (v:player{name:\"Tony Parker\"}) RETURN v"}
{"prompt": "如果player标签不存在，则创建一个包含姓名和年龄属性的player标签。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "如果player标签不存在，则创建一个包含名称和年龄属性的player标签。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "计算1加1等于多少。", "content": "RETURN 1+1"}
{"prompt": "返回1+1的结果。", "content": "RETURN 1+1"}
{"prompt": "\"返回1加1是否等于2\"。", "content": "RETURN 1 + 1 == 2"}
{"prompt": "请问1+1等于2吗", "content": "RETURN 1+1==2"}
{"prompt": "返回11加12的结果。", "content": "RETURN 11 + 12"}
{"prompt": "请计算11+12。", "content": "RETURN 11+12"}
{"prompt": "如果my_space不存在，则创建一个名为my_space的空间，其中实体ID的类型为固定长度字符串，长度为30。", "content": "CREATE SPACE IF NOT EXISTS my_space (vid_type=FIXED_STRING(30))"}
{"prompt": "如果my_space不存在，则创建一个名为my_space的空间，其中实体ID的类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS my_space (vid_type=FIXED_STRING(30))"}
{"prompt": "使用MY_SPACE空间。", "content": "use MY_SPACE"}
{"prompt": "使用MY_SPACE空间。", "content": "use MY_SPACE"}
{"prompt": "展示所有空间。", "content": "show spaces"}
{"prompt": "显示所有的空间。", "content": "show spaces"}
{"prompt": "计算列表中各元素的数量，包括总数、不重复元素的数量。", "content": "WITH [NULL, 1, 1, 2, 2] As a\nUNWIND a AS b\nRETURN count(b), COUNT(*), couNT(DISTINCT b)"}
{"prompt": "统计列表中每个元素出现的次数，并返回总元素个数、不重复元素个数。", "content": "WITH [NULL, 1, 1, 2, 2] As a\nUNWIND a AS b\nRETURN count(b), COUNT(*), couNT(DISTINCT b)"}
{"prompt": "创建一个名为TAG的标签，标签中包含一个名为name的字符串属性。", "content": "CREATE TAG TAG(name string)"}
{"prompt": "创建一个名为TAG的标签，标签包含一个姓名属性。", "content": "CREATE TAG TAG(name string)"}
{"prompt": "创建一个名为TAG的标签，该标签包含一个姓名字符串属性。", "content": "CREATE TAG `TAG` (name string)"}
{"prompt": "创建一个名为TAG且包含姓名属性的标签", "content": "CREATE TAG `TAG` (name string)"}
{"prompt": "创建一个名为‘￥%特殊 字符&*+-*/’的标签，该标签包含一个名为‘q~！（）= wer’的字符串属性。", "content": "CREATE TAG `￥%特殊 字符&*+-*/` (`q~！（）= wer` string)"}
{"prompt": "创建一个名为‘特殊 字符&*+-*/’的标签，其属性为‘q~！（）= wer’的字符串类型。", "content": "CREATE TAG `￥%特殊 字符&*+-*/` (`q~！（）= wer` string)"}
{"prompt": "如果标签t1不存在，则创建一个名为t1的标签，该标签包含一个长度为10的固定字符串属性p1。", "content": "CREATE TAG IF NOT EXISTS t1 (p1 FIXED_STRING(10))"}
{"prompt": "如果t1标签不存在，则创建一个名为t1的标签，该标签具有一个长度为10的固定字符串属性p1。", "content": "CREATE TAG IF NOT EXISTS t1 (p1 FIXED_STRING(10))"}
{"prompt": "如果标签t2不存在，则创建标签t2，标签属性为p2，属性类型为字符串。", "content": "CREATE TAG IF NOT EXISTS t2 (p2 STRING)"}
{"prompt": "如果标签t2不存在，则创建一个名为t2的标签，该标签包含一个名为p2的字符串属性。", "content": "CREATE TAG IF NOT EXISTS t2 (p2 STRING)"}
{"prompt": "返回一个日期，该日期是公元前123年12月3日。", "content": "RETURN DATE({year:-123, month:12, day:3})"}
{"prompt": "返回一个日期，该日期为公元前123年12月3日。", "content": "RETURN DATE({year:-123, month:12, day:3})"}
{"prompt": "返回时间戳为'23333'的日期。", "content": "RETURN DATE(\"23333\")"}
{"prompt": "返回时间戳为23333的日期。", "content": "RETURN DATE(\"23333\")"}
{"prompt": "返回当前的日期和时间。", "content": "RETURN datetime()"}
{"prompt": "返回当前的日期和时间。", "content": "RETURN datetime()"}
{"prompt": "返回当前时间的小时数。", "content": "RETURN datetime().hour"}
{"prompt": "请问现在时间是几点。", "content": "RETURN datetime().hour"}
{"prompt": "返回时间戳1625469277对应的日期。", "content": "RETURN datetime(timestamp(1625469277))"}
{"prompt": "返回时间戳1625469277对应的时间。", "content": "RETURN datetime(timestamp(1625469277))"}
{"prompt": "返回时间戳1625469277对应的日期。", "content": "RETURN datetime(1625469277)"}
{"prompt": "返回时间戳1625469277对应的时间。", "content": "RETURN datetime(1625469277)"}
{"prompt": "返回当前的时间戳。", "content": "RETURN timestamp()"}
{"prompt": "查看当前的时间戳。", "content": "RETURN timestamp()"}
{"prompt": "返回时间戳为2022年1月5日06:18:43。", "content": "RETURN timestamp(\"2022-01-05T06:18:43\")"}
{"prompt": "返回时间戳为2022年1月5日06:18:43的结果。", "content": "RETURN timestamp(\"2022-01-05T06:18:43\")"}
{"prompt": "返回日期时间为2022年8月29日7点53分10.939秒的时间戳。", "content": "RETURN timestamp(datetime(\"2022-08-29T07:53:10.939000\"))"}
{"prompt": "返回2022年8月29日07:53:10.939的时间戳。", "content": "RETURN timestamp(datetime(\"2022-08-29T07:53:10.939000\"))"}
{"prompt": "如果date1标签不存在，则创建date1标签，该标签包含三个属性：p1为日期，p2为时间，p3为日期时间。", "content": "CREATE TAG IF NOT EXISTS date1(p1 date, p2 time, p3 datetime)"}
{"prompt": "如果date1标签不存在，则创建date1标签，该标签包含三个属性：p1为日期，p2为时间，p3为日期和时间。", "content": "CREATE TAG IF NOT EXISTS date1(p1 date, p2 time, p3 datetime)"}
{"prompt": "插入一个具有属性p1、p2和p3的data1日期节点，属性值分别为'test1'、'2021-03-17'、'17:53:59'和'2017-03-04T22:30:40.003000[Asia/Shanghai]'。", "content": "INSERT VERTEX date1(p1, p2, p3) VALUES \"test1\":(date(\"2021-03-17\"), time(\"17:53:59\"), datetime(\"2017-03-04T22:30:40.003000[Asia/Shanghai]\"))"}
{"prompt": "插入一个包含日期、时间和日期时间的data1顶点，属性值分别为：p1为日期\"2021-03-17\"，p2为时间\"17:53:59\"，p3为日期时间\"2017-03-04T22:30:40.003000[Asia/Shanghai]\"。", "content": "INSERT VERTEX date1(p1, p2, p3) VALUES \"test1\":(date(\"2021-03-17\"), time(\"17:53:59\"), datetime(\"2017-03-04T22:30:40.003000[Asia/Shanghai]\"))"}
{"prompt": "返回所有data1节点，并判断其p1属性是否为'2021-03-17'。", "content": "MATCH (v:date1) RETURN v.date1.p1 == date(\"2021-03-17\")"}
{"prompt": "获取所有data1节点，并判断p1属性是否为2021年3月17日。", "content": "MATCH (v:date1) RETURN v.date1.p1 == date(\"2021-03-17\")"}
{"prompt": "如果date1上的p1标签索引不存在，则创建一个p1标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS date1_index ON date1(p1)"}
{"prompt": "如果date1上的p1索引不存在，则创建p1索引。", "content": "CREATE TAG INDEX IF NOT EXISTS date1_index ON date1(p1)"}
{"prompt": "重建date1_index标签索引。", "content": "REBUILD TAG INDEX date1_index"}
{"prompt": "重建 date1_index 标签的索引。", "content": "REBUILD TAG INDEX date1_index"}
{"prompt": "返回所有date1节点中p1属性的月份。", "content": "MATCH (v:date1) RETURN v.date1.p1.month"}
{"prompt": "返回date1节点的属性p1的月份。", "content": "MATCH (v:date1) RETURN v.date1.p1.month"}
{"prompt": "找出日期属性p3小于2023年1月1日的所有实体，并返回它们的p3属性。", "content": "MATCH (v:date1)\nWHERE v.date1.p3 < datetime(\"2023-01-01T00:00:00.000000\")\nRETURN v.date1.p3"}
{"prompt": "找出日期属性p3小于2023年1月1日的所有实体，并返回它们的p3属性值。", "content": "MATCH (v:date1)\nWHERE v.date1.p3 < datetime(\"2023-01-01T00:00:00.000000\")\nRETURN v.date1.p3"}
{"prompt": "如果school标签不存在，则创建一个school标签，属性为名称和成立时间。", "content": "CREATE TAG IF NOT EXISTS school(name string , found_time timestamp)"}
{"prompt": "如果学校标签不存在，则创建一个学校标签，包含名称和创建时间两个属性。", "content": "CREATE TAG IF NOT EXISTS school(name string , found_time timestamp)"}
{"prompt": "创建一个id为'DUT'，名为'DUT'，成立时间为573206400的学校实体。", "content": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", 573206400)"}
{"prompt": "创建一个ID为'DUT'，名为'DUT'，成立时间为573206400的学校节点。", "content": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", 573206400)"}
{"prompt": "创建一个id为'DUT'，名为'DUT'，成立时间为1988年3月1日08:00:00的学校实体。", "content": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", timestamp(\"1988-03-01T08:00:00\"))"}
{"prompt": "创建一个ID为'DUT'，名为'DUT'，成立时间为'1988-03-01T08:00:00'的学校实体。", "content": "INSERT VERTEX school(name, found_time) VALUES \"DUT\":(\"DUT\", timestamp(\"1988-03-01T08:00:00\"))"}
{"prompt": "插入一个id为'dut'，名为'dut'，创建时间为当前时间的学校实体。", "content": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", now())"}
{"prompt": "插入一个ID为'dut'，名为'dut'，创建时间为当前时间的学校实体。", "content": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", now())"}
{"prompt": "创建一个id为'dut'的学校节点，其名称为'dut'，成立时间为当前时间。", "content": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", timestamp())"}
{"prompt": "创建一个ID为'dut'，名为'dut'，成立时间为当前时间戳的学校实体。", "content": "INSERT VERTEX school(name, found_time) VALUES \"dut\":(\"dut\", timestamp())"}
{"prompt": "返回时间为12点31分14秒111毫秒222微秒的时间。", "content": "WITH time({hour: 12, minute: 31, second: 14, millisecond:111, microsecond: 222}) AS d RETURN d"}
{"prompt": "返回时间为12点31分14秒111毫秒222微秒的时间。", "content": "WITH time({hour: 12, minute: 31, second: 14, millisecond:111, microsecond: 222}) AS d RETURN d"}
{"prompt": "返回1984年10月11日的日期加1后的结果。", "content": "WITH date({year: 1984, month: 10, day: 11}) AS x RETURN x + 1"}
{"prompt": "得到1984年10月11日的下一天。", "content": "WITH date({year: 1984, month: 10, day: 11}) AS x RETURN x + 1"}
{"prompt": "如果player标签不存在，则创建一个player标签，包含name（字符串类型，不能为空）和age（整数类型）属性。", "content": "CREATE TAG IF NOT EXISTS player(name string NOT NULL, age int)"}
{"prompt": "如果player标签不存在，则创建一个player标签，包含非空的姓名和年龄两个属性。", "content": "CREATE TAG IF NOT EXISTS player(name string NOT NULL, age int)"}
{"prompt": "显示创建标签player的语句。", "content": "SHOW CREATE TAG player"}
{"prompt": "显示创建标签player的语句。", "content": "SHOW CREATE TAG player"}
{"prompt": "插入一个名为'Kobe'的球员实体，包含属性'name'为'Kobe'和'age'为null。", "content": "INSERT VERTEX player(name, age) VALUES \"Kobe\":(\"Kobe\",null)"}
{"prompt": "插入一个名为'Kobe'，年龄为空的选手实体。", "content": "INSERT VERTEX player(name, age) VALUES \"Kobe\":(\"Kobe\",null)"}
{"prompt": "如果player标签不存在，则创建一个名为player的标签，包含姓名和年龄属性，默认年龄为18。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int NOT NULL DEFAULT 18)"}
{"prompt": "如果player标签不存在，则创建一个player标签，包含名字和年龄属性，年龄属性默认为18。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int NOT NULL DEFAULT 18)"}
{"prompt": "将名为'Kobe'的选手插入到player节点，并设置其name属性为'Kobe'。", "content": "INSERT VERTEX player(name) VALUES \"Kobe\":(\"Kobe\")"}
{"prompt": "插入一个名为'Kobe'的球员实体，并设置其ID为'Kobe'。", "content": "INSERT VERTEX player(name) VALUES \"Kobe\":(\"Kobe\")"}
{"prompt": "获取'Kobe'球员的所有属性，并返回这些属性的值。", "content": "FETCH PROP ON player \"Kobe\" YIELD properties(vertex)"}
{"prompt": "获取'Kobe'球员的所有属性。", "content": "FETCH PROP ON player \"Kobe\" YIELD properties(vertex)"}
{"prompt": "返回一个列表，列表中包含数字1、2、3。", "content": "RETURN list[1, 2, 3] AS a"}
{"prompt": "返回一个包含数字1、2、3的列表a。", "content": "RETURN list[1, 2, 3] AS a"}
{"prompt": "返回一个范围从1到5的数组中的第三个元素。", "content": "RETURN range(1,5)[3]"}
{"prompt": "返回范围1到5中的第3个数。", "content": "RETURN range(1,5)[3]"}
{"prompt": "返回一个范围从1到5的列表中的倒数第二个元素。", "content": "RETURN range(1,5)[-2]"}
{"prompt": "返回一个范围从1到5的数组中倒数第二个元素。", "content": "RETURN range(1,5)[-2]"}
{"prompt": "返回从1到5的范围中的前3个数字。", "content": "RETURN range(1,5)[0..3]"}
{"prompt": "返回一个从1到5的范围中的前4个数字。", "content": "RETURN range(1,5)[0..3]"}
{"prompt": "返回一个范围从1到5的整数列表中从第三个元素开始的所有元素。", "content": "RETURN range(1,5)[3..] AS a"}
{"prompt": "返回一个从1到5的范围，从第3个元素开始的所有元素作为a。", "content": "RETURN range(1,5)[3..] AS a"}
{"prompt": "返回列表中前三个元素。", "content": "WITH list[1, 2, 3, 4, 5] AS a\nRETURN a[..3] AS r"}
{"prompt": "返回列表中前三个元素。", "content": "WITH list[1, 2, 3, 4, 5] AS a\nRETURN a[..3] AS r"}
{"prompt": "返回一个列表，列表中的元素是从1到5之间大于2的数加上10的结果。", "content": "RETURN [n IN range(1,5) WHERE n > 2 | n + 10] AS a"}
{"prompt": "返回一个列表，列表中的元素是从1到5中大于2的每个数加上10的结果。", "content": "RETURN [n IN range(1,5) WHERE n > 2 | n + 10] AS a"}
{"prompt": "返回列表 [1, 2, 3] 中的所有元素", "content": "YIELD list[1, 2, 3][0..-1] AS a"}
{"prompt": "返回列表[1, 2, 3]中的所有元素。", "content": "YIELD list[1, 2, 3][0..-1] AS a"}
{"prompt": "返回列表[1, 2, 3, 4, 5]中倒数第三个到倒数第一个元素的子列表。", "content": "YIELD list[1, 2, 3, 4, 5][-3..-1] AS a"}
{"prompt": "返回列表[1, 2, 3, 4, 5]中倒数第三个到倒数第一个元素的子列表。", "content": "YIELD list[1, 2, 3, 4, 5][-3..-1] AS a"}
{"prompt": "返回一个变量 $var，其中包含了两个属性 f 和 t，分别赋值为 1 和 3。", "content": "$var = YIELD 1 AS f, 3 AS t"}
{"prompt": "返回一个变量 $var，其中包含了两个字段 f 和 t，分别对应值 1 和 3。", "content": "$var = YIELD 1 AS f, 3 AS t"}
{"prompt": "返回列表[1, 2, 3, 4, 5]中索引为0到10的元素作为a。", "content": "RETURN list[1, 2, 3, 4, 5] [0..10] AS a"}
{"prompt": "返回一个包含数字1到5的列表，并将该列表的索引范围从0到10赋值给变量a。", "content": "RETURN list[1, 2, 3, 4, 5] [0..10] AS a"}
{"prompt": "返回列表[1, 2, 3, 4, 5]中的第一个元素。", "content": "RETURN list[1, 2, 3, 4, 5] [0..0] AS a"}
{"prompt": "返回列表[1, 2, 3, 4, 5]中的第一个元素。", "content": "RETURN list[1, 2, 3, 4, 5] [0..0] AS a"}
{"prompt": "返回列表[1, 2, 3, 4, 5]中从第3个到第1个元素的子列表作为a。", "content": "RETURN list[1, 2, 3, 4, 5] [3..1] AS a"}
{"prompt": "返回一个列表a，其中包含从3到1的数字序列[3, 2, 1]。", "content": "RETURN list[1, 2, 3, 4, 5] [3..1] AS a"}
{"prompt": "返回列表中从第一个元素到最后一个元素的所有元素。", "content": "WITH list[1,2,3] AS a\nRETURN a[0..null] as r"}
{"prompt": "返回列表[1,2,3]的所有元素。", "content": "WITH list[1,2,3] AS a\nRETURN a[0..null] as r"}
{"prompt": "返回一个列表，列表中的元素是从1到5的每个数乘以2再减去10的结果。", "content": "RETURN tail([n IN range(1, 5) | 2 * n - 10]) AS a"}
{"prompt": "返回一个列表，列表中的每个元素是一个数字，这些数字是从1到5的范围内的每个数字乘以2再减去10的结果。", "content": "RETURN tail([n IN range(1, 5) | 2 * n - 10]) AS a"}
{"prompt": "返回一个包含从1到3的所有数字的列表r。", "content": "RETURN [n IN range(1, 3) WHERE true | n] AS r"}
{"prompt": "返回一个包含1到3之间所有数字的列表r。", "content": "RETURN [n IN range(1, 3) WHERE true | n] AS r"}
{"prompt": "返回列表[1,2,3]的大小。", "content": "RETURN size(list[1,2,3])"}
{"prompt": "返回列表 [1,2,3] 的长度。", "content": "RETURN size(list[1,2,3])"}
{"prompt": "寻找以'player100'为起点，通过'follow'边关系所连接的实体，并返回这些实体的ID和边的度数，其中边的度数不等于92或90加上终点实体的年龄。", "content": "GO FROM \"player100\" OVER follow WHERE properties(edge).degree NOT IN [x IN [92, 90] | x + $$.player.age]\nYIELD dst(edge) AS id, properties(edge).degree AS degree"}
{"prompt": "找出以'player100'为起点，通过'follow'边关系所连接的实体，并返回这些实体的ID和边的度数，其中边的度数不等于92或90加上终点实体的年龄。", "content": "GO FROM \"player100\" OVER follow WHERE properties(edge).degree NOT IN [x IN [92, 90] | x + $$.player.age]\nYIELD dst(edge) AS id, properties(edge).degree AS degree"}
{"prompt": "找出名为'Tim Duncan'的球员所关注的所有球员，并返回这些球员的年龄加100。", "content": "MATCH p = (n:player{name:\"Tim Duncan\"})-[:follow]->(m)\nRETURN [n IN nodes(p) | n.player.age + 100] AS r"}
{"prompt": "找出名为'Tim Duncan'的球员关注的所有球员，并返回这些球员的年龄加上100的结果。", "content": "MATCH p = (n:player{name:\"Tim Duncan\"})-[:follow]->(m)\nRETURN [n IN nodes(p) | n.player.age + 100] AS r"}
{"prompt": "返回一个范围从0到5的列表中的倒数第12个元素。", "content": "RETURN range(0,5)[-12]"}
{"prompt": "返回一个从0到5的范围内的数字，其中倒数第12个数字。", "content": "RETURN range(0,5)[-12]"}
{"prompt": "返回一个包含数字1、2和3的集合a。", "content": "RETURN set{1, 2, 3} AS a"}
{"prompt": "返回一个集合，其中包含数字1、2和3。", "content": "RETURN set{1, 2, 3} AS a"}
{"prompt": "返回一个集合，其中包含元素1和2。", "content": "RETURN set{1, 2, 1} AS a"}
{"prompt": "返回一个集合，其中包含元素1和2。", "content": "RETURN set{1, 2, 1} AS a"}
{"prompt": "判断1是否在集合{1, 2}中，并返回结果A。", "content": "RETURN 1 IN set{1, 2} AS a"}
{"prompt": "判断1是否在集合{1, 2}中", "content": "RETURN 1 IN set{1, 2} AS a"}
{"prompt": "计算集合{1, 2, 1}的大小，并将结果命名为a。", "content": "YIELD size(set{1, 2, 1}) AS a"}
{"prompt": "计算集合{1, 2, 1}的大小，返回结果a。", "content": "YIELD size(set{1, 2, 1}) AS a"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的姓名和年龄。", "content": "GO FROM \"player100\" OVER follow\nYIELD set{properties($$).name,properties($$).age} as a"}
{"prompt": "找出'player100'所'关注'的所有实体，并以set集合的形式返回这些实体的姓名和年龄。", "content": "GO FROM \"player100\" OVER follow\nYIELD set{properties($$).name,properties($$).age} as a"}
{"prompt": "返回一个包含键值对的映射，其中键为key1，值为'Value1'，键为Key2，值为'Value2'。", "content": "YIELD map{key1:'Value1', Key2:'Value2'} as a"}
{"prompt": "生成一个包含键值对的映射a，其中键为key1，值为Value1，键为Key2，值为Value2。", "content": "YIELD map{key1:'Value1', Key2:'Value2'} as a"}
{"prompt": "返回一个包含键为'listKey'，值为包含两个元素的列表的映射，其中每个元素是一个包含键为'inner'，值为'Map1'和'Map2'的映射。", "content": "YIELD map{listKey: [{inner:'Map1'}, {inner:'Map2'}]} as a"}
{"prompt": "获取一个包含两个元素的列表，每个元素都是一个包含一个键值对的映射，键为'inner'，值分别为'Map1'和'Map2'。", "content": "YIELD map{listKey: [{inner:'Map1'}, {inner:'Map2'}]} as a"}
{"prompt": "返回一个包含键值对的映射，其中键a对应一个列表[1,2]，键b对应一个集合{1,2}，键c对应字符串'hee'。", "content": "RETURN map{a: LIST[1,2], b: SET{1,2,1}, c: \"hee\"} as a"}
{"prompt": "返回一个包含键值对的map，其中键a对应列表[1,2]，键b对应集合{1,2}，键c对应字符串'hee'。", "content": "RETURN map{a: LIST[1,2], b: SET{1,2,1}, c: \"hee\"} as a"}
{"prompt": "判断'a'是否存在于包含键值对 {a:1, b:2} 的 MAP 中，并返回结果。", "content": "RETURN \"a\" IN MAP{a:1, b:2} AS a"}
{"prompt": "判断'a'是否在 {a:1, b:2} 这个映射中，并返回结果a。", "content": "RETURN \"a\" IN MAP{a:1, b:2} AS a"}
{"prompt": "将数组中的元素逐个展开，并将其转化为布尔类型，并返回转化后的结果。", "content": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"}
{"prompt": "将列表中的元素转换为布尔类型，并返回转换后的结果。", "content": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"}
{"prompt": "返回1、1.3、1000和NaN的浮点数值。", "content": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"}
{"prompt": "以浮点数形式返回1、1.3、1e3和not a number。", "content": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"}
{"prompt": "如果不存在，创建一个名为any_shape的标签，该标签包含一个地理形状的geography。", "content": "CREATE TAG IF NOT EXISTS any_shape(geo geography)"}
{"prompt": "如果不存在any_shape标签，就创建一个名为any_shape的标签，该标签包含一个地理形状的geography属性。", "content": "CREATE TAG IF NOT EXISTS any_shape(geo geography)"}
{"prompt": "如果只有标签 only_point 不存在，则创建一个包含地理位置信息的标签。", "content": "CREATE TAG IF NOT EXISTS only_point(geo geography(point))"}
{"prompt": "如果不存在only_point标签，则创建一个具有地理位置信息的标签。", "content": "CREATE TAG IF NOT EXISTS only_point(geo geography(point))"}
{"prompt": "如果只有标签only_linestring不存在，则创建一个具有地理线串属性的标签。", "content": "CREATE TAG IF NOT EXISTS only_linestring(geo geography(linestring))"}
{"prompt": "如果only_linestring标签不存在，则创建一个包含linestring类型地理信息的only_linestring标签。", "content": "CREATE TAG IF NOT EXISTS only_linestring(geo geography(linestring))"}
{"prompt": "如果不存在，则创建一个名为only_polygon的标签，其属性为一个地理多边形。", "content": "CREATE TAG IF NOT EXISTS only_polygon(geo geography(polygon))"}
{"prompt": "如果only_polygon标签不存在，则创建一个具有多边形地理属性的only_polygon标签。", "content": "CREATE TAG IF NOT EXISTS only_polygon(geo geography(polygon))"}
{"prompt": "如果不存在，则创建一个具有地理信息的任意形状的any_shape_edge边。", "content": "CREATE EDGE IF NOT EXISTS any_shape_edge(geo geography)"}
{"prompt": "如果不存在any_shape_edge边，则创建一个具有地理属性的任意形状的any_shape_edge边。", "content": "CREATE EDGE IF NOT EXISTS any_shape_edge(geo geography)"}
{"prompt": "在ID为103的顶点上插入一个具有多边形形状的地理位置。", "content": "INSERT VERTEX any_shape(geo) VALUES \"103\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"}
{"prompt": "在 ID 为'103'的顶点中插入一个任意形状的地理图形，该图形是由多个点构成的多边形。", "content": "INSERT VERTEX any_shape(geo) VALUES \"103\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"}
{"prompt": "将一个具有几何形状的边插入到实体201和实体302之间，该边的几何形状是一个由四个点组成的多边形。", "content": "INSERT EDGE any_shape_edge(geo) VALUES \"201\"->\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"}
{"prompt": "在'201'和'302'之间插入一个任意形状的边，该边的几何形状为多边形，顶点坐标为 (0 1, 1 2, 2 3, 0 1)", "content": "INSERT EDGE any_shape_edge(geo) VALUES \"201\"->\"302\":(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"}
{"prompt": "获取 ID 为'103'的 any_shape 实体的地理信息并返回。", "content": "FETCH PROP ON any_shape \"103\" YIELD ST_ASText(any_shape.geo)"}
{"prompt": "获取实体类型为 any_shape，ID为103的实体的几何信息，并返回其以文本形式表示的几何信息。", "content": "FETCH PROP ON any_shape \"103\" YIELD ST_ASText(any_shape.geo)"}
{"prompt": "获取从实体201到实体302的任意形状边的几何信息。", "content": "FETCH PROP ON any_shape_edge \"201\"->\"302\" YIELD ST_ASText(any_shape_edge.geo)"}
{"prompt": "获取边'201'->'302'上的属性，返回该边的几何属性的文本表示。", "content": "FETCH PROP ON any_shape_edge \"201\"->\"302\" YIELD ST_ASText(any_shape_edge.geo)"}
{"prompt": "在any_shape标签上创建一个名为any_shape_geo_index的索引，该索引是基于geo属性的。", "content": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo)"}
{"prompt": "如果不存在的话，在any_shape标签上创建一个名为any_shape_geo_index的索引，该索引是基于geo属性的。", "content": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo)"}
{"prompt": "重建标签索引any_shape_geo_index。", "content": "REBUILD TAG INDEX any_shape_geo_index"}
{"prompt": "重建any_shape_geo_index索引。", "content": "REBUILD TAG INDEX any_shape_geo_index"}
{"prompt": "查找any_shape中所有实体的地理位置，并返回这些地理位置的文本表示。", "content": "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo)"}
{"prompt": "查找any_shape的所有实体的几何信息，并返回其文本形式。", "content": "LOOKUP ON any_shape YIELD ST_ASText(any_shape.geo)"}
{"prompt": "如果any_shape上的geo属性没有索引，则创建一个名为any_shape_geo_index的索引，使用s2算法，最大层级为30，最大单元格数为8。", "content": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8)"}
{"prompt": "如果any_shape上的geo属性不存在索引，则创建一个名为any_shape_geo_index的索引，该索引使用s2算法，最大层级为30，最大单元格数为8。", "content": "CREATE TAG INDEX IF NOT EXISTS any_shape_geo_index ON any_shape(geo) with (s2_max_level=30, s2_max_cells=8)"}
{"prompt": "显示所有标签。", "content": "SHOW TAGS"}
{"prompt": "请展示所有标签。", "content": "SHOW TAGS"}
{"prompt": "插入一个名为'player100'的球员，其姓名为'Tim Duncan'，年龄为 42。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "\"插入一个名为'Tim Duncan'年龄为 42 的球员实体，并赋予其唯一标识'player100'\"。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的实体，并返回这些实体的属性中的'Team'和'Player'。", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"}
{"prompt": "找出以'player100'为起点，通过'follow'关系所连接的实体，并返回这些实体的属性中的'Team'和'Player'。", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS id |\nGO FROM $-.id OVER serve YIELD properties($$).name AS Team,\nproperties($^).name AS Player"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回该球员的信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v"}
{"prompt": "返回名为'Tim Duncan'的球员的全部信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) RETURN v"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的 ID。", "content": "$var = GO FROM \"player100\" OVER follow YIELD dst(edge) AS id"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的 ID。", "content": "$var = GO FROM \"player100\" OVER follow YIELD dst(edge) AS id"}
{"prompt": "找出以'player100'为起点，通过'follow'关系所连接的实体，并返回起点实体的姓名和终点实体的年龄。", "content": "GO FROM \"player100\" OVER follow YIELD $^.player.name AS startName, $$.player.age AS endAge"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的实体，并返回起点实体的姓名和这些终点实体的年龄。", "content": "GO FROM \"player100\" OVER follow YIELD $^.player.name AS startName, $$.player.age AS endAge"}
{"prompt": "找出'player100'的所有关注者，并返回关注边的关注度属性。", "content": "GO FROM \"player100\" OVER follow YIELD follow.degree"}
{"prompt": "找出'player100'的所有关注者，并返回关注者对其的关注度。", "content": "GO FROM \"player100\" OVER follow YIELD follow.degree"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的源节点、目标节点、关系类型和关系权重。", "content": "GO FROM \"player100\" OVER follow YIELD follow._src, follow._dst, follow._type, follow._rank"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的源节点、目标节点、关系类型和权重。", "content": "GO FROM \"player100\" OVER follow YIELD follow._src, follow._dst, follow._type, follow._rank"}
{"prompt": "判断'A'是否等于'a'，判断将'A'转换为大写后是否等于将'a'转换为大写后，判断将'A'转换为小写后是否等于将'a'转换为小写后。", "content": "RETURN'A'=='a', toUpper('A') == toUpper('a'), toLower('A') == toLower('a')"}
{"prompt": "判断'A'是否等于'a'，判断将'A'转为大写后是否等于将'a'转为大写后，判断将'A'转为小写后是否等于将'a'转为小写后。", "content": "RETURN'A'=='a', toUpper('A') == toUpper('a'), toLower('A') == toLower('a')"}
{"prompt": "判断'2'是否等于2，并判断将字符串'2'转换为整数后是否等于2。", "content": "RETURN'2'== 2, toInteger('2') == 2"}
{"prompt": "判断'2'是否等于2，判断将'2'转换为整数后是否等于2。", "content": "RETURN'2'== 2, toInteger('2') == 2"}
{"prompt": "判断3是否大于2。", "content": "RETURN 3 > 2"}
{"prompt": "返回3是否大于2。", "content": "RETURN 3 > 2"}
{"prompt": "返回4是否大于3的结果。", "content": "WITH 4 AS one, 3 AS two\nRETURN one > two AS result"}
{"prompt": "判断4是否大于3，并返回结果。", "content": "WITH 4 AS one, 3 AS two\nRETURN one > two AS result"}
{"prompt": "返回一个布尔值，表示2是否大于等于'2'，以及2是否大于等于2。", "content": "RETURN 2 >= \"2\", 2 >= 2"}
{"prompt": "判断2是否大于等于'2'，并判断2是否大于等于2。", "content": "RETURN 2 >= \"2\", 2 >= 2"}
{"prompt": "判断2.0是否小于1.9。", "content": "YIELD 2.0 < 1.9"}
{"prompt": "判断2.0是否小于1.9。", "content": "YIELD 2.0 < 1.9"}
{"prompt": "判断0.11是否小于等于0.11。", "content": "YIELD 0.11 <= 0.11"}
{"prompt": "判断0.11是否小于等于0.11。", "content": "YIELD 0.11 <= 0.11"}
{"prompt": "判断1是否不等于'1'。", "content": "YIELD 1 !='1'"}
{"prompt": "判断1是否不等于'1'。", "content": "YIELD 1 !='1'"}
{"prompt": "返回值1为真，值2为真，值3为假。", "content": "RETURN null IS NULL AS value1, null == null AS value2, null != null AS value3"}
{"prompt": "返回值1为真，值2为真，值3为假。", "content": "RETURN null IS NULL AS value1, null == null AS value2, null != null AS value3"}
{"prompt": "返回空值的长度、大小、计数，判断空值是否为空，判断空值是否不为空，对空值进行正弦运算，对两个空值相加，判断数组[1,空值]是否为空。", "content": "RETURN length(NULL), size(NULL), count(NULL), NULL IS NULL, NULL IS NOT NULL, sin(NULL), NULL + NULL, [1, NULL] IS NULL"}
{"prompt": "返回NULL的长度、大小、计数，判断NULL是否为空，判断NULL是否不为空，计算NULL的正弦值，计算NULL加NULL的结果，判断[1, NULL]是否为空。", "content": "RETURN length(NULL), size(NULL), count(NULL), NULL IS NULL, NULL IS NOT NULL, sin(NULL), NULL + NULL, [1, NULL] IS NULL"}
{"prompt": "返回一个布尔值，表示`map`中的`name`是否不为空。", "content": "WITH {name: null} AS `map`\nRETURN `map`.name IS NOT NULL"}
{"prompt": "返回map中name字段是否不为空。", "content": "WITH {name: null} AS `map`\nRETURN `map`.name IS NOT NULL"}
{"prompt": "已知map1为'{name:'Mats', name2:'Pontus'}'，map2为'{name: null}'，map3为'{notName: 0, notName2: null }'，返回map1的name是否为空，返回map2的name是否不为空，返回map3的name是否为空。", "content": "WITH {name:'Mats', name2:'Pontus'} AS map1,\n{name: null} AS map2, {notName: 0, notName2: null } AS map3\nRETURN map1.name IS NULL, map2.name IS NOT NULL, map3.name IS NULL"}
{"prompt": "已知map1为'{name:'Mats', name2:'Pontus'}'，map2为'{name: null}'，map3为'{notName: 0, notName2: null }'，返回map1的姓名是否为空，返回map2的名字是否不为空，返回map3的姓名是否为空。", "content": "WITH {name:'Mats', name2:'Pontus'} AS map1,\n{name: null} AS map2, {notName: 0, notName2: null } AS map3\nRETURN map1.name IS NULL, map2.name IS NOT NULL, map3.name IS NULL"}
{"prompt": "找到所有player节点中的age属性为空，name属性不为空，empty属性为空的节点。", "content": "MATCH (n:player)\nRETURN n.player.age IS NULL, n.player.name IS NOT NULL, n.player.empty IS NULL"}
{"prompt": "返回所有player节点中，age属性为空、name属性不为空、empty属性为空的节点。", "content": "MATCH (n:player)\nRETURN n.player.age IS NULL, n.player.name IS NOT NULL, n.player.empty IS NULL"}
{"prompt": "返回字符串'a'是否不为空。", "content": "RETURN \"a\" IS NOT EMPTY"}
{"prompt": "返回'a'是否不为空。", "content": "RETURN \"a\" IS NOT EMPTY"}
{"prompt": "找出'player100'实体所有关联的实体，其中实体的姓名属性不为空，并返回这些实体通往目的地的边。", "content": "GO FROM \"player100\" OVER * WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"}
{"prompt": "找出id为'player100'的实体所有姓名不为空的关联实体，并返回这些通往这些实体的边。", "content": "GO FROM \"player100\" OVER * WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体关注的实体。", "content": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dstid, properties($$).name AS Name |\nGO FROM $-.dstid OVER follow YIELD dst(edge)"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体所关注的实体。", "content": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dstid, properties($$).name AS Name |\nGO FROM $-.dstid OVER follow YIELD dst(edge)"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的年龄", "content": "GO FROM \"player100\" OVER follow YIELD properties($^).age AS SrcAge, properties($$).age AS DestAge"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的实体，并返回起点实体的年龄（SrcAge）和连接实体的年龄（DestAge）。", "content": "GO FROM \"player100\" OVER follow YIELD properties($^).age AS SrcAge, properties($$).age AS DestAge"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的姓名和所属的球队名称。", "content": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id |\nGO FROM $-.id OVER serve\nYIELD properties($^).name AS Player, properties($$).name AS Team"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体所属的队伍和球员名称。", "content": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id |\nGO FROM $-.id OVER serve\nYIELD properties($^).name AS Player, properties($$).name AS Team"}
{"prompt": "找出'player102'和'player100'所'关注'的所有实体的边的目标节点，并返回这些目标节点。", "content": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION\nGO FROM \"player100\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player102'和'player100'所'关注'的所有实体，并返回这些实体的边的目标实体。", "content": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION\nGO FROM \"player100\" OVER follow YIELD dst(edge)"}
{"prompt": "找出前三名球员的姓名，并将'Tony Parker'和'Ben Simmons'的姓名合并返回。", "content": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"}
{"prompt": "找出前三名球员的姓名，并与'Tony Parker'和'Ben Simmons'的姓名合并返回。", "content": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"}
{"prompt": "找出'player102'和'player100'所'关注'的所有实体，并返回这些实体的边的目标实体。", "content": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION ALL\nGO FROM \"player100\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player102'和'player100'所'关注'的所有实体，并返回这些实体的边的目标节点", "content": "GO FROM \"player102\" OVER follow YIELD dst(edge)\nUNION ALL\nGO FROM \"player100\" OVER follow YIELD dst(edge)"}
{"prompt": "找出前三个球员的姓名，并将'Tony Parker'和'Ben Simmons'的姓名返回。", "content": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"}
{"prompt": "找出前三个球员的名字，并将'Tony Parker'和'Ben Simmons'的名字展开返回。", "content": "MATCH (v:player)\nWITH v.player.name AS n\nRETURN n ORDER BY n LIMIT 3\nUNION ALL\nUNWIND [\"Tony Parker\", \"Ben Simmons\"] AS n\nRETURN n"}
{"prompt": "找出'player102'关注的所有实体，返回这些实体的ID、边的度和'player102'的年龄，再加上'player100'关注的所有实体的ID、边的度和'player100'的年龄。", "content": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nUNION /* DISTINCT */\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"}
{"prompt": "找出'player102'和'player100'关注的实体，返回这些实体的ID、边的度和'player100'的年龄。", "content": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nUNION /* DISTINCT */\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"}
{"prompt": "找出'player102'和'player100'之间共同关注的实体，并返回这些实体的ID、边的度和'player102'的年龄。", "content": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nINTERSECT\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"}
{"prompt": "找出'player102'和'player100'之间共同关注的实体，并返回这些实体的 ID、边的度和'player102'的年龄。", "content": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age\nINTERSECT\nGO FROM \"player100\" OVER follow\nYIELD dst(edge) AS id, properties(edge).degree AS Degree, properties($$).age AS Age"}
{"prompt": "找出与'player102'有关系的实体的ID、度和年龄，与'player100'有关系的实体的ID、度和年龄的交集。", "content": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age"}
{"prompt": "找出ID为player102和player100的球员所关注的共同球员，并返回这些共同球员的ID、关注度和年龄。", "content": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player102\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age\nINTERSECT\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) As id, e.degree As Degree, v2.player.age AS Age"}
{"prompt": "返回同时出现在两个列表中的元素。", "content": "UNWIND [1,2] AS a RETURN a\nINTERSECT\nUNWIND [1,2,3,4] AS a\nRETURN a"}
{"prompt": "返回同时出现在列表[1,2]和[1,2,3,4]中的元素。", "content": "UNWIND [1,2] AS a RETURN a\nINTERSECT\nUNWIND [1,2,3,4] AS a\nRETURN a"}
{"prompt": "找出'player100'关注的实体中，不关注'player102'的实体。", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge)\nMINUS\nGO FROM \"player102\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player100'关注的实体中，不包括'player102'关注的实体。", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge)\nMINUS\nGO FROM \"player102\" OVER follow YIELD dst(edge)"}
{"prompt": "找出ID为player102的球员所关注的球员ID，排除ID为player100的球员所关注的球员ID。", "content": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id"}
{"prompt": "找出ID为player102的球员所关注的球员ID，排除ID为player100的球员所关注的球员ID。", "content": "MATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player102\"\nRETURN id(v2) AS id\nMINUS\nMATCH (v:player)-[e:follow]->(v2)\nWHERE id(v) ==\"player100\"\nRETURN id(v2) AS id"}
{"prompt": "返回数组[1,2,3]中的所有元素，除了数字4。", "content": "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a"}
{"prompt": "返回数组[1,2,3]中的所有元素，除了数字4。", "content": "UNWIND [1,2,3] AS a RETURN a\nMINUS\nWITH 4 AS a\nRETURN a"}
{"prompt": "寻找两个集合的并集，集合一为以'player102'为起点，通过'follow'关系能够到达的所有实体；集合二为以'team200'为终点，通过'serve'关系的反向边能够到达的所有实体为起点，通过'follow'关系能够到达的所有实体。", "content": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS play_dst\nUNION\nGO FROM \"team200\" OVER serve REVERSELY\nYIELD src(edge) AS play_src\n| GO FROM $-.play_src OVER follow YIELD dst(edge) AS play_dst"}
{"prompt": "集合一为以'player102'为起点，通过'follow'关系能够到达的所有实体；集合二为以'team200'为终点，通过'serve'关系的反向边能够到达的所有实体为起点，通过'follow'关系能够到达的所有实体。获取两个集合的并集", "content": "GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS play_dst\nUNION\nGO FROM \"team200\" OVER serve REVERSELY\nYIELD src(edge) AS play_src\n| GO FROM $-.play_src OVER follow YIELD dst(edge) AS play_dst"}
{"prompt": "找出'player102'关注的所有实体和'team200'为其服务的所有实体，并返回这些实体关注的实体。", "content": "(GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS play_dst\nUNION\nGO FROM \"team200\" OVER serve REVERSELY\nYIELD src(edge) AS play_dst)\n| GO FROM $-.play_dst OVER follow YIELD dst(edge) AS play_dst"}
{"prompt": "找出以'player102'为起点的所有边的终点，并将它们与以'team200'为起点的所有边的起点合并，然后再以这些合并后的边的终点为起点，找出它们所关注的实体的边的终点。", "content": "(GO FROM \"player102\" OVER follow\nYIELD dst(edge) AS play_dst\nUNION\nGO FROM \"team200\" OVER serve REVERSELY\nYIELD src(edge) AS play_dst)\n| GO FROM $-.play_dst OVER follow YIELD dst(edge) AS play_dst"}
{"prompt": "返回a+b的值'。", "content": "RETURN'a'+'b'"}
{"prompt": "获取a加b的值'。", "content": "RETURN'a'+'b'"}
{"prompt": "将'a'和'b'分别展开，并返回它们的和。", "content": "UNWIND'a'AS a UNWIND'b'AS b RETURN a + b"}
{"prompt": "将'a'和'b'分别展开，然后返回它们的和。", "content": "UNWIND'a'AS a UNWIND'b'AS b RETURN a + b"}
{"prompt": "找出 ID 为'player101'的球员所在的所有球队名称，以及球员在球队中的起始年份和结束年份。", "content": "MATCH (s:player)-[e:serve]->(t:team) WHERE id(s) == \"player101\"\nAND t.team.name CONTAINS \"ets\" RETURN s.player.name, e.start_year, e.end_year, t.team.name"}
{"prompt": "找出ID为player101的球员所在的所有球队中，球队名称包含'ets'的球队，并返回球员姓名、任职起始年份、任职结束年份和球队名称。", "content": "MATCH (s:player)-[e:serve]->(t:team) WHERE id(s) == \"player101\"\nAND t.team.name CONTAINS \"ets\" RETURN s.player.name, e.start_year, e.end_year, t.team.name"}
{"prompt": "找出以'player101'为起点，通过'serve'关系边，起始年份包含'19'且姓名包含'ny'的所有终点实体，并返回这些实体的名称、起始年份、终止年份和关系边的名称。", "content": "GO FROM \"player101\" OVER serve WHERE (STRING)properties(edge).start_year CONTAINS \"19\" AND\nproperties($^).name CONTAINS \"ny\"\nYIELD properties($^).name, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "找出以'player101'为起点的边，满足起始年份包含'19'且目标节点姓名包含'ny'的所有属性，并返回这些属性的名称、起始年份、结束年份和目标节点名称。", "content": "GO FROM \"player101\" OVER serve WHERE (STRING)properties(edge).start_year CONTAINS \"19\" AND\nproperties($^).name CONTAINS \"ny\"\nYIELD properties($^).name, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "找出以'player101'为起点，通过'serve'关系连接的实体中，排除名称中包含'ets'的实体，并返回这些实体的名称、起始年份、结束年份和'player101'的名称。", "content": "GO FROM \"player101\" OVER serve WHERE !(properties($$).name CONTAINS \"ets\")\nYIELD properties($^).name, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "找出'player101'所参与的所有服务关系，其中不包含名称中包含'ets'的关系，并返回关系的起始年份、结束年份和关联实体的名称。", "content": "GO FROM \"player101\" OVER serve WHERE !(properties($$).name CONTAINS \"ets\")\nYIELD properties($^).name, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "返回1是否存在于[1,2,3]中，\"Yao\"是否不在[\"Yi\", \"Tim\", \"Kobe\"]中，NULL是否在[\"Yi\", \"Tim\", \"Kobe\"]中。", "content": "RETURN 1 IN [1,2,3], \"Yao\" NOT IN [\"Yi\", \"Tim\", \"Kobe\"], NULL IN [\"Yi\", \"Tim\", \"Kobe\"]"}
{"prompt": "返回1是否在[1,2,3]中，'Yao'是否不在['Yi','Tim','Kobe']中，NULL是否在['Yi','Tim','Kobe']中。", "content": "RETURN 1 IN [1,2,3], \"Yao\" NOT IN [\"Yi\", \"Tim\", \"Kobe\"], NULL IN [\"Yi\", \"Tim\", \"Kobe\"]"}
{"prompt": "返回以字符串'apple'是否以'app'开头、以'a'开头、以大写的'a'开头。", "content": "RETURN'apple'STARTS WITH'app','apple'STARTS WITH'a','apple'STARTS WITH toUpper('a')"}
{"prompt": "返回以字符串'apple'是否以'app'开头、以'a'开头、以大写字母'A'开头。", "content": "RETURN'apple'STARTS WITH'app','apple'STARTS WITH'a','apple'STARTS WITH toUpper('a')"}
{"prompt": "请问字符串'apple'是否以'b'为开头，以及'apple'是否以'app'为开头。", "content": "RETURN'apple'STARTS WITH'b','apple'NOT STARTS WITH'app'"}
{"prompt": "请问字符串'apple'是否以'b'为起始子串，以及'apple'是否以'app'为起始子串。", "content": "RETURN'apple'STARTS WITH'b','apple'NOT STARTS WITH'app'"}
{"prompt": "返回'apple'是否以'app'结尾、是否以'e'结尾、是否以'E'结尾、是否以'b'结尾。", "content": "RETURN'apple'ENDS WITH'app','apple'ENDS WITH'e','apple'ENDS WITH'E','apple'ENDS WITH'b'"}
{"prompt": "返回一些布尔值，分别表示'apple'是否以'app'结尾、以'e'结尾、以'E'结尾、以'b'结尾。", "content": "RETURN'apple'ENDS WITH'app','apple'ENDS WITH'e','apple'ENDS WITH'E','apple'ENDS WITH'b'"}
{"prompt": "返回字符串'384748.39'是否匹配正则表达式'\\\\d+(\\\\.\\\\d{2})?'。", "content": "RETURN \"384748.39\" =~ \"\\\\d+(\\\\.\\\\d{2})?\""}
{"prompt": "返回字符串'384748.39'是否匹配正则表达式'\\\\d+(\\\\.\\\\d{2})?'。", "content": "RETURN \"384748.39\" =~ \"\\\\d+(\\\\.\\\\d{2})?\""}
{"prompt": "找出名字以'Tony'开头的球员，并返回他们的名字。", "content": "MATCH (v:player) WHERE v.player.name =~'Tony.*'RETURN v.player.name"}
{"prompt": "获取名字以'Tony'开头的所有球员，并返回他们的名字。", "content": "MATCH (v:player) WHERE v.player.name =~'Tony.*'RETURN v.player.name"}
{"prompt": "将列表[1,2,3,4,5]和列表[6,7]相拼接，并将结果命名为myList。", "content": "YIELD [1,2,3,4,5]+[6,7] AS myList"}
{"prompt": "计算列表[1,2,3,4,5]与列表[6,7]的拼接结果，并将结果命名为myList。", "content": "YIELD [1,2,3,4,5]+[6,7] AS myList"}
{"prompt": "返回列表中的元素数量。", "content": "RETURN size([NULL, 1, 2])"}
{"prompt": "返回一个包含三个元素的列表的大小。", "content": "RETURN size([NULL, 1, 2])"}
{"prompt": "返回一个包含NULL和1的列表。", "content": "RETURN NULL IN [NULL, 1]"}
{"prompt": "返回一个包含NULL和1的列表。", "content": "RETURN NULL IN [NULL, 1]"}
{"prompt": "返回在给定的数字列表[2, 3, 4, 5]中，包含在另一个列表[2, 3, 8]中的数字。。", "content": "WITH [2, 3, 4, 5] AS numberlist\nUNWIND numberlist AS number\nWITH number\nWHERE number IN [2, 3, 8]\nRETURN number"}
{"prompt": "返回两个数字列表[2, 3, 8]以及[2, 3, 4, 5]的并集。", "content": "WITH [2, 3, 4, 5] AS numberlist\nUNWIND numberlist AS number\nWITH number\nWHERE number IN [2, 3, 8]\nRETURN number"}
{"prompt": "返回名字列表['Anne','John','Bill','Diane','Eve']中的第二个名字作为结果。", "content": "WITH ['Anne','John','Bill','Diane','Eve'] AS names RETURN names[1] AS result"}
{"prompt": "获取名字列表['Anne','John','Bill','Diane','Eve']中的下标为1的名字。", "content": "WITH ['Anne','John','Bill','Diane','Eve'] AS names RETURN names[1] AS result"}
{"prompt": "返回2加上3乘以5的结果。", "content": "RETURN 2+3*5"}
{"prompt": "返回3乘以5再加上2的结果。", "content": "RETURN 2+3*5"}
{"prompt": "计算2加3的和，然后乘以5。", "content": "RETURN (2+3)*5"}
{"prompt": "返回(2+3)*5的结果。", "content": "RETURN (2+3)*5"}
{"prompt": "返回-10的绝对值。", "content": "RETURN abs(-10)"}
{"prompt": "得到-10的绝对值。", "content": "RETURN abs(-10)"}
{"prompt": "请帮我计算5减6的绝对值。", "content": "RETURN abs(5-6)"}
{"prompt": "计算5-6的绝对值并返回结果。", "content": "RETURN abs(5-6)"}
{"prompt": "返回9.9的向下取整结果。", "content": "RETURN floor(9.9)"}
{"prompt": "返回9.9的下取整值。", "content": "RETURN floor(9.9)"}
{"prompt": "返回9.1的向上取整结果。", "content": "RETURN ceil(9.1)"}
{"prompt": "返回9.1的向上取整结果。", "content": "RETURN ceil(9.1)"}
{"prompt": "返回314.15926的四舍五入结果，保留两位小数。", "content": "RETURN round(314.15926, 2)"}
{"prompt": "返回314.15926的四舍五入结果，保留两位小数。", "content": "RETURN round(314.15926, 2)"}
{"prompt": "得到距离314.15926四舍五入的最近的十位数。", "content": "RETURN round(314.15926, -1)"}
{"prompt": "返回将314.15926四舍五入到最近的十位数的结果。", "content": "RETURN round(314.15926, -1)"}
{"prompt": "返回9的平方根。", "content": "RETURN sqrt(9)"}
{"prompt": "返回9的开方。", "content": "RETURN sqrt(9)"}
{"prompt": "计算8的立方根并返回结果。", "content": "RETURN cbrt(8)"}
{"prompt": "计算8的立方根并返回结果。", "content": "RETURN cbrt(8)"}
{"prompt": "计算3的3次方并返回结果。", "content": "RETURN pow(3,3)"}
{"prompt": "计算3的3次方并返回结果。", "content": "RETURN pow(3,3)"}
{"prompt": "计算2的指数值并返回结果。", "content": "RETURN exp(2)"}
{"prompt": "计算2的指数值并返回结果。", "content": "RETURN exp(2)"}
{"prompt": "请帮我计算2的3次方。", "content": "RETURN exp2(3)"}
{"prompt": "返回2的3次幂。", "content": "RETURN exp2(3)"}
{"prompt": "返回8的对数。", "content": "RETURN log(8)"}
{"prompt": "返回8的对数。", "content": "RETURN log(8)"}
{"prompt": "返回8以2为底的对数。", "content": "RETURN log2(8)"}
{"prompt": "计算以2为底的8的对数。", "content": "RETURN log2(8)"}
{"prompt": "返回100以10为底的对数。", "content": "RETURN log10(100)"}
{"prompt": "以10为底，请帮我计算100的对数。", "content": "RETURN log10(100)"}
{"prompt": "返回3的正弦值。", "content": "RETURN sin(3)"}
{"prompt": "计算3的正弦值并返回结果。", "content": "RETURN sin(3)"}
{"prompt": "返回0.5的反正弦值。", "content": "RETURN asin(0.5)"}
{"prompt": "计算0.5的反正弦值。", "content": "RETURN asin(0.5)"}
{"prompt": "计算0.5的余弦值并返回结果。", "content": "RETURN cos(0.5)"}
{"prompt": "得到0.5的余弦值。", "content": "RETURN cos(0.5)"}
{"prompt": "返回0.5的反余弦值。", "content": "RETURN acos(0.5)"}
{"prompt": "返回0.5的反余弦值。", "content": "RETURN acos(0.5)"}
{"prompt": "返回0.5的正切值。", "content": "RETURN tan(0.5)"}
{"prompt": "返回0.5的正切值。", "content": "RETURN tan(0.5)"}
{"prompt": "返回0.5的反正切值。", "content": "RETURN atan(0.5)"}
{"prompt": "返回0.5的反正切值。", "content": "RETURN atan(0.5)"}
{"prompt": "返回一个随机数。", "content": "RETURN rand()"}
{"prompt": "返回一个随机数。", "content": "RETURN rand()"}
{"prompt": "返回一个1到100之间的随机数。", "content": "RETURN rand32(1,100)"}
{"prompt": "返回一个介于1到100之间的随机数。", "content": "RETURN rand32(1,100)"}
{"prompt": "返回一个范围在1到100之间的随机64位整数。", "content": "RETURN rand64(1,100)"}
{"prompt": "返回一个介于1到100之间的随机64位整数。", "content": "RETURN rand64(1,100)"}
{"prompt": "计算5和6的按位与结果。", "content": "RETURN bit_and(5,6)"}
{"prompt": "计算5和6的按位与结果。", "content": "RETURN bit_and(5,6)"}
{"prompt": "计算5和6的按位或结果。", "content": "RETURN bit_or(5,6)"}
{"prompt": "对5和6进行按位或操作，并返回结果。", "content": "RETURN bit_or(5,6)"}
{"prompt": "计算5和6的按位异或结果。", "content": "RETURN bit_xor(5,6)"}
{"prompt": "计算5和6的二进制比特异或结果。", "content": "RETURN bit_xor(5,6)"}
{"prompt": "返回列表[1,2,3,4]的大小。", "content": "RETURN size([1,2,3,4])"}
{"prompt": "返回数组[1,2,3,4]的长度。", "content": "RETURN size([1,2,3,4])"}
{"prompt": "返回'basketballplayer'类型的实体数量。", "content": "RETURN size(\"basketballplayer\") as size"}
{"prompt": "返回'basketballplayer'类型所有实体的数量。", "content": "RETURN size(\"basketballplayer\") as size"}
{"prompt": "返回一个从1开始，以2递增的序列，最大值为3*3的列表。", "content": "RETURN range(1,3*3,2)"}
{"prompt": "返回一个从1开始，以2为步长的序列，序列中的元素为1、3、5、7、9。", "content": "RETURN range(1,3*3,2)"}
{"prompt": "返回数字10的符号。", "content": "RETURN sign(10)"}
{"prompt": "返回数字10的符号。", "content": "RETURN sign(10)"}
{"prompt": "返回e的数值", "content": "RETURN e()"}
{"prompt": "获取e的数值", "content": "RETURN e()"}
{"prompt": "返回π的值。", "content": "RETURN pi()"}
{"prompt": "返回圆周率的值。", "content": "RETURN pi()"}
{"prompt": "返回180度的弧度值。", "content": "RETURN radians(180)"}
{"prompt": "返回180度的弧度值。", "content": "RETURN radians(180)"}
{"prompt": "计算所有球员的平均年龄。", "content": "MATCH (v:player) RETURN avg(v.player.age)"}
{"prompt": "计算所有球员实体的平均年龄。", "content": "MATCH (v:player) RETURN avg(v.player.age)"}
{"prompt": "统计列表中的元素数量，包括重复元素的数量和去重后的元素数量。", "content": "WITH [NULL, 1, 1, 2, 2] As a UNWIND a AS b\nRETURN count(b), count(*), count(DISTINCT b)"}
{"prompt": "统计列表中的元素数量、总数量以及去重后的元素数量。", "content": "WITH [NULL, 1, 1, 2, 2] As a UNWIND a AS b\nRETURN count(b), count(*), count(DISTINCT b)"}
{"prompt": "找出以'player101'为起点，通过'follow'关系双向连接的所有实体，并根据实体的属性'name'进行分组，返回每个分组中实体的数量和名称。", "content": "GO FROM \"player101\" OVER follow BIDIRECT\nYIELD properties($$).name AS Name\n| GROUP BY $-.Name YIELD $-.Name, count(*)"}
{"prompt": "找出以'player101'为起点，通过'follow'关系（双向）所连接的所有实体，并根据实体的属性'name'进行分组，返回每个分组的'name'和对应的实体数量。", "content": "GO FROM \"player101\" OVER follow BIDIRECT\nYIELD properties($$).name AS Name\n| GROUP BY $-.Name YIELD $-.Name, count(*)"}
{"prompt": "找出ID为player101的球员所关注的球员，并按关注人数从多到少排序，返回球员的姓名和关注人数。", "content": "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"}
{"prompt": "找出ID为player101的球员所关注的球员，并按照关注数量降序排序，返回球员的姓名和关注数量。", "content": "MATCH (v1:player)-[:follow]-(v2:player)\nWHERE id(v1)== \"player101\"\nRETURN v2.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"}
{"prompt": "查找player表中的年龄，并按照出现次数和年龄降序排序。", "content": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD $-.playerage as age, count(*) AS number\n| ORDER BY $-.number DESC, $-.age DESC"}
{"prompt": "查找player集合中的实体，按照年龄分组并统计每个年龄的数量，然后按数量和年龄降序排序。", "content": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD $-.playerage as age, count(*) AS number\n| ORDER BY $-.number DESC, $-.age DESC"}
{"prompt": "统计所有球员的年龄，并按照球员数量和年龄降序排列。", "content": "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC"}
{"prompt": "返回球员的年龄和数量，按数量和年龄降序排列。", "content": "MATCH (n:player)\nRETURN n.player.age as age, count(*) as number\nORDER BY number DESC, age DESC"}
{"prompt": "统计名为'Tim Duncan'的球员与其他实体之间的关系数量。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)"}
{"prompt": "计算名为'Tim Duncan'的球员与其他实体之间的关系数量。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) -[e]- (v2)\nRETURN count(e)"}
{"prompt": "找出名为'Tim Duncan'的球员的所有朋友的朋友，并返回朋友的朋友的数量和去重后的数量。", "content": "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)"}
{"prompt": "找出名为'Tim Duncan'的球员的所有朋友的朋友，并返回朋友的朋友的数量和去重后的数量。", "content": "MATCH (n:player {name : \"Tim Duncan\"})-[]->(friend:player)-[]->(fof:player)\nRETURN count(fof), count(DISTINCT fof)"}
{"prompt": "返回所有球员中年龄最大的球员的年龄。", "content": "MATCH (v:player) RETURN max(v.player.age)"}
{"prompt": "返回所有球员中年龄最大的球员的年龄。", "content": "MATCH (v:player) RETURN max(v.player.age)"}
{"prompt": "返回所有球员中年龄最小的球员的年龄。", "content": "MATCH (v:player) RETURN min(v.player.age)"}
{"prompt": "返回年龄最小的球员的年龄。", "content": "MATCH (v:player) RETURN min(v.player.age)"}
{"prompt": "将列表[1, 2, 1]展开，并返回每个元素。", "content": "UNWIND [1, 2, 1] AS a\nRETURN a"}
{"prompt": "将列表[1, 2, 1]展开为多个单元素，并返回每个元素。", "content": "UNWIND [1, 2, 1] AS a\nRETURN a"}
{"prompt": "将数组 [1, 2, 1] 展开，并返回展开后的所有元素collect集合。", "content": "UNWIND [1, 2, 1] AS a\nRETURN collect(a)"}
{"prompt": "将列表 [1, 2, 1] 展开，并返回展开后的所有元素的集合。", "content": "UNWIND [1, 2, 1] AS a\nRETURN collect(a)"}
{"prompt": "将列表[1, 2, 1]展开为单独的元素，并返回展开后的元素、元素的集合和集合的大小。", "content": "UNWIND [1, 2, 1] AS a\nRETURN a, collect(a), size(collect(a))"}
{"prompt": "将列表 [1, 2, 1] 展开成单独的元素，并返回这些元素及其集合形式以及集合的大小。", "content": "UNWIND [1, 2, 1] AS a\nRETURN a, collect(a), size(collect(a))"}
{"prompt": "将列表['c','b','a','d']按降序排序，取前三个元素，并返回这三个元素的集合。", "content": "UNWIND [\"c\", \"b\", \"a\", \"d\" ] AS p\nWITH p AS q\nORDER BY q DESC LIMIT 3\nRETURN collect(q)"}
{"prompt": "将列表 ['c','b','a','d'] 按降序排序，取前三个元素，并返回这三个元素的集合。", "content": "UNWIND [\"c\", \"b\", \"a\", \"d\" ] AS p\nWITH p AS q\nORDER BY q DESC LIMIT 3\nRETURN collect(q)"}
{"prompt": "将列表 [1, 1, 2, 2] 展开，并返回去重后的所有元素。", "content": "WITH [1, 1, 2, 2] AS coll\nUNWIND coll AS x\nWITH DISTINCT x\nRETURN collect(x) AS ss"}
{"prompt": "将列表 [1, 1, 2, 2] 展开并去除重复元素，然后返回去重后的元素集合。", "content": "WITH [1, 1, 2, 2] AS coll\nUNWIND coll AS x\nWITH DISTINCT x\nRETURN collect(x) AS ss"}
{"prompt": "返回所有球员的年龄的集合。", "content": "MATCH (n:player)\nRETURN collect(n.player.age)"}
{"prompt": "返回所有球员的年龄集合。", "content": "MATCH (n:player)\nRETURN collect(n.player.age)"}
{"prompt": "返回所有球员的年龄、姓名的集合。", "content": "MATCH (n:player)\nRETURN n.player.age AS age, collect(n.player.name)"}
{"prompt": "返回所有球员的年龄，并将姓名作为集合返回。", "content": "MATCH (n:player)\nRETURN n.player.age AS age, collect(n.player.name)"}
{"prompt": "找出'player100'所'服务'的所有实体，并按照实体的名称进行分组，返回每个分组中的实体名称。", "content": "GO FROM \"player100\" OVER serve\nYIELD properties($$).name AS name\n| GROUP BY $-.name\nYIELD collect($-.name) AS name"}
{"prompt": "找出以'player100'为起点，通过'serve'关系所连接的所有实体，并按照实体的名称进行分组，返回每个分组中实体名称的集合。", "content": "GO FROM \"player100\" OVER serve\nYIELD properties($$).name AS name\n| GROUP BY $-.name\nYIELD collect($-.name) AS name"}
{"prompt": "根据player表，按照年龄分组，并返回每个分组中的年龄集合。", "content": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD collect($-.playerage) AS playerage"}
{"prompt": "根据player表，按照年龄分组，并返回每个分组中的年龄集合。", "content": "LOOKUP ON player\nYIELD player.age As playerage\n| GROUP BY $-.playerage\nYIELD collect($-.playerage) AS playerage"}
{"prompt": "返回所有球员的年龄的标准差。", "content": "MATCH (v:player) RETURN std(v.player.age)"}
{"prompt": "返回所有球员的年龄的标准差。", "content": "MATCH (v:player) RETURN std(v.player.age)"}
{"prompt": "计算所有球员的年龄总和。", "content": "MATCH (v:player) RETURN sum(v.player.age)"}
{"prompt": "计算所有球员的年龄总和。", "content": "MATCH (v:player) RETURN sum(v.player.age)"}
{"prompt": "找出'player100'关注的所有实体，并计算这些实体的年龄统计信息。", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS dst, properties($$).age AS age\n| GROUP BY $-.dst\nYIELD\n$-.dst AS dst,\ntoInteger((sum($-.age)/count($-.age)))+avg(distinct $-.age+1)+1 AS statistics"}
{"prompt": "计算'player100'所关注的实体的平均年龄，并将该平均年龄加1后再加上所有不重复年龄的平均值再加1，作为统计数据返回。", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge) AS dst, properties($$).age AS age\n| GROUP BY $-.dst\nYIELD\n$-.dst AS dst,\ntoInteger((sum($-.age)/count($-.age)))+avg(distinct $-.age+1)+1 AS statistics"}
{"prompt": "比较字符串'a'和'aa'的大小写，返回结果。", "content": "RETURN strcasecmp(\"a\",\"aa\")"}
{"prompt": "比较字符串'a'和'aa'的大小写。", "content": "RETURN strcasecmp(\"a\",\"aa\")"}
{"prompt": "返回小写的\"Basketball_Player\"。", "content": "RETURN lower(\"Basketball_Player\")"}
{"prompt": "返回小写的‘Basketball_Player’。", "content": "RETURN lower(\"Basketball_Player\")"}
{"prompt": "返回'Basketball_Player'的大写形式。", "content": "RETURN upper(\"Basketball_Player\")"}
{"prompt": "返回大写的'Basketball_Player'。", "content": "RETURN upper(\"Basketball_Player\")"}
{"prompt": "返回字符串'basketball'的长度。", "content": "RETURN length(\"basketball\")"}
{"prompt": "返回字符串'basketball'的长度。", "content": "RETURN length(\"basketball\")"}
{"prompt": "找出名为'Tim Duncan'的球员与其关联的所有实体，并返回这些实体之间的关系长度。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的关系路径，并返回路径的长度。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2) return length(p)"}
{"prompt": "返回修剪后的字符串'basketball player'。", "content": "RETURN trim(\" basketball player \")"}
{"prompt": "返回修剪过的字符串'basketball player'。", "content": "RETURN trim(\" basketball player \")"}
{"prompt": "去除字符串'basketball player'的前导空格。", "content": "RETURN ltrim(\" basketball player \")"}
{"prompt": "去除字符串'basketball player'的前导空格并返回结果。", "content": "RETURN ltrim(\" basketball player \")"}
{"prompt": "返回去除末尾空格后的字符串\" basketball player \"。", "content": "RETURN rtrim(\" basketball player \")"}
{"prompt": "取出字符串\" basketball player \"的末尾空格。", "content": "RETURN rtrim(\" basketball player \")"}
{"prompt": "返回字符串'basketball_player'的前6个字符。", "content": "RETURN left(\"basketball_player\",6)"}
{"prompt": "返回'basketball_player'的前6个字符。", "content": "RETURN left(\"basketball_player\",6)"}
{"prompt": "返回'basketball_player'的后6个字符。", "content": "RETURN right(\"basketball_player\",6)"}
{"prompt": "返回'basketball_player'的后6个字符。", "content": "RETURN right(\"basketball_player\",6)"}
{"prompt": "返回一个长度为10的字符串，其中字符串'abcd'左侧用字符'b'填充。", "content": "RETURN lpad(\"abcd\",10,\"b\")"}
{"prompt": "将字符串'abcd'左侧填充为长度为10的字符串，填充字符为'b'。", "content": "RETURN lpad(\"abcd\",10,\"b\")"}
{"prompt": "将字符串'abcd'左侧填充为长度为3的字符串，填充字符为'b'。", "content": "RETURN lpad(\"abcd\",3,\"b\")"}
{"prompt": "返回将字符串\"abcd\"左侧填充为长度为3的新字符串，填充字符为\"b\"。", "content": "RETURN lpad(\"abcd\",3,\"b\")"}
{"prompt": "将字符串'abcd'用字符'b'填充至长度为10，并返回结果。", "content": "RETURN rpad(\"abcd\",10,\"b\")"}
{"prompt": "返回将字符串\"abcd\"右侧填充为长度为10，填充字符为\"b\"的结果。", "content": "RETURN rpad(\"abcd\",10,\"b\")"}
{"prompt": "将字符串'abcd'的长度扩展为3，用字母'b'填充。", "content": "RETURN rpad(\"abcd\",3,\"b\")"}
{"prompt": "返回一个由字符串'abcd'右侧填充3个字符'b'形成的新字符串。", "content": "RETURN rpad(\"abcd\",3,\"b\")"}
{"prompt": "返回字符串'abcdefg'中从第2个字符开始的4个字符。", "content": "RETURN substr(\"abcdefg\",2,4)"}
{"prompt": "返回字符串'abcdefg'中从第2个字符开始，长度为4的子串。", "content": "RETURN substr(\"abcdefg\",2,4)"}
{"prompt": "返回字符串'abcdefg'的前4个字符。", "content": "RETURN substr(\"abcdefg\",0,4)"}
{"prompt": "返回字符串'abcdefg'的前四个字符。", "content": "RETURN substr(\"abcdefg\",0,4)"}
{"prompt": "返回字符串'abcdefg'中下标为二的字符。", "content": "RETURN substr(\"abcdefg\",2)"}
{"prompt": "返回字符串'abcdefg'中下标为2的字母。", "content": "RETURN substr(\"abcdefg\",2)"}
{"prompt": "将字符串'abcdefg'反转并返回结果。", "content": "RETURN reverse(\"abcdefg\")"}
{"prompt": "返回字符串'gfedcba'的逆序。", "content": "RETURN reverse(\"abcdefg\")"}
{"prompt": "将字符串'abcdefg'中的'cd'替换为'AAAAA'并返回结果。", "content": "RETURN replace(\"abcdefg\",\"cd\",\"AAAAA\")"}
{"prompt": "替换字符串'abcdefg'中的'cd'为'AAAAA'。", "content": "RETURN replace(\"abcdefg\",\"cd\",\"AAAAA\")"}
{"prompt": "将字符串'basketballplayer'按照字母'a'进行分割并返回结果。", "content": "RETURN split(\"basketballplayer\",\"a\")"}
{"prompt": "将字符串'basketballplayer'按照字母'a'进行分割。", "content": "RETURN split(\"basketballplayer\",\"a\")"}
{"prompt": "返回字符串'123'作为结果。", "content": "RETURN concat(\"1\",\"2\",\"3\") AS r"}
{"prompt": "将'1'、'2'、'3'拼接作为结果。", "content": "RETURN concat(\"1\",\"2\",\"3\") AS r"}
{"prompt": "返回拼接'1'、'2'和空值的结果。", "content": "RETURN concat(\"1\",\"2\",NULL) AS r"}
{"prompt": "返回字符串\"12\"作为结果。", "content": "RETURN concat(\"1\",\"2\",NULL) AS r"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的所有实体，并返回这些实体的年龄、姓名和度数。", "content": "GO FROM \"player100\" over follow\nYIELD concat(src(edge), properties($^).age, properties($$).name, properties(edge).degree) AS A"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的边的源节点、年龄、名称和度数的拼接结果。", "content": "GO FROM \"player100\" over follow\nYIELD concat(src(edge), properties($^).age, properties($$).name, properties(edge).degree) AS A"}
{"prompt": "将字符串'a'、'b'、'c'以'+'连接起来，并将结果命名为r。", "content": "RETURN concat_ws(\"+\",\"a\",\"b\",\"c\") AS r"}
{"prompt": "将字符串'a'、'b'和'c'以'+'作为分隔符连接起来，并返回结果作为r。", "content": "RETURN concat_ws(\"+\",\"a\",\"b\",\"c\") AS r"}
{"prompt": "将字符串'a'、空值、字符串'b'和字符串'c'以'+'连接起来，并将结果命名为r。", "content": "RETURN concat_ws(\"+\",\"a\",NULL,\"b\",\"c\") AS r"}
{"prompt": "返回连接字符串'a'、NULL、'b'和'c'的结果作为 r。", "content": "RETURN concat_ws(\"+\",\"a\",NULL,\"b\",\"c\") AS r"}
{"prompt": "返回将'a'用'+'连接起来的结果作为r。", "content": "RETURN concat_ws(\"+\",\"a\") AS r"}
{"prompt": "将字符串'a'用'+'连接起来，并返回结果作为r。", "content": "RETURN concat_ws(\"+\",\"a\") AS r"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的源节点、年龄、名称和边的度数。", "content": "GO FROM \"player100\" over follow\nYIELD concat_ws(\" \",src(edge), properties($^).age, properties($$).name, properties(edge).degree) AS A"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的年龄、姓名和关注度。", "content": "GO FROM \"player100\" over follow\nYIELD concat_ws(\" \",src(edge), properties($^).age, properties($$).name, properties(edge).degree) AS A"}
{"prompt": "找出年龄大于45岁的球员在与洛杉矶湖人队有服务关系的所有球员，并返回这些球员的名字。", "content": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN extract(a.player.name, \"\\\\w+\") AS result"}
{"prompt": "找出年龄大于45岁的球员与Lakers队有关系的所有球员的名字。", "content": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN extract(a.player.name, \"\\\\w+\") AS result"}
{"prompt": "找出年龄大于45岁的球员，他们为‘Lakers’队效力，并返回他们的名字中包含‘hello’的部分作为结果。", "content": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN extract(a.player.name, \"hello\") AS result"}
{"prompt": "找出为‘Lakers’队效力且年龄大于45岁的球员，并返回他们的名字中包含'hello'的部分。", "content": "MATCH (a:player)-[b:serve]-(c:team{name: \"Lakers\"})\nWHERE a.player.age > 45\nRETURN extract(a.player.name, \"hello\") AS result"}
{"prompt": "返回当前时间、时间戳、日期、时间和日期时间。", "content": "RETURN now(), timestamp(), date(), time(), datetime()"}
{"prompt": "返回当前时间、时间戳、日期、时间和日期时间。", "content": "RETURN now(), timestamp(), date(), time(), datetime()"}
{"prompt": "查找年龄大于45岁的球员，并返回这些球员的ID。", "content": "LOOKUP ON player WHERE player.age > 45 YIELD id(vertex)"}
{"prompt": "查找年龄大于45岁的所有球员，并返回这些球员的ID。", "content": "LOOKUP ON player WHERE player.age > 45 YIELD id(vertex)"}
{"prompt": "查找年龄大于45岁的球员，并返回这些球员的属性。", "content": "LOOKUP ON player WHERE player.age > 45\nYIELD properties(vertex)"}
{"prompt": "查找年龄大于45岁的所有球员，并返回这些球员的属性。", "content": "LOOKUP ON player WHERE player.age > 45\nYIELD properties(vertex)"}
{"prompt": "找出'player100'所'关注'的所有边的属性，并返回这些属性。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties(edge)"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的属性。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties(edge)"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体之间的关系信息，包括源节点、目标节点、边类型和边的权重。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge), type(edge), rank(edge)"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的所有实体，返回每个连接的起点、终点、关系类型和权重。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge), type(edge), rank(edge)"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的源节点和目标节点。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge)"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的源节点和目标节点。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge)"}
{"prompt": "找出'player100'所'follow'的所有实体，并返回这些实体的源节点和目标节点。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge)"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的所有实体，并返回这些实体的起点和终点。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge)"}
{"prompt": "找出以'player100'为起点，通过'follow'关系连接的所有实体，并返回这些实体之间的关系和权重。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge), rank(edge)"}
{"prompt": "找出'player100'关注的所有实体，并返回每个关注关系的起始节点、结束节点和权重。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge), dst(edge), rank(edge)"}
{"prompt": "查找年龄大于45岁的所有球员，并返回这些球员的实体信息。", "content": "LOOKUP ON player WHERE player.age > 45 YIELD vertex AS v"}
{"prompt": "查找年龄大于45岁的球员。", "content": "LOOKUP ON player WHERE player.age > 45 YIELD vertex AS v"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的边", "content": "GO FROM \"player100\" OVER follow YIELD edge AS e"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的边", "content": "GO FROM \"player100\" OVER follow YIELD edge AS e"}
{"prompt": "返回所有球员的ID。", "content": "MATCH (v:player) RETURN id(v)"}
{"prompt": "返回所有球员的ID。", "content": "MATCH (v:player) RETURN id(v)"}
{"prompt": "找出ID为player100的实体的标签。", "content": "MATCH (v) WHERE id(v) == \"player100\"\nRETURN tags(v)"}
{"prompt": "找到ID为'player100'的实体，并返回该实体的标签。", "content": "MATCH (v) WHERE id(v) == \"player100\"\nRETURN tags(v)"}
{"prompt": "返回所有球员节点及其关注关系的属性。", "content": "MATCH (v:player)-[e:follow]-() RETURN properties(v),properties(e)"}
{"prompt": "返回所有球员及其关注关系的属性。", "content": "MATCH (v:player)-[e:follow]-() RETURN properties(v),properties(e)"}
{"prompt": "找出名为'Tim Duncan'的球员所参与的所有关系，并返回这些关系的类型。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN type(e)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有关系类型，并返回这些关系类型。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN type(e)"}
{"prompt": "找出所有与名为'Tim Duncan'的球员存在关系的边，并返回这些边的起始节点。", "content": "MATCH ()-[e]->(v:player{name:\"Tim Duncan\"})\nRETURN src(e)"}
{"prompt": "找出与名为'Tim Duncan'的球员有关系的所有实体，并返回这些实体的源节点。", "content": "MATCH ()-[e]->(v:player{name:\"Tim Duncan\"})\nRETURN src(e)"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并返回这些实体的目标节点。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN dst(e)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有关系，并返回这些关系的终点。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN dst(e)"}
{"prompt": "找出名为'Tim Duncan'的球员与其所属的所有球队之间的关系，并返回这些球队的起始节点。", "content": "MATCH p = (a :player {name : \"Tim Duncan\"})-[r:serve]-(t)\nRETURN startNode(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其所有的服务关系，并返回这些关系的起始节点。", "content": "MATCH p = (a :player {name : \"Tim Duncan\"})-[r:serve]-(t)\nRETURN startNode(p)"}
{"prompt": "找出名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体。", "content": "MATCH p = (a :player {name : \"Tim Duncan\"})-[r:serve]-(t)\nRETURN endNode(p)"}
{"prompt": "找出名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体。", "content": "MATCH p = (a :player {name : \"Tim Duncan\"})-[r:serve]-(t)\nRETURN endNode(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的关系，并返回这些关系的排名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN rank(e)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有关系，并返回这些关系的排名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN rank(e)"}
{"prompt": "返回一个从1开始，每隔2个数字增加1的序列，包括9。", "content": "RETURN range(1,9,2)"}
{"prompt": "返回一个从1开始，以2为步长，不超过9的范围。", "content": "RETURN range(1,9,2)"}
{"prompt": "返回给定列表[NULL, 4923,'abc', 521, 487]的逆序。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN reverse(ids)"}
{"prompt": "返回逆序排列的列表[NULL, 4923,'abc', 521, 487]。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN reverse(ids)"}
{"prompt": "返回 ids 列表[NULL, 4923,'abc', 521, 487]的最后一个元素。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN tail(ids)"}
{"prompt": "返回 ids 列表[NULL, 4923,'abc', 521, 487]中除第一个元素外的所有元素。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN tail(ids)"}
{"prompt": "返回 ids 列表[NULL, 4923,'abc', 521, 487]中的第一个元素。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN head(ids)"}
{"prompt": "返回 ids 列表[NULL, 4923,'abc', 521, 487]中的第一个元素。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN head(ids)"}
{"prompt": "返回 ids 列表[NULL, 4923,'abc', 521, 487]中的最后一个元素。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN last(ids)"}
{"prompt": "返回列表[NULL, 4923,'abc', 521, 487]中最后一个元素。", "content": "WITH [NULL, 4923,'abc', 521, 487] AS ids\nRETURN last(ids)"}
{"prompt": "计算-4乘以5再加上1乘以2再加上2乘以2的结果，并将结果命名为r。", "content": "RETURN reduce(totalNum = -4 * 5, n IN [1, 2] | totalNum + n * 2) AS r"}
{"prompt": "计算-4乘以5，并将结果与列表[1, 2]中的每个元素乘以2的结果相加，最后返回总和。", "content": "RETURN reduce(totalNum = -4 * 5, n IN [1, 2] | totalNum + n * 2) AS r"}
{"prompt": "查找年龄大于45岁的所有选手，并返回这些选手的属性键。", "content": "LOOKUP ON player\nWHERE player.age > 45\nYIELD keys(vertex)"}
{"prompt": "查找年龄大于45岁的球员的所有属性。", "content": "LOOKUP ON player\nWHERE player.age > 45\nYIELD keys(vertex)"}
{"prompt": "获取'player101'、'player102'、'team204'的所有labels标签。", "content": "FETCH PROP ON * \"player101\", \"player102\", \"team204\"\nYIELD labels(vertex)"}
{"prompt": "获取实体'player101'、'player102'、'team204'的labels标签。", "content": "FETCH PROP ON * \"player101\", \"player102\", \"team204\"\nYIELD labels(vertex)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有关系，并返回这些关系的属性列表。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的所有关系，并返回这些关系的属性。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN keys(e)"}
{"prompt": "找出ID为'player100'的实体，并返回该实体的标签。", "content": "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)"}
{"prompt": "找出ID为player100的实体的标签。", "content": "MATCH (v)-[e:serve]->()\nWHERE id(v)==\"player100\"\nRETURN labels(v)"}
{"prompt": "找出名为'Tim Duncan'的球员节点和与之相连的所有节点，并返回这些节点。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)"}
{"prompt": "找出名为'Tim Duncan'的球员节点及其关联的所有节点。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN nodes(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的所有关系。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)"}
{"prompt": "找出从名为'Tim Duncan'的球员出发，到达其他实体之间的所有关系，并返回这些关系。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN relationships(p)"}
{"prompt": "将列表[true, false,'true','false', NULL]中的值转换为布尔类型，并返回转换后的结果。", "content": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"}
{"prompt": "将列表[true, false,'true','false', NULL]中的元素转换为布尔值，并返回转换后的结果。", "content": "UNWIND [true, false,'true','false', NULL] AS b\nRETURN toBoolean(b) AS b"}
{"prompt": "返回1、1.3、1000和无效数字的浮点数形式。", "content": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"}
{"prompt": "返回浮点数1、浮点数1.3、浮点数1000和not a number的字符串的浮点数。", "content": "RETURN toFloat(1), toFloat('1.3'), toFloat('1e3'), toFloat('not a number')"}
{"prompt": "将整数9669转换为字符串，并将null转换为字符串。", "content": "RETURN toString(9669) AS int2str, toString(null) AS null2str"}
{"prompt": "返回数字9669的字符串表示形式，以及null的字符串表示形式。", "content": "RETURN toString(9669) AS int2str, toString(null) AS null2str"}
{"prompt": "返回整数1、整数1、整数1000和not a number的字符串的值。", "content": "RETURN toInteger(1), toInteger('1'), toInteger('1e3'), toInteger('not a number')"}
{"prompt": "返回整数1、整数1、整数1000和NaN的字符串的结果。", "content": "RETURN toInteger(1), toInteger('1'), toInteger('1e3'), toInteger('not a number')"}
{"prompt": "将列表[1,2,3,1,2]转化为集合set并返回。", "content": "RETURN toSet(list[1,2,3,1,2]) AS list2set"}
{"prompt": "将列表[1,2,3,1,2]转化为一个不重复的集合，并返回该集合。", "content": "RETURN toSet(list[1,2,3,1,2]) AS list2set"}
{"prompt": "返回字符串'abcde'的哈希值。", "content": "RETURN hash(\"abcde\")"}
{"prompt": "返回字符串'abcde'的哈希值。", "content": "RETURN hash(\"abcde\")"}
{"prompt": "计算列表[1,2,3]的哈希值。", "content": "YIELD hash([1,2,3])"}
{"prompt": "计算列表[1,2,3]的哈希值并返回。", "content": "YIELD hash([1,2,3])"}
{"prompt": "计算一个空值的哈希值。", "content": "YIELD hash(NULL)"}
{"prompt": "计算NULL的哈希值。", "content": "YIELD hash(NULL)"}
{"prompt": "计算2加3的结果，如果结果是4，则返回0，如果结果是5，则返回1，否则返回-1。", "content": "RETURN\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"}
{"prompt": "计算2加3的结果，若结果是4返回0；若结果是5返回1；如果都不是则返回-1。", "content": "RETURN\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的姓名和是否年龄大于35岁。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Name,\nCASE properties($$).age > 35\nWHEN true THEN \"Yes\"\nWHEN false THEN \"No\"\nELSE \"Nah\"\nEND\nAS Age_above_35"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的姓名并判断年龄是否超过35岁。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Name,\nCASE properties($$).age > 35\nWHEN true THEN \"Yes\"\nWHEN false THEN \"No\"\nELSE \"Nah\"\nEND\nAS Age_above_35"}
{"prompt": "判断4是否大于5，若是则为0；判断3加4是否等于7，若是则为1；否则结果为2。", "content": "YIELD\nCASE WHEN 4 > 5 THEN 0\nWHEN 3+4==7 THEN 1\nELSE 2\nEND\nAS result"}
{"prompt": "根据条件判断，如果4大于5，则结果为0；如果3加4等于7，则结果为1；否则结果为2。", "content": "YIELD\nCASE WHEN 4 > 5 THEN 0\nWHEN 3+4==7 THEN 1\nELSE 2\nEND\nAS result"}
{"prompt": "找出年龄大于30的球员，并返回他们的姓名和是否以'T'开头。", "content": "MATCH (v:player) WHERE v.player.age > 30\nRETURN v.player.name AS Name,\nCASE\nWHEN v.player.name STARTS WITH \"T\" THEN \"Yes\"\nELSE \"No\"\nEND\nAS Starts_with_T"}
{"prompt": "找出年龄大于30的球员，并返回他们的姓名和是否以字母'T'开头。", "content": "MATCH (v:player) WHERE v.player.age > 30\nRETURN v.player.name AS Name,\nCASE\nWHEN v.player.name STARTS WITH \"T\" THEN \"Yes\"\nELSE \"No\"\nEND\nAS Starts_with_T"}
{"prompt": "找出'player100'所'关注'的所有实体，返回这些实体的姓名、年龄，并判断年龄是否超过35岁。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Name, properties($$).age AS Age,\nCASE properties($$).age\nWHEN properties($$).age > 35 THEN \"Yes\"\nELSE \"No\"\nEND\nAS Age_above_35"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的姓名、年龄以及是否年龄超过35岁。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Name, properties($$).age AS Age,\nCASE properties($$).age\nWHEN properties($$).age > 35 THEN \"Yes\"\nELSE \"No\"\nEND\nAS Age_above_35"}
{"prompt": "返回结果为[1,2,3]，如果结果为空，则返回null。", "content": "RETURN coalesce(null,[1,2,3]) as result"}
{"prompt": "返回结果为null，如果为null则返回[1,2,3]。", "content": "RETURN coalesce(null,[1,2,3]) as result"}
{"prompt": "返回数组[1, 2, 3, 4, 5, NULL]中大于2的任意一个元素。", "content": "RETURN any(n IN [1, 2, 3, 4, 5, NULL]\nWHERE n > 2) AS r"}
{"prompt": "返回数组[1, 2, 3, 4, 5, NULL]中大于2的任意一个数。", "content": "RETURN any(n IN [1, 2, 3, 4, 5, NULL]\nWHERE n > 2) AS r"}
{"prompt": "返回范围从1到5的数字中等于3的数字。", "content": "RETURN single(n IN range(1, 5)\nWHERE n == 3) AS r"}
{"prompt": "返回范围在1到5之间的数字中等于3的单个数字。", "content": "RETURN single(n IN range(1, 5)\nWHERE n == 3) AS r"}
{"prompt": "返回一个空的结果集。", "content": "RETURN none(n IN range(1, 3)\nWHERE n == 0) AS r"}
{"prompt": "返回一个名为r的空列表。", "content": "RETURN none(n IN range(1, 3)\nWHERE n == 0) AS r"}
{"prompt": "返回列表中第一个大于2的数。", "content": "WITH [1, 2, 3, 4, 5, NULL] AS a\nRETURN any(n IN a WHERE n > 2)"}
{"prompt": "返回数组中第一个大于2的元素。", "content": "WITH [1, 2, 3, 4, 5, NULL] AS a\nRETURN any(n IN a WHERE n > 2)"}
{"prompt": "找出名为'LeBron James'的球员所关注的所有球员，并返回这些球员的姓名，同时返回是否所有球员的姓名都不以'D'开头。", "content": "MATCH p = (n:player{name:\"LeBron James\"})<-[:follow]-(m)\nRETURN nodes(p)[0].player.name AS n1, nodes(p)[1].player.name AS n2,\nall(n IN nodes(p) WHERE n.player.name NOT STARTS WITH \"D\") AS b"}
{"prompt": "找出名为'LeBron James'的球员所关注的球员，返回关注关系中的两个球员的姓名，并判断是否所有球员的姓名不以'D'开头。", "content": "MATCH p = (n:player{name:\"LeBron James\"})<-[:follow]-(m)\nRETURN nodes(p)[0].player.name AS n1, nodes(p)[1].player.name AS n2,\nall(n IN nodes(p) WHERE n.player.name NOT STARTS WITH \"D\") AS b"}
{"prompt": "找出名为'LeBron James'的球员关注的年龄大于40岁的球员，并返回结果。", "content": "MATCH p = (n:player{name:\"LeBron James\"})-[:follow]->(m)\nRETURN single(n IN nodes(p) WHERE n.player.age > 40) AS b"}
{"prompt": "找出名为'LeBron James'的球员关注的所有年龄超过40岁的球员，并返回这些球员的信息。", "content": "MATCH p = (n:player{name:\"LeBron James\"})-[:follow]->(m)\nRETURN single(n IN nodes(p) WHERE n.player.age > 40) AS b"}
{"prompt": "返回所有player节点的id是否存在，并且节点n不为空。", "content": "MATCH (n:player)\nRETURN exists(n.player.id), n IS NOT NULL"}
{"prompt": "返回所有player节点是否存在player.id属性，并且节点不为空。", "content": "MATCH (n:player)\nRETURN exists(n.player.id), n IS NOT NULL"}
{"prompt": "找出所有具有'name'属性的球员实体并返回。", "content": "MATCH (n:player)\nWHERE exists(n['name'])\nRETURN n"}
{"prompt": "找出所有具有姓名属性的球员实体并返回其姓名。", "content": "MATCH (n:player)\nWHERE exists(n['name'])\nRETURN n"}
{"prompt": "返回一个坐标点(1,1)的文本表示。", "content": "RETURN ST_ASText(ST_Point(1,1))"}
{"prompt": "返回一个点的坐标为(1,1)的字符串表示形式。", "content": "RETURN ST_ASText(ST_Point(1,1))"}
{"prompt": "判断给定的地理坐标点'POINT(3 8)'是否有效。", "content": "RETURN ST_ISValid(ST_GeogFromText(\"POINT(3 8)\"))"}
{"prompt": "判断给定的地理坐标点'POINT(3 8)'是否有效。", "content": "RETURN ST_ISValid(ST_GeogFromText(\"POINT(3 8)\"))"}
{"prompt": "判断一个多边形(0 0,10 0,10 10,0 10,0 0)是否完全覆盖了一个点(1,2)。", "content": "RETURN ST_Covers(ST_GeogFromText(\"POLYGON((0 0,10 0,10 10,0 10,0 0))\"),ST_Point(1,2))"}
{"prompt": "判断一个点(1,2)是否在一个多边形区域(0 0,10 0,10 10,0 10,0 0)内。", "content": "RETURN ST_Covers(ST_GeogFromText(\"POLYGON((0 0,10 0,10 10,0 10,0 0))\"),ST_Point(1,2))"}
{"prompt": "返回点(1,2)是否被多边形(0 0,10 0,10 10,0 10,0 0)覆盖。", "content": "RETURN ST_CoveredBy(ST_Point(1,2),ST_GeogFromText(\"POLYGON((0 0,10 0,10 10,0 10,0 0))\"))"}
{"prompt": "返回点(1,2)是否被多边形(0 0,10 0,10 10,0 10,0 0)所覆盖。", "content": "RETURN ST_CoveredBy(ST_Point(1,2),ST_GeogFromText(\"POLYGON((0 0,10 0,10 10,0 10,0 0))\"))"}
{"prompt": "返回一个布尔值，表示点(0,0)和点(10,10)之间的距离是否小于等于20000000000.0。", "content": "RETURN ST_dwithin(ST_GeogFromText(\"Point(0 0)\"),ST_GeogFromText(\"Point(10 10)\"),20000000000.0)"}
{"prompt": "判断两个点之间的距离是否小于等于20000000000.0米。", "content": "RETURN ST_dwithin(ST_GeogFromText(\"Point(0 0)\"),ST_GeogFromText(\"Point(10 10)\"),20000000000.0)"}
{"prompt": "计算从点(0,0)到点(10,10)的距离。", "content": "RETURN ST_Distance(ST_GeogFromText(\"Point(0 0)\"),ST_GeogFromText(\"Point(10 10)\"))"}
{"prompt": "计算点(0,0)和点(10,10)之间的距离。", "content": "RETURN ST_Distance(ST_GeogFromText(\"Point(0 0)\"),ST_GeogFromText(\"Point(10 10)\"))"}
{"prompt": "返回一个点(1 1)所对应的S2 Cell ID。", "content": "RETURN S2_CellIdFromPoint(ST_GeogFromText(\"Point(1 1)\"))"}
{"prompt": "返回一个点(1, 1)所对应的S2单元格ID。", "content": "RETURN S2_CellIdFromPoint(ST_GeogFromText(\"Point(1 1)\"))"}
{"prompt": "返回一个多边形(0 1, 1 2, 2 3, 0 1)的覆盖单元格的ID列表。", "content": "RETURN S2_CoveringCellIds(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"}
{"prompt": "返回多边形(0 1, 1 2, 2 3, 0 1)的覆盖单元格的ID列表。", "content": "RETURN S2_CoveringCellIds(ST_GeogFromText(\"POLYGON((0 1, 1 2, 2 3, 0 1))\"))"}
{"prompt": "如果不存在名为player_index_1的标签索引，就创建一个索引，该索引基于player标签的name属性，最大长度为20。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"}
{"prompt": "如果不存在，则创建一个名为player_index_1的标签索引，索引字段为最大长度为20的player的name属性。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 ON player(name(20))"}
{"prompt": "如果follow边索引不存在，则创建follow边索引。", "content": "CREATE EDGE INDEX IF NOT EXISTS follow_index on follow()"}
{"prompt": "如果follow边索引不存在，则创建follow边索引follow_index。", "content": "CREATE EDGE INDEX IF NOT EXISTS follow_index on follow()"}
{"prompt": "重建player_index_1标签索引。", "content": "REBUILD TAG INDEX player_index_1"}
{"prompt": "重建名为player_index_1的标签索引。", "content": "REBUILD TAG INDEX player_index_1"}
{"prompt": "重建follow_index边索引。", "content": "REBUILD EDGE INDEX follow_index"}
{"prompt": "重建关注关系的边索引follow_index。", "content": "REBUILD EDGE INDEX follow_index"}
{"prompt": "显示作业编号为121的任务。", "content": "SHOW JOB 121"}
{"prompt": "显示作业编号为121的作业信息。", "content": "SHOW JOB 121"}
{"prompt": "显示作业编号为122的作业信息。", "content": "SHOW JOB 122"}
{"prompt": "展示任务编号为122的作业信息。", "content": "SHOW JOB 122"}
{"prompt": "返回前三个节点的所有信息。", "content": "MATCH (v)\nRETURN v\nLIMIT 3"}
{"prompt": "返回前三个实体。", "content": "MATCH (v)\nRETURN v\nLIMIT 3"}
{"prompt": "找出所有的球员实体，并返回其中的前三个实体。", "content": "MATCH (v:player)\nRETURN v\nLIMIT 3"}
{"prompt": "找出3个球员实体并返回。", "content": "MATCH (v:player)\nRETURN v\nLIMIT 3"}
{"prompt": "创建一个名为actor的标签，包含姓名和年龄两个属性。", "content": "CREATE TAG actor (name string, age int)"}
{"prompt": "创建一个标签actor，包含名字和年龄两个属性。", "content": "CREATE TAG actor (name string, age int)"}
{"prompt": "插入一个名为'Tim Duncan'，年龄为 42 的演员实体，其id为'player100'。", "content": "INSERT VERTEX actor(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个名为'Tim Duncan'，年龄为42岁的演员实体，并赋予其唯一标识符为'player100'。", "content": "INSERT VERTEX actor(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "找出10个player和actor标签的实体，并返回它们。", "content": "MATCH (v:player:actor)\nRETURN v\nLIMIT 10"}
{"prompt": "找出所有的player和actor，并返回前10个实体。", "content": "MATCH (v:player:actor)\nRETURN v\nLIMIT 10"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回该球员的信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN v"}
{"prompt": "找出名为'Tim Duncan'的球员实体，并返回该实体。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN v"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回该球员的所有信息。", "content": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nRETURN v"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回该球员的信息。", "content": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nRETURN v"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name"}
{"prompt": "找出名为'Tim Duncan'的球员有关系的所有球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})--(v2:player)\nRETURN v2.player.name AS Name"}
{"prompt": "找出从名为'Tim Duncan'的球员出发所关联的所有球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"}
{"prompt": "找出名为'Tim Duncan'的球员所单向关联的所有球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2:player)\nRETURN v2.player.name AS Name"}
{"prompt": "找出名为'Tim Duncan'的球员关联的团队或球员的名称，并返回该名称。", "content": "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name"}
{"prompt": "找出名为'Tim Duncan'的球员所属的团队名或所关联的球员姓名，并返回该名称。", "content": "MATCH (v:player{name:\"Tim Duncan\"})--(v2)\nRETURN\nCASE WHEN v2.team.name IS NOT NULL\nTHEN v2.team.name\nWHEN v2.player.name IS NOT NULL\nTHEN v2.player.name END AS Name"}
{"prompt": "找出与名为'Tim Duncan'的球员，并找出与其对某个实体有关系的另一球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"}
{"prompt": "找出与名为'Tim Duncan'的球员，并找出与其对某个实体有关系的另一球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-->(v2)<--(v3)\nRETURN v3.player.name AS Name"}
{"prompt": "找出与名为'Tim Duncan'的球员，并找出与其对某个实体有关系的另一球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"}
{"prompt": "找出与名为'Tim Duncan'的球员，并找出与其对某个实体有关系的另一球员，并返回这些球员的姓名。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-->()<--(v3)\nRETURN v3.player.name AS Name"}
{"prompt": "找出名为'Tim Duncan'的球员节点和与之相关的所有节点，并返回这些关系。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的关系，并返回这些关系。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-->(v2)\nRETURN p"}
{"prompt": "寻找所有的关系并返回前三个。", "content": "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3"}
{"prompt": "找出所有存在关系的实体，并返回这些关系的详细信息，最多返回3条。", "content": "MATCH ()<-[e]-()\nRETURN e\nLIMIT 3"}
{"prompt": "找出所有存在'follow'关系的实体，并返回这些关系的属性信息，最多返回3个结果。", "content": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"}
{"prompt": "找出所有存在'follow'关系的实体，并返回前三条关系", "content": "MATCH ()-[e:follow]->()\nRETURN e\nlimit 3"}
{"prompt": "找出名为'Tim Duncan'的球员与其关注的球员之间的关系，返回这些关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e"}
{"prompt": "找出名为'Tim Duncan'的球员与他关注的球员之间的所有关系，并返回这些关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow{degree:95}]->(v2)\nRETURN e"}
{"prompt": "找出所有属性值为90的关系，并返回这些关系。", "content": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"}
{"prompt": "找出所有属性值为90的关系，并返回这些关系。", "content": "MATCH ()-[e]->()\nWITH e, properties(e) as props, keys(properties(e)) as kk\nLIMIT 10000 WHERE [i in kk where props[i] == 90]\nRETURN e"}
{"prompt": "找出名为'Tim Duncan'的球员所关注或服务的所有实体，并返回这些关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"}
{"prompt": "找出名为'Tim Duncan'的球员所'follow'或'serve'的所有实体，并返回他们之间的关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e:follow|:serve]->(v2)\nRETURN e"}
{"prompt": "寻找名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体及其关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"}
{"prompt": "找出名为'Tim Duncan'的球员所服务的所有实体，并返回这些实体及其关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[]->(v2)<-[e:serve]-(v3)\nRETURN v2, v3"}
{"prompt": "寻找名为'Tim Duncan'的球员的所有2度关注的朋友，并返回这些朋友的名称。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有二度关注者，并返回这些关注者的信息。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"}
{"prompt": "找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) -[*0]-> (v2)\nRETURN v2"}
{"prompt": "找出名为'Tim Duncan'的球员经过两跳'follow'关系的所有朋友，且每跳关系的degree要大于1，返回这些朋友的姓名。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "寻找名为'Tim Duncan'的球员的所有朋友，他们之间的关系为两跳'follow'，并且关系的度大于1，返回这些朋友的姓名。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e.degree > 1\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有二度关注的朋友，并返回这些朋友的名称。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有朋友的朋友，并返回这些朋友的姓名。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE ALL(e_ in e WHERE e_.degree > 0)\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有朋友中，与他有两跳'follow'关系且第一跳关系度数大于98的球员，并返回这些球员作为朋友。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出与名为'Tim Duncan'的球员有两跳'follow'关系且第一跳关系度数大于98的球员，并返回这些球员作为朋友。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*2]->(v2)\nWHERE e[0].degree > 98\nRETURN DISTINCT v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有关注关系路径，并返回路径上的朋友节点。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员所关注的所有实体，并返回这些实体作为他的朋友。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*]->(v2)\nRETURN v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有1到3度好友，并返回这些好友的信息。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有1到3度关系中的朋友，并返回这些朋友的信息。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2)\nRETURN v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员所关注的所有实体，并返回这些实体作为他的朋友。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有关注关系，返回他的所有朋友。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..]->(v2)\nRETURN v2 AS Friends"}
{"prompt": "找出名为'Tim Duncan'的球员的所有1到3度好友，并返回这些好友及其数量。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"}
{"prompt": "找出名为'Tim Duncan'的球员的所有为'follow'关系的1到3度好友，并返回这些好友及其数量。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*1..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"}
{"prompt": "找出名为'Tim Duncan'的球员的所有朋友，并返回每个朋友的数量。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"}
{"prompt": "找出名为'Tim Duncan'的球员的所有朋友，并返回每个朋友的数量。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow*0..3]->(v2:player)\nRETURN DISTINCT v2 AS Friends, count(v2)"}
{"prompt": "找出名为'Tim Duncan'的球员所关注或效力的所有实体，并返回这些实体。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"}
{"prompt": "找出名为'Tim Duncan'的球员所关注或效力的所有实体，并返回这些实体。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e:follow|serve*2]->(v2)\nRETURN DISTINCT v2"}
{"prompt": "如果团队标签的名字长度不超过20个字符，则创建一个团队标签的索引。", "content": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"}
{"prompt": "如果团队标签的名称长度不超过20个字符，则创建一个名为team_index的标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS team_index ON team(name(20))"}
{"prompt": "重建标签索引 team_index。", "content": "REBUILD TAG INDEX team_index"}
{"prompt": "重建团队标签索引team_index。", "content": "REBUILD TAG INDEX team_index"}
{"prompt": "找出名为'Tim Duncan'的球员和名为'Spurs'的球队。", "content": "MATCH (v1:player{name:\"Tim Duncan\"}), (v2:team{name:\"Spurs\"})\nRETURN v1,v2"}
{"prompt": "寻找姓名为'Tim Duncan'的球员和名为'Spurs'的球队。", "content": "MATCH (v1:player{name:\"Tim Duncan\"}), (v2:team{name:\"Spurs\"})\nRETURN v1,v2"}
{"prompt": "找出名为'Tim Duncan'的球员和名为'Tony Parker'的球员之间的所有最短路径（至多5跳），并返回这些路径。", "content": "MATCH p = allShortestPaths((a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}))\nRETURN p"}
{"prompt": "找出从名为'Tim Duncan'的球员到名为'Tony Parker'的球员之间至多五跳的所有最短路径，并返回这些路径。", "content": "MATCH p = allShortestPaths((a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}))\nRETURN p"}
{"prompt": "找出从名为'Tim Duncan'的球员到名为'Tony Parker'的球员之间最短路径（至多5跳），并返回该路径。", "content": "MATCH p = shortestPath((a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}))\nRETURN p"}
{"prompt": "找出从名为'Tim Duncan'的球员到名为'Tony Parker'的球员之间单条最短路径（至多5跳）。", "content": "MATCH p = shortestPath((a:player{name:\"Tim Duncan\"})-[e*..5]-(b:player{name:\"Tony Parker\"}))\nRETURN p"}
{"prompt": "找出ID为player100的实体与ID为player125的实体之间的关系，并返回这两个实体的ID。", "content": "MATCH (m)-[]->(n) WHERE id(m)==\"player100\"\nMATCH (n)-[]->(l) WHERE id(n)==\"player125\"\nRETURN id(m),id(n),id(l)"}
{"prompt": "找出ID为player100的球员与其喜欢的实体之间的关系，再找出这些实体与ID为player125的球员之间的关系，返回这两个球员与实体的ID。", "content": "MATCH (m)-[]->(n) WHERE id(m)==\"player100\"\nMATCH (n)-[]->(l) WHERE id(n)==\"player125\"\nRETURN id(m),id(n),id(l)"}
{"prompt": "找出ID为player100的实体与其关联的实体，并返回它们的ID。", "content": "MATCH (m)-[]->(n) WHERE id(m)==\"player100\"\nOPTIONAL MATCH (n)-[]->(l)\nRETURN id(m),id(n),id(l)"}
{"prompt": "找出ID为'player100'的实体与其相连的实体，并返回它们的ID。", "content": "MATCH (m)-[]->(n) WHERE id(m)==\"player100\"\nOPTIONAL MATCH (n)-[]->(l)\nRETURN id(m),id(n),id(l)"}
{"prompt": "找出ID为player100的球员与其关联的实体，并返回这些实体的ID。", "content": "MATCH (m)-[]->(n) WHERE id(m)==\"player100\"\nMATCH (n)-[]->(l)\nRETURN id(m),id(n),id(l)"}
{"prompt": "找出ID为player100的球员与其关联的所有实体，并返回这些实体的ID。", "content": "MATCH (m)-[]->(n) WHERE id(m)==\"player100\"\nMATCH (n)-[]->(l)\nRETURN id(m),id(n),id(l)"}
{"prompt": "如果索引index_player不存在，则在player标签上创建一个索引，索引字段为name和age。", "content": "CREATE TAG INDEX IF NOT EXISTS index_player ON player(name(30), age)"}
{"prompt": "如果索引index_player不存在，则在player标签的name和age属性上创建索引。", "content": "CREATE TAG INDEX IF NOT EXISTS index_player ON player(name(30), age)"}
{"prompt": "重建标签索引 index_player。", "content": "REBUILD TAG INDEX index_player"}
{"prompt": "重建标签索引 index_player。", "content": "REBUILD TAG INDEX index_player"}
{"prompt": "查找名为'Tony Parker'的球员，并返回其 ID。", "content": "LOOKUP ON player\nWHERE player.name == \"Tony Parker\"\nYIELD id(vertex)"}
{"prompt": "查找名为'Tony Parker'的球员，并返回该球员的 ID。", "content": "LOOKUP ON player\nWHERE player.name == \"Tony Parker\"\nYIELD id(vertex)"}
{"prompt": "查找名为'Tony Parker'的球员的姓名和年龄。", "content": "LOOKUP ON player\nWHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"}
{"prompt": "查找名为'Tony Parker'的球员的姓名和年龄。", "content": "LOOKUP ON player\nWHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name AS name, properties(vertex).age AS age"}
{"prompt": "查找年龄大于45岁的所有球员，并返回这些球员的ID。", "content": "LOOKUP ON player\nWHERE player.age > 45\nYIELD id(vertex)"}
{"prompt": "查找年龄大于45岁的所有球员的ID。", "content": "LOOKUP ON player\nWHERE player.age > 45\nYIELD id(vertex)"}
{"prompt": "查找名字以'B'开头且年龄为22或30的所有球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player\nWHERE player.name STARTS WITH \"B\"\nAND player.age IN [22,30]\nYIELD properties(vertex).name, properties(vertex).age"}
{"prompt": "查找以字母'B'开头并且年龄为22岁或30岁的球员的姓名和年龄。", "content": "LOOKUP ON player\nWHERE player.name STARTS WITH \"B\"\nAND player.age IN [22,30]\nYIELD properties(vertex).name, properties(vertex).age"}
{"prompt": "找出名为'Kobe Bryant'的球员所曾经效力的球队，并返回球队的名称、开始年份、结束年份和球队的名称。", "content": "LOOKUP ON player\nWHERE player.name == \"Kobe Bryant\"\nYIELD id(vertex) AS VertexID, properties(vertex).name AS name |\nGO FROM $-.VertexID OVER serve\nYIELD $-.name, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "查找名为'Kobe Bryant'的球员，返回他在serve关系中的姓名、起始年份、结束年份和对应边的名称。", "content": "LOOKUP ON player\nWHERE player.name == \"Kobe Bryant\"\nYIELD id(vertex) AS VertexID, properties(vertex).name AS name |\nGO FROM $-.VertexID OVER serve\nYIELD $-.name, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "如果follow边的索引index_follow不存在，则创建一个以degree属性为索引的边索引。", "content": "CREATE EDGE INDEX IF NOT EXISTS index_follow ON follow(degree)"}
{"prompt": "如果follow边的索引index_follow不存在，则创建该索引，索引的属性为degree。", "content": "CREATE EDGE INDEX IF NOT EXISTS index_follow ON follow(degree)"}
{"prompt": "重建'follow'关系的边索引。", "content": "REBUILD EDGE INDEX index_follow"}
{"prompt": "重建索引'index_follow'。", "content": "REBUILD EDGE INDEX index_follow"}
{"prompt": "查找所有关注度为90的关系，并返回这些关系的边。", "content": "LOOKUP ON follow\nWHERE follow.degree == 90 YIELD edge AS e"}
{"prompt": "查找所有follow关系中degree为90的边，并返回这些边。", "content": "LOOKUP ON follow\nWHERE follow.degree == 90 YIELD edge AS e"}
{"prompt": "查找follow关系中度数为90的边的属性，并返回这些边的度数。", "content": "LOOKUP ON follow\nWHERE follow.degree == 90\nYIELD properties(edge).degree"}
{"prompt": "查找follow关系中degree属性为90的边，并返回这些边的degree属性。", "content": "LOOKUP ON follow\nWHERE follow.degree == 90\nYIELD properties(edge).degree"}
{"prompt": "查找follow边上的属性的度，并按度进行排序，返回前10个结果。", "content": "LOOKUP ON follow\nYIELD properties(edge).degree as degree\n| ORDER BY $-.degree\n| LIMIT 10"}
{"prompt": "查找follow关系中度最高的10个边的属性。", "content": "LOOKUP ON follow\nYIELD properties(edge).degree as degree\n| ORDER BY $-.degree\n| LIMIT 10"}
{"prompt": "查找度为60的follow关系中的目标实体，并返回这些实体的ID、serve关系的起始年份、结束年份和名称。", "content": "LOOKUP ON follow\nWHERE follow.degree == 60\nYIELD dst(edge) AS DstVID, properties(edge).degree AS Degree |\nGO FROM $-.DstVID OVER serve\nYIELD $-.DstVID, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "找出所有度数为60的关注关系中的目标实体，并返回这些实体的ID、起始年份、结束年份和名称。", "content": "LOOKUP ON follow\nWHERE follow.degree == 60\nYIELD dst(edge) AS DstVID, properties(edge).degree AS Degree |\nGO FROM $-.DstVID OVER serve\nYIELD $-.DstVID, properties(edge).start_year, properties(edge).end_year, properties($$).name"}
{"prompt": "如果player标签不存在，则创建一个player标签，包含姓名和年龄属性。", "content": "CREATE TAG IF NOT EXISTS player(name string,age int)"}
{"prompt": "在不存在player标签的情况下，创建此标签，属性为名称和年龄。", "content": "CREATE TAG IF NOT EXISTS player(name string,age int)"}
{"prompt": "如果player标签索引不存在，则创建一个player标签的索引。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index on player()"}
{"prompt": "如果player标签索引不存在，则创建一个player标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index on player()"}
{"prompt": "重建球员索引player_index。", "content": "REBUILD TAG INDEX player_index"}
{"prompt": "重建player_index标签索引。", "content": "REBUILD TAG INDEX player_index"}
{"prompt": "插入两个顶点，分别是'player100'和'player101'，球员100的姓名是Tim Duncan，年龄是42岁，球员101的姓名是Tony Parker，年龄是36岁。", "content": "INSERT VERTEX player(name,age)\nVALUES \"player100\":(\"Tim Duncan\", 42), \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入两个顶点，一个是姓名为'Tim Duncan'，年龄为42的球员，另一个是姓名为'Tony Parker'，年龄为36的球员。", "content": "INSERT VERTEX player(name,age)\nVALUES \"player100\":(\"Tim Duncan\", 42), \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "在player数据集中查找所有实体，并返回它们的ID。", "content": "LOOKUP ON player YIELD id(vertex)"}
{"prompt": "查找player中的所有实体，并返回这些实体的ID。", "content": "LOOKUP ON player YIELD id(vertex)"}
{"prompt": "查找player图上的顶点，并返回前4个顶点的ID。", "content": "LOOKUP ON player YIELD id(vertex) | LIMIT 4"}
{"prompt": "查找player中的前4个实体，并返回它们的ID。", "content": "LOOKUP ON player YIELD id(vertex) | LIMIT 4"}
{"prompt": "如果边不存在，则创建一条名为'follow'的边，该边具有一个整型属性'degree'。", "content": "CREATE EDGE IF NOT EXISTS follow(degree int)"}
{"prompt": "如果follow边不存在，则创建follow边，该边具有一个整数属性degree。", "content": "CREATE EDGE IF NOT EXISTS follow(degree int)"}
{"prompt": "如果follow边的索引不存在，则创建follow边的索引。", "content": "CREATE EDGE INDEX IF NOT EXISTS follow_index on follow()"}
{"prompt": "如果follow边索引不存在，则创建follow边索引。", "content": "CREATE EDGE INDEX IF NOT EXISTS follow_index on follow()"}
{"prompt": "重建边索引 follow_index。", "content": "REBUILD EDGE INDEX follow_index"}
{"prompt": "重建关注关系的边索引。", "content": "REBUILD EDGE INDEX follow_index"}
{"prompt": "创建一条名为follow的边，表示player100关注了player101，并设置该关注度为95。", "content": "INSERT EDGE follow(degree)\nVALUES \"player100\"->\"player101\":(95)"}
{"prompt": "将实体player100关注实体player101，并设置关注度为95。", "content": "INSERT EDGE follow(degree)\nVALUES \"player100\"->\"player101\":(95)"}
{"prompt": "查询player图中的所有实体，并返回实体的数量。", "content": "LOOKUP ON player YIELD id(vertex)|\nYIELD COUNT(*) AS Player_Number"}
{"prompt": "查询player图中所有实体的数量。", "content": "LOOKUP ON player YIELD id(vertex)|\nYIELD COUNT(*) AS Player_Number"}
{"prompt": "统计'follow'边的数量并返回。", "content": "LOOKUP ON follow YIELD edge AS e|\nYIELD COUNT(*) AS Follow_Number"}
{"prompt": "查找'follow'关系中的所有边，并返回关系的数量。", "content": "LOOKUP ON follow YIELD edge AS e|\nYIELD COUNT(*) AS Follow_Number"}
{"prompt": "找出'player102'所'服务'的所有实体，并返回这些实体的边的目标节点", "content": "GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "找出'player102'所'follow'的所有实体，并返回这些实体的边的目标节点", "content": "GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "找出与'player102'通过'follow'关系相连的实体，并返回这些实体的边的目标节点", "content": "GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player102'关注的所有实体，并返回这些实体之间的边", "content": "GO 2 STEPS FROM \"player102\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player100'所'关注'和'服务'的所有实体，并返回这些边的度和起始年份。", "content": "GO FROM \"player100\" OVER follow, serve\nYIELD properties(edge).degree, properties(edge).start_year"}
{"prompt": "找出'player100'所'follow'和'serve'的所有实体，并返回这些边的属性度和起始年份。", "content": "GO FROM \"player100\" OVER follow, serve\nYIELD properties(edge).degree, properties(edge).start_year"}
{"prompt": "找出所有关注'player100'的实体，并返回这些实体的边的源节点作为destination。", "content": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS destination"}
{"prompt": "找出所有关注'player100'的实体，并返回这些实体作为目的地。", "content": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS destination"}
{"prompt": "找出与'player100'有'follow'关系的实体，并返回这些实体的 ID。", "content": "MATCH (v)<-[e:follow]- (v2) WHERE id(v) =='player100'\nRETURN id(v2) AS destination"}
{"prompt": "找出与实体'player100'通过'follow'关系相连的实体，并返回这些实体的 ID。", "content": "MATCH (v)<-[e:follow]- (v2) WHERE id(v) =='player100'\nRETURN id(v2) AS destination"}
{"prompt": "找出与'player100'通过反向'follow'关系相连的实体，然后找出这些实体中年龄大于20的实体，返回这些实体的姓名和所属团队。", "content": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS id |\nGO FROM $-.id OVER serve\nWHERE properties($^).age > 20\nYIELD properties($^).name AS FriendOf, properties($$).name AS Team"}
{"prompt": "找出关注'player100'的所有实体，并返回这些实体所在的球队名字和关注者的名字，前提是关注者的年龄大于20岁。", "content": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD src(edge) AS id |\nGO FROM $-.id OVER serve\nWHERE properties($^).age > 20\nYIELD properties($^).name AS FriendOf, properties($$).name AS Team"}
{"prompt": "找出与'player100'有关系的实体，返回这些实体的朋友和这些朋友所在的团队。", "content": "MATCH (v)<-[e:follow]- (v2)-[e2:serve]->(v3)\nWHERE id(v) =='player100'\nRETURN v2.player.name AS FriendOf, v3.team.name AS Team"}
{"prompt": "找出与'player100'有关系的实体，返回这些实体的朋友和朋友所属的球队。", "content": "MATCH (v)<-[e:follow]- (v2)-[e2:serve]->(v3)\nWHERE id(v) =='player100'\nRETURN v2.player.name AS FriendOf, v3.team.name AS Team"}
{"prompt": "找出从'player100'开始，通过'follow'关系经过1到2跳所到达的所有实体，并返回这些实体的目的地。", "content": "GO 1 TO 2 STEPS FROM \"player100\" OVER follow\nYIELD dst(edge) AS destination"}
{"prompt": "从'player100'开始，通过'follow'关系，找出距离为1跳到2跳的所有实体，并返回这些实体的目的地。", "content": "GO 1 TO 2 STEPS FROM \"player100\" OVER follow\nYIELD dst(edge) AS destination"}
{"prompt": "找出与实体'player100'有1跳到2跳'follow'关系的实体，并返回这些实体的 ID。", "content": "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination"}
{"prompt": "找出与实体'player100'通过'follow'关系直接或间接相连的所有实体，并返回这些实体的 ID。", "content": "MATCH (v) -[e:follow*1..2]->(v2)\nWHERE id(v) == \"player100\"\nRETURN id(v2) AS destination"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的源节点和目标节点。", "content": "$a = GO FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的源节点和目标节点。", "content": "$a = GO FROM \"player100\" OVER follow YIELD src(edge) AS src, dst(edge) AS dst"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的边的目标实体", "content": "GO FROM \"player100\" OVER follow WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的边的目标节点", "content": "GO FROM \"player100\" OVER follow WHERE properties($$).name IS NOT EMPTY YIELD dst(edge)"}
{"prompt": "获取实体'player100'的属性，并返回这些属性。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "获取实体'player100'的属性并返回。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "获取名为'player100'的球员的属性，并返回该球员的姓名。", "content": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name AS name"}
{"prompt": "获取'player100'的属性，并返回其名称。", "content": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name AS name"}
{"prompt": "获取'player101'、'player102'和'player103'的属性，并返回这些顶点的属性。", "content": "FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)"}
{"prompt": "获取'player101'、'player102'、'player103'的所有属性。", "content": "FETCH PROP ON player \"player101\", \"player102\", \"player103\" YIELD properties(vertex)"}
{"prompt": "如果标签t1不存在，则创建一个包含字符串类型字段a和整数类型字段b的标签。", "content": "CREATE TAG IF NOT EXISTS t1(a string, b int)"}
{"prompt": "如果标签t1不存在，则创建一个包含字符串类型字段a和整数类型字段b的标签。", "content": "CREATE TAG IF NOT EXISTS t1(a string, b int)"}
{"prompt": "将属性a设为'Hello'，属性b设为100，插入一个名为'player100'的t1类型顶点。", "content": "INSERT VERTEX t1(a, b) VALUES \"player100\":(\"Hello\", 100)"}
{"prompt": "将属性a设为'Hello'，属性b设为100，并将其作为ID为'player100'的顶点插入t1中。", "content": "INSERT VERTEX t1(a, b) VALUES \"player100\":(\"Hello\", 100)"}
{"prompt": "获取'player100'实体的属性，并返回该实体的顶点信息。", "content": "FETCH PROP ON player, t1 \"player100\" YIELD vertex AS v"}
{"prompt": "获取实体类型为player或t1，标识为player100的实体的属性，并返回该实体的顶点信息。", "content": "FETCH PROP ON player, t1 \"player100\" YIELD vertex AS v"}
{"prompt": "获取类型为player或t1的'player100'和'player103'的所有属性，并返回它们的顶点。", "content": "FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD vertex AS v"}
{"prompt": "获取'player100'和'player103'的属性，并返回这些属性的顶点。", "content": "FETCH PROP ON player, t1 \"player100\", \"player103\" YIELD vertex AS v"}
{"prompt": "获取'player100'、'player106'和'team200'的所有属性，并返回它们的顶点。", "content": "FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD vertex AS v"}
{"prompt": "获取'player100'、'player106'和'team200'的所有属性，并返回这些属性的顶点。", "content": "FETCH PROP ON * \"player100\", \"player106\", \"team200\" YIELD vertex AS v"}
{"prompt": "获取'player100'与'team204'之间的'serve'关系属性。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)"}
{"prompt": "获取从'player100'到'team204'的'serve'关系属性并返回。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD properties(edge)"}
{"prompt": "获取从'player100'到'team204'的'serve'关系上的起始年份属性。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\"\nYIELD properties(edge).start_year"}
{"prompt": "获取从'player100'到'team204'的 serve 关系上的属性中的 start_year 值。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\"\nYIELD properties(edge).start_year"}
{"prompt": "获取从'player100'到'team204'和从'player133'到'team202'的所有关系边，并返回这些边。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD edge AS e"}
{"prompt": "获取'player100'与'team204'之间的关系，以及'player133'与'team202'之间的关系，并返回这些关系的边。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\", \"player133\" -> \"team202\" YIELD edge AS e"}
{"prompt": "将'player100'从 1998 年到 2017 年期间加入到'team204'的服务队伍中，并设置权重为1。", "content": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@1:(1998, 2017)"}
{"prompt": "将球员player100从1998年到2017年期间加入到team204队伍中，并设置边权重为1。", "content": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@1:(1998, 2017)"}
{"prompt": "将'player100'从 1990 年到 2018 年期间服务于'team204'，且边的权重为2。", "content": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@2:(1990, 2018)"}
{"prompt": "将'player100'与'team204'建立起服务关系，起始年份为1990年，结束年份为2018年，且边的权重为@2。", "content": "insert edge serve(start_year,end_year)\nvalues \"player100\"->\"team204\"@2:(1990, 2018)"}
{"prompt": "获取从'player100'到'team204'的serve关系，并返回该属性的边缘。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD edge AS e"}
{"prompt": "获取从'player100'到'team204'的 serve 关系，并返回该边。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\" YIELD edge AS e"}
{"prompt": "获取'player100'在'team204'上权重为1的关系边，并返回该边。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD edge AS e"}
{"prompt": "获取'player100'与'team204'之间权重为1的边，并返回边的别名为 e。", "content": "FETCH PROP ON serve \"player100\" -> \"team204\"@1 YIELD edge AS e"}
{"prompt": "找出'player101'关注的所有实体，并返回这些实体的关注度。", "content": "GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d\n| FETCH PROP ON follow $-.s -> $-.d\nYIELD properties(edge).degree"}
{"prompt": "找出'player101'关注的所有实体，并返回这些实体的关注度。", "content": "GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d\n| FETCH PROP ON follow $-.s -> $-.d\nYIELD properties(edge).degree"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的源节点和目标节点。", "content": "$var = GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的源节点和目标节点。", "content": "$var = GO FROM \"player101\" OVER follow\nYIELD src(edge) AS s, dst(edge) AS d"}
{"prompt": "显示字符集信息。", "content": "SHOW CHARSET"}
{"prompt": "显示字符集。", "content": "SHOW CHARSET"}
{"prompt": "展示排序规则。", "content": "SHOW COLLATION"}
{"prompt": "展示所有的排序规则。", "content": "SHOW COLLATION"}
{"prompt": "展示创建basketballplayer空间的语句。", "content": "SHOW CREATE SPACE basketballplayer"}
{"prompt": "展示创建basketballplayer空间的语句。", "content": "SHOW CREATE SPACE basketballplayer"}
{"prompt": "显示创建标签player的语句。", "content": "SHOW CREATE TAG player"}
{"prompt": "展示创建标签player的语句。", "content": "SHOW CREATE TAG player"}
{"prompt": "显示创建边follow的语句。", "content": "SHOW CREATE EDGE follow"}
{"prompt": "显示创建关系类型follow的语句。", "content": "SHOW CREATE EDGE follow"}
{"prompt": "显示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "显示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "显示主机图谱。", "content": "SHOW HOSTS GRAPH"}
{"prompt": "显示主机图谱。", "content": "SHOW HOSTS GRAPH"}
{"prompt": "展示存储的主机。", "content": "SHOW HOSTS STORAGE"}
{"prompt": "显示存储的主机信息。", "content": "SHOW HOSTS STORAGE"}
{"prompt": "展示主机的元数据。", "content": "SHOW HOSTS META"}
{"prompt": "显示主机的元数据。", "content": "SHOW HOSTS META"}
{"prompt": "展示标签索引的状态。", "content": "SHOW TAG INDEX STATUS"}
{"prompt": "显示标签索引的状态。", "content": "SHOW TAG INDEX STATUS"}
{"prompt": "显示边索引的状态。", "content": "SHOW EDGE INDEX STATUS"}
{"prompt": "显示边索引的状态。", "content": "SHOW EDGE INDEX STATUS"}
{"prompt": "显示所有标签的索引。", "content": "SHOW TAG INDEXES"}
{"prompt": "展示标签的索引信息。", "content": "SHOW TAG INDEXES"}
{"prompt": "展示边的索引。", "content": "SHOW EDGE INDEXES"}
{"prompt": "显示边的索引。", "content": "SHOW EDGE INDEXES"}
{"prompt": "展示所有的分区。", "content": "SHOW PARTS"}
{"prompt": "展示所有分区。", "content": "SHOW PARTS"}
{"prompt": "显示第一个分区的信息。", "content": "SHOW PARTS 1"}
{"prompt": "展示第一个分区的信息。", "content": "SHOW PARTS 1"}
{"prompt": "显示篮球运动员中的角色。", "content": "SHOW ROLES in basketballplayer"}
{"prompt": "显示篮球运动员中的角色。", "content": "SHOW ROLES in basketballplayer"}
{"prompt": "展示快照。", "content": "SHOW SNAPSHOTS"}
{"prompt": "展示快照。", "content": "SHOW SNAPSHOTS"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "使用basketballplayer图空间。", "content": "USE basketballplayer"}
{"prompt": "使用篮球运动员图空间。", "content": "USE basketballplayer"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "显示作业编号为98的作业信息。", "content": "SHOW JOB 98"}
{"prompt": "展示作业编号为98的作业信息。", "content": "SHOW JOB 98"}
{"prompt": "显示状态信息。", "content": "SHOW STATS"}
{"prompt": "展示状态信息。", "content": "SHOW STATS"}
{"prompt": "展示所有标签。", "content": "SHOW TAGS"}
{"prompt": "展示所有标签。", "content": "SHOW TAGS"}
{"prompt": "展示所有边的信息。", "content": "SHOW EDGES"}
{"prompt": "展示所有边的信息。", "content": "SHOW EDGES"}
{"prompt": "显示所有用户。", "content": "SHOW USERS"}
{"prompt": "展示所有用户。", "content": "SHOW USERS"}
{"prompt": "展示会话信息。", "content": "SHOW SESSIONS"}
{"prompt": "显示所有会话。", "content": "SHOW SESSIONS"}
{"prompt": "展示会话号为1635254859271703的会话信息。", "content": "SHOW SESSION 1635254859271703"}
{"prompt": "显示会话1635254859271703。", "content": "SHOW SESSION 1635254859271703"}
{"prompt": "展示本地查询。", "content": "SHOW LOCAL QUERIES"}
{"prompt": "显示本地查询。", "content": "SHOW LOCAL QUERIES"}
{"prompt": "显示查询语句。", "content": "SHOW QUERIES"}
{"prompt": "显示查询列表。", "content": "SHOW QUERIES"}
{"prompt": "展示查询列表，按照执行时间从高到低排序，并返回前10个查询。", "content": "SHOW QUERIES | ORDER BY $-.DurationInUSec DESC | LIMIT 10"}
{"prompt": "展示查询列表，按照查询的执行时间从大到小排序，最多显示10个查询。", "content": "SHOW QUERIES | ORDER BY $-.DurationInUSec DESC | LIMIT 10"}
{"prompt": "显示集群中的Leader节点的元数据。", "content": "SHOW META LEADER"}
{"prompt": "显示元数据的领导节点。", "content": "SHOW META LEADER"}
{"prompt": "返回所有被其他球员关注的球员的姓名，并按关注人数从多到少排序。", "content": "MATCH (v:player)<-[:follow]-(:player) RETURN v.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"}
{"prompt": "统计所有关注其他球员的球员，并按照关注数量从高到低排序，返回球员的姓名和关注数量。", "content": "MATCH (v:player)<-[:follow]-(:player) RETURN v.player.name AS Name, count(*) as cnt ORDER BY cnt DESC"}
{"prompt": "找出'player100'所'关注'的所有实体，并按照实体名称进行分组，返回每个实体的名称和关注数量。", "content": "GO FROM \"player100\" OVER follow BIDIRECT\nYIELD properties($$).name as Name\n| GROUP BY $-.Name\nYIELD $-.Name as Player, count(*) AS Name_Count"}
{"prompt": "找出以'player100'为起点，通过'follow'关系双向连接的所有实体，返回这些实体的名称，并按照名称进行分组统计，得到每个实体的名称和数量。", "content": "GO FROM \"player100\" OVER follow BIDIRECT\nYIELD properties($$).name as Name\n| GROUP BY $-.Name\nYIELD $-.Name as Player, count(*) AS Name_Count"}
{"prompt": "计算'player100'所有'关注'的实体的总度数。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge) AS player, properties(edge).degree AS degree\n| GROUP BY $-.player\nYIELD sum($-.degree)"}
{"prompt": "计算'player100'所有关注的球员的关注度总和。", "content": "GO FROM \"player100\" OVER follow\nYIELD src(edge) AS player, properties(edge).degree AS degree\n| GROUP BY $-.player\nYIELD sum($-.degree)"}
{"prompt": "查找player中的顶点，并返回前3个顶点的ID。", "content": "LOOKUP ON player YIELD id(vertex)|\nLIMIT 3"}
{"prompt": "查找player类型的实体，并返回前3个实体的ID。", "content": "LOOKUP ON player YIELD id(vertex)|\nLIMIT 3"}
{"prompt": "找出'player100'的所有'关注者'，按照他们的年龄和姓名进行升序排序，并返回第2到第4个关注者的姓名和年龄。", "content": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD properties($$).name AS Friend, properties($$).age AS Age\n| ORDER BY $-.Age, $-.Friend\n| LIMIT 1, 3"}
{"prompt": "找出'player100'的所有关注者，并按照他们的年龄和姓名进行升序排序，返回第2到第4个关注者的姓名和年龄。", "content": "GO FROM \"player100\" OVER follow REVERSELY\nYIELD properties($$).name AS Friend, properties($$).age AS Age\n| ORDER BY $-.Age, $-.Friend\n| LIMIT 1, 3"}
{"prompt": "找出从'player100'开始，经过任意关系，最多3步能够到达的实体，返回这些实体的姓名和年龄，限制返回结果为第4到第6条。", "content": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nLIMIT [3,3,3]"}
{"prompt": "从'player100'出发，经过任意关系，找出距离'player100'为3步的实体，返回这些实体的姓名和年龄信息，限制返回结果为第3个到第6个实体。", "content": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nLIMIT [3,3,3]"}
{"prompt": "从'player102'出发，沿着任意类型的边，经过三步，找出所有的目标实体，并返回这些实体的边的信息，最多返回5条。", "content": "GO 3 STEPS FROM \"player102\" OVER * BIDIRECT\nYIELD dst(edge)\nLIMIT [rand32(5),rand32(5),rand32(5)]"}
{"prompt": "找出从'player102'开始，经过最多3步关系路径所到达的实体，并返回这些实体的边", "content": "GO 3 STEPS FROM \"player102\" OVER * BIDIRECT\nYIELD dst(edge)\nLIMIT [rand32(5),rand32(5),rand32(5)]"}
{"prompt": "返回前5个球员的姓名和年龄，按年龄排序。", "content": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age LIMIT 5"}
{"prompt": "返回前5个球员的姓名和年龄，按年龄从小到大排序。", "content": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age LIMIT 5"}
{"prompt": "找出名为'Tim Duncan'的球员所连接的所有实体，并按照年龄降序排列，跳过第一个结果，返回实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排列，跳过第一个结果，返回结果中的实体名称和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排列，跳过前两个实体，返回实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排序，跳过前两个实体，返回剩余实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1+1"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序排序，跳过第一个结果，返回年龄最大的实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"}
{"prompt": "找出名为'Tim Duncan'的球员所连接的实体，并返回这些实体的姓名和年龄，按年龄降序排列，跳过第一个结果，返回第二个结果。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC SKIP 1 LIMIT 1"}
{"prompt": "从'player100'开始，沿着任意关系最多经过3步，返回终点实体的姓名和年龄，要求在第一跳时只能选择1条边，第二跳时可以选择2条边，第三跳时可以选择3条边。", "content": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"}
{"prompt": "从'player100'开始，沿着所有边连续走3步，返回所有终点个实体的名称和年龄，要求在第一跳时只能选择1条边，第二跳时可以选择2条边，第三跳时可以选择3条边。", "content": "GO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [1,2,3]"}
{"prompt": "从'player100'出发，经过1到3步的关系，找出所有实体，并返回它们的姓名和年龄，每步都可以采样两条边。", "content": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"}
{"prompt": "从'player100'出发，经过任意类型的边，进行1到3跳的遍历，返回遍历到的实体的姓名和年龄，每跳都可以自动选择两条边。", "content": "GO 1 TO 3 STEPS FROM \"player100\"\nOVER *\nYIELD properties($$).name AS NAME, properties($$).age AS Age\nSAMPLE [2,2,2]"}
{"prompt": "获取'player100','player101','player102','player103'这些实体的年龄和姓名，并按照年龄升序、姓名降序进行排序。", "content": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"}
{"prompt": "获取\"player100\"、\"player101\"、\"player102\"、\"player103\"的属性中的年龄和姓名，并按照年龄升序、姓名降序排序。", "content": "FETCH PROP ON player \"player100\", \"player101\", \"player102\", \"player103\"\nYIELD properties(vertex).age AS age, properties(vertex).name AS name\n| ORDER BY $-.age ASC, $-.name DESC"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的边的目标节点", "content": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的边的目标实体。", "content": "$var = GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS dst"}
{"prompt": "返回所有球员的姓名和年龄，并按照姓名降序排列。", "content": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"}
{"prompt": "返回所有球员的姓名和年龄，并按照球员姓名降序排序。", "content": "MATCH (v:player) RETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Name DESC"}
{"prompt": "返回所有球员的年龄和姓名，并按年龄降序、姓名升序排序。", "content": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"}
{"prompt": "返回所有球员的年龄和姓名，按照年龄降序和姓名升序排序。", "content": "MATCH (v:player) RETURN v.player.age AS Age, v.player.name AS Name\nORDER BY Age DESC, Name ASC"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照实体的年龄进行排序，返回实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照这些实体的年龄进行排序，返回这些实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照实体的年龄降序排列，返回实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并按照年龄降序返回这些实体的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"}) --> (v2)\nRETURN v2.player.name AS Name, v2.player.age AS Age\nORDER BY Age DESC"}
{"prompt": "返回年龄为32，姓名为Marco Belinelli的实体。", "content": "RETURN {age: 32, name: \"Marco Belinelli\"}"}
{"prompt": "返回一个对象，包含属性age为32，属性name为\"Marco Belinelli\"。", "content": "RETURN {age: 32, name: \"Marco Belinelli\"}"}
{"prompt": "返回一个对象，包含属性zage为32和name为Marco Belinelli。", "content": "RETURN {zage: 32, name: \"Marco Belinelli\"}"}
{"prompt": "返回一个对象，该对象包含属性zage为32，属性name为'Marco Belinelli'。", "content": "RETURN {zage: 32, name: \"Marco Belinelli\"}"}
{"prompt": "匹配所有的球员节点，并返回这些节点。", "content": "MATCH (v:player)\nRETURN v"}
{"prompt": "返回所有player节点。", "content": "MATCH (v:player)\nRETURN v"}
{"prompt": "找出所有球员与其他实体之间的关系，并返回这些关系。", "content": "MATCH (v:player)-[e]->()\nRETURN e"}
{"prompt": "找出所有球员的关系，并返回这些关系。", "content": "MATCH (v:player)-[e]->()\nRETURN e"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回其ID。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN id(v)"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回该球员的ID。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN id(v)"}
{"prompt": "找出名为'Tim Duncan'的球员节点，并返回该节点的标签。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN labels(v)"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回该球员的标签。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN labels(v)"}
{"prompt": "找出名为'Tim Duncan'的球员节点，并返回第一个节点的标签。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN labels(v)[0]"}
{"prompt": "找出所有名为'Tim Duncan'的球员节点，并返回其中第一个节点的标签。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN labels(v)[0]"}
{"prompt": "返回前三个球员的姓名和年龄。", "content": "MATCH (v:player)\nRETURN v.player.name, v.player.age\nLIMIT 3"}
{"prompt": "获取前3个球员的姓名和年龄。", "content": "MATCH (v:player)\nRETURN v.player.name, v.player.age\nLIMIT 3"}
{"prompt": "找出名为'Tim Duncan'的球员所连接的所有实体，并返回这些实体的属性。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2)\nRETURN properties(v2)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有属性。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2)\nRETURN properties(v2)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有关系类型，并返回这些关系类型的唯一值。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN DISTINCT type(e)"}
{"prompt": "找出名为'Tim Duncan'的球员所拥有的所有关系类型，并返回这些关系类型的唯一值。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[e]->()\nRETURN DISTINCT type(e)"}
{"prompt": "找出名为'Tim Duncan'的球员，以及与其之间具有3跳关系的关系路径，并返回这些路径。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[*3]->()\nRETURN p"}
{"prompt": "找出名为'Tim Duncan'的球员，且与其有3跳关系的所有实体，并返回他们之间的路径。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[*3]->()\nRETURN p"}
{"prompt": "找出名为'Tim Duncan'的球员节点及其所有相邻节点，并返回这些节点。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2)\nRETURN nodes(p)"}
{"prompt": "找出名为'Tim Duncan'的球员节点及其所有关联节点，并返回这些节点。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2)\nRETURN nodes(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的所有关系，并返回这些关系。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2)\nRETURN relationships(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其他球员之间的所有关系，并返回这些关系。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[]->(v2)\nRETURN relationships(p)"}
{"prompt": "找出名为'Tim Duncan'的球员与其相关的所有实体之间最长为2的路径，并返回这些路径以及路径的长度。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[*..2]->(v2)\nRETURN p AS Paths, length(p) AS Length"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间长度为2以内的所有路径，并返回这些路径及其长度。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})-[*..2]->(v2)\nRETURN p AS Paths, length(p) AS Length"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回所有属性。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN *"}
{"prompt": "找出名为'Tim Duncan'的球员，并返回所有相关信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"})\nRETURN *"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的所有关系，并返回这些关系的详细信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(v2)\nRETURN *"}
{"prompt": "找出名为'Tim Duncan'的球员与其他实体之间的所有关系，并返回这些关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(v2)\nRETURN *"}
{"prompt": "找出名为'Tim Duncan'的球员所服务的所有球队，并返回这些球队的名称。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[:serve]->(v2)\nRETURN v2.team.name AS Team"}
{"prompt": "找出名为'Tim Duncan'的球员所在的球队名称。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[:serve]->(v2)\nRETURN v2.team.name AS Team"}
{"prompt": "返回'Amber'，别名为Name。", "content": "RETURN \"Amber\" AS Name"}
{"prompt": "返回字符串'Amber'，其别名为Name。", "content": "RETURN \"Amber\" AS Name"}
{"prompt": "找出名为'Tim Duncan'的球员所参与的所有关系，返回这些关系对应的球员的姓名和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(v2)\nRETURN v2.player.name, type(e), v2.player.age"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并返回这些实体的姓名、关系类型和年龄。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(v2)\nRETURN v2.player.name, type(e), v2.player.age"}
{"prompt": "找出名为'Tony Parker'的球员所关联的其他球员，并返回这些球员的姓名、问候语'Hello graphs!'和球员年龄是否大于35。", "content": "MATCH (v:player{name:\"Tony Parker\"})-->(v2:player)\nRETURN DISTINCT v2.player.name, \"Hello\"+\" graphs!\", v2.player.age > 35"}
{"prompt": "找出名为'Tony Parker'的球员所关联的其他球员，并返回这些球员的姓名、问候语'Hello graphs!'以及球员年龄是否大于35岁。", "content": "MATCH (v:player{name:\"Tony Parker\"})-->(v2:player)\nRETURN DISTINCT v2.player.name, \"Hello\"+\" graphs!\", v2.player.age > 35"}
{"prompt": "返回1加1的结果。", "content": "RETURN 1+1"}
{"prompt": "返回1加1的结果。", "content": "RETURN 1+1"}
{"prompt": "判断3是否大于1。", "content": "RETURN 3 > 1"}
{"prompt": "判断3是否大于1。", "content": "RETURN 3 > 1"}
{"prompt": "返回1加1的结果和一个介于1到5之间的随机数。", "content": "RETURN 1+1, rand32(1, 5)"}
{"prompt": "返回1加1的结果和一个介于1到5之间的随机数。", "content": "RETURN 1+1, rand32(1, 5)"}
{"prompt": "找出名为'Tony Parker'的球员所关联的所有球员，并返回这些球员的姓名和年龄。", "content": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age"}
{"prompt": "找出名为'Tony Parker'的球员所关联的所有球员，得到球员的姓名和年龄。", "content": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN v2.player.name, v2.player.age"}
{"prompt": "找出名为'Tony Parker'的球员所关联的所有球员，并返回去重后的这些球员的姓名和年龄。", "content": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age"}
{"prompt": "找出名为'Tony Parker'的球员所关联的所有球员，并返回去重后的球员的姓名和年龄。", "content": "MATCH (v:player{name:\"Tony Parker\"})--(v2:player)\nRETURN DISTINCT v2.player.name, v2.player.age"}
{"prompt": "插入一个t1类型的顶点，该顶点的属性a的值为当前时间，id为'101'。", "content": "INSERT VERTEX t1(a) VALUES \"101\":(now())"}
{"prompt": "插入一个t1类型的顶点，该顶点的属性a的值为当前时间，唯一识别符为'101'。", "content": "INSERT VERTEX t1(a) VALUES \"101\":(now())"}
{"prompt": "如果标签t2不存在，则创建标签t2，包含三个属性a、b和c，其中属性a是整型，属性b是整型，属性c是字符串。设置TTL_DURATION为100，TTL_COL为\"a\"。", "content": "CREATE TAG IF NOT EXISTS t2(a int, b int, c string) TTL_DURATION= 100, TTL_COL = \"a\""}
{"prompt": "如果标签t2不存在，则创建标签t2，包含三个属性a、b和c，其中属性a是整数类型，属性b是整数类型，属性c是字符串类型。设置TTL_DURATION为100，TTL_COL为\"a\"。", "content": "CREATE TAG IF NOT EXISTS t2(a int, b int, c string) TTL_DURATION= 100, TTL_COL = \"a\""}
{"prompt": "将属性a设为1648197138，属性b设为30，属性c设为'Hello'，并将其插入到标识为102的顶点中，该顶点属于t2类型实体。", "content": "INSERT VERTEX t2(a, b, c) VALUES \"102\":(1648197138, 30, \"Hello\")"}
{"prompt": "将属性值为(1648197138, 30, \"Hello\")的顶点插入到t2中，顶点ID为102。", "content": "INSERT VERTEX t2(a, b, c) VALUES \"102\":(1648197138, 30, \"Hello\")"}
{"prompt": "删除标签t1中的实体a。", "content": "ALTER TAG t1 DROP (a)"}
{"prompt": "删除标签t1中的实体a。", "content": "ALTER TAG t1 DROP (a)"}
{"prompt": "将标签t1的TTL列设置为空。", "content": "ALTER TAG t1 TTL_COL = \"\""}
{"prompt": "将标签t1的TTL列设置为空。", "content": "ALTER TAG t1 TTL_COL = \"\""}
{"prompt": "将标签t1的TTL_DURATION设置为0。", "content": "ALTER TAG t1 TTL_DURATION = 0"}
{"prompt": "将标签t1的TTL_DURATION设置为0。", "content": "ALTER TAG t1 TTL_DURATION = 0"}
{"prompt": "找出名字为'Tim Duncan'的球员，或者年龄小于30且名字为'Yao Ming'的球员，或者名字既不是'Yao Ming'也不是'Tim Duncan'的实体，并返回这些球员的名字和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age"}
{"prompt": "找出球员名为'Tim Duncan'的实体，或者年龄小于30且名字为'Yao Ming'的实体，或者名字既不是'Yao Ming'也不是'Tim Duncan'的实体，并返回这些实体的名字和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name == \"Tim Duncan\"\nXOR (v.player.age < 30 AND v.player.name == \"Yao Ming\")\nOR NOT (v.player.name == \"Yao Ming\" OR v.player.name == \"Tim Duncan\")\nRETURN v.player.name, v.player.age"}
{"prompt": "找出以'player100'为起点，通过'follow'关系，且边的属性中度数大于90或者终点实体的年龄不等于33且姓名不等于'Tony Parker'的所有实体，并返回这些实体的属性。", "content": "GO FROM \"player100\"\nOVER follow\nWHERE properties(edge).degree > 90\nOR properties($$).age != 33\nAND properties($$).name != \"Tony Parker\"\nYIELD properties($$)"}
{"prompt": "找出以'player100'为起点，通过'follow'关系，且边的属性中的度数大于90或者终点实体的年龄不等于33且名字不等于'Tony Parker'的所有实体，并返回这些实体的属性。", "content": "GO FROM \"player100\"\nOVER follow\nWHERE properties(edge).degree > 90\nOR properties($$).age != 33\nAND properties($$).name != \"Tony Parker\"\nYIELD properties($$)"}
{"prompt": "找出年龄小于25岁的球员所对应的实体的姓名和年龄。", "content": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"}
{"prompt": "找出所有年龄小于25岁的球员的姓名和年龄。", "content": "MATCH (v:player)-[e]->(v2)\nWHERE v2.player.age < 25\nRETURN v2.player.name, v2.player.age"}
{"prompt": "找出年龄大于等于42岁的'player100'所关注的所有实体，并返回这些实体信息。", "content": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"}
{"prompt": "找出年龄大于等于42岁的'player100'所关注的所有实体，并返回终点", "content": "GO FROM \"player100\" OVER follow\nWHERE $^.player.age >= 42\nYIELD dst(edge)"}
{"prompt": "找出在2000年之前开始参加比赛的所有球员的姓名和年龄。", "content": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"}
{"prompt": "找出所有在2000年之前开始参加比赛的球员的姓名和年龄。", "content": "MATCH (v:player)-[e]->()\nWHERE e.start_year < 2000\nRETURN DISTINCT v.player.name, v.player.age"}
{"prompt": "找出所有关注度超过90的'player100'的实体，并返回这些实体的边的目标节点。", "content": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"}
{"prompt": "找出‘player100’所关注的所有实体，其中关注度大于90，并返回这些实体的边信息。", "content": "GO FROM \"player100\" OVER follow\nWHERE follow.degree > 90\nYIELD dst(edge)"}
{"prompt": "找出年龄小于21岁的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age"}
{"prompt": "找出年龄小于21岁的球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v[toLower(\"AGE\")] < 21\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有具有年龄信息的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有具有年龄信息的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE exists(v.player.age)\nRETURN v.player.name, v.player.age"}
{"prompt": "如果test空间不存在，则创建一个名为test的空间，其中实体ID的类型为固定长度字符串，长度为30。", "content": "CREATE SPACE IF NOT EXISTS test (vid_type=FIXED_STRING(30))"}
{"prompt": "如果test空间不存在，则创建一个名为test的空间，其中实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS test (vid_type=FIXED_STRING(30))"}
{"prompt": "使用test图空间。", "content": "USE test"}
{"prompt": "使用图空间test。", "content": "USE test"}
{"prompt": "如果边e1不存在，则创建边e1，并且边e1的属性p1为整数类型。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 int)"}
{"prompt": "如果边e1不存在，则创建边e1，边e1具有属性p1，p1的类型为整数。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 int)"}
{"prompt": "如果person标签不存在，则创建person标签，属性为p1，数据类型为整型。", "content": "CREATE TAG IF NOT EXISTS person(p1 int)"}
{"prompt": "如果person标签不存在，则创建person标签。", "content": "CREATE TAG IF NOT EXISTS person(p1 int)"}
{"prompt": "将值为1的person节点插入到属性p1为1的顶点中。", "content": "INSERT VERTEX person(p1) VALUES \"1\":(1)"}
{"prompt": "将实体类型为person的节点插入图数据库，并为该节点赋予ID为1的属性值为1。", "content": "INSERT VERTEX person(p1) VALUES \"1\":(1)"}
{"prompt": "将值为2的person节点插入到图数据库中。", "content": "INSERT VERTEX person(p1) VALUES \"2\":(2)"}
{"prompt": "将一个名为\"person\"的实体插入到图数据库中，该实体的属性为p1，值为2。", "content": "INSERT VERTEX person(p1) VALUES \"2\":(2)"}
{"prompt": "在边e1上插入一条从实体1指向实体2的边，属性p1为10，权重为0。", "content": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@0:(10)"}
{"prompt": "对边类型e1上插入一条从'1'指向'2'的边，属性p1为10，权重为@0。", "content": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@0:(10)"}
{"prompt": "新增一条e1类型边，从'1'指向'2'，属性p1为11，权重为@1。", "content": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@1:(11)"}
{"prompt": "在边e1上插入一条关系，关系的起点是实体1，终点是实体2，权重为1，属性为p1，属性值为11。", "content": "INSERT EDGE e1(p1) VALUES \"1\"->\"2\"@1:(11)"}
{"prompt": "找出以实体'1'为起点，边的排名大于2的所有边，返回这些边的起点、终点、排名和属性p1，并按照排名降序排序。", "content": "GO FROM \"1\"\nOVER e1\nWHERE rank(edge) > 2\nYIELD src(edge), dst(edge), rank(edge) AS Rank, properties(edge).p1 |\nORDER BY $-.Rank DESC"}
{"prompt": "找出ID为1的实体所连接的边中，排名大于2的边，返回这些边的起始节点、目标节点、排名和属性p1，并按照排名降序排序。", "content": "GO FROM \"1\"\nOVER e1\nWHERE rank(edge) > 2\nYIELD src(edge), dst(edge), rank(edge) AS Rank, properties(edge).p1 |\nORDER BY $-.Rank DESC"}
{"prompt": "找出所有没有被其他实体关注的实体，并返回它们的所有信息。", "content": "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *"}
{"prompt": "找出所有没有被其他实体关注的实体，并返回它们的所有属性。", "content": "MATCH (v)-[e:follow]->()\nWHERE rank(e)==0\nRETURN *"}
{"prompt": "找出名为'Tim Duncan'的球员与其所属的球队之间的关系，并返回球员与球队之间的所有连接关系。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"}
{"prompt": "找出名为'Tim Duncan'的球员与其所属的所有球队之间的关系，并返回所有球队的名称。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE (v)-[e]->(t:team)\nRETURN (v)-->()"}
{"prompt": "找出名为'Tim Duncan'的球员与其相关的所有实体，要求实体不为team类型，并返回这些路径信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"}
{"prompt": "找出名为'Tim Duncan'的球员与其关联的所有非球队实体，并返回这些路径信息。", "content": "MATCH (v:player{name:\"Tim Duncan\"})-[e]->(t)\nWHERE NOT (v)-[e]->(t:team)\nRETURN (v)-->()"}
{"prompt": "找出名字以't'开头的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有以字母't'开头的球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name STARTS WITH \"t\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有以字母'r'结尾的球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有名字以'r'结尾的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name ENDS WITH \"r\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有名字中包含Pa的球员，并返回他们的名字和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出名字中包含Pa的球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.name CONTAINS \"Pa\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有名字不以'R'结尾的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出所有名字不以'R'结尾的球员，并返回他们的姓名和年龄。", "content": "MATCH (v:player)\nWHERE NOT v.player.name ENDS WITH \"R\"\nRETURN v.player.name, v.player.age"}
{"prompt": "找出年龄在20到25岁之间的球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"}
{"prompt": "找出年龄在20到25岁之间的球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.age IN range(20,25)\nRETURN v.player.name, v.player.age"}
{"prompt": "查找年龄为25或28的所有球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"}
{"prompt": "查找年龄为25或28的所有球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player\nWHERE player.age IN [25,28]\nYIELD properties(vertex).name, properties(vertex).age"}
{"prompt": "找出年龄不在20到25岁范围内的所有球员，并按年龄排序，返回球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"}
{"prompt": "找出年龄不在20到25岁之间的所有球员，并按年龄排序，返回球员的姓名和年龄。", "content": "MATCH (v:player)\nWHERE v.player.age NOT IN range(20,25)\nRETURN v.player.name AS Name, v.player.age AS Age\nORDER BY Age"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的姓名和年龄。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"}
{"prompt": "找出'player100'所关注的所有实体，并返回这些实体的姓名和年龄。", "content": "GO FROM \"player100\" OVER follow\nYIELD properties($$).name AS Friend, properties($$).age AS Age"}
{"prompt": "获取名为'player100'的球员的属性中的姓名。", "content": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name"}
{"prompt": "获取'player100'的属性，并返回该实体的名称。", "content": "FETCH PROP ON player \"player100\"\nYIELD properties(vertex).name"}
{"prompt": "查找名字为'Tony Parker'的球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name, properties(vertex).age"}
{"prompt": "查找名为'Tony Parker'的球员的姓名和年龄。", "content": "LOOKUP ON player WHERE player.name == \"Tony Parker\"\nYIELD properties(vertex).name, properties(vertex).age"}
{"prompt": "找出'player100'的所有关注对象，获取他们的年龄，并计算平均年龄和关注对象的数量。", "content": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS ID\n| FETCH PROP ON player $-.ID\nYIELD properties(vertex).age AS Age\n| YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends"}
{"prompt": "找出'player100'的所有关注的人，并返回他们的年龄，计算平均年龄和关注人数。", "content": "GO FROM \"player100\" OVER follow\nYIELD dst(edge) AS ID\n| FETCH PROP ON player $-.ID\nYIELD properties(vertex).age AS Age\n| YIELD AVG($-.Age) as Avg_age, count(*)as Num_friends"}
{"prompt": "找出'player101'关注的所有实体，并返回这些实体的度数和ID。", "content": "$var1 = GO FROM \"player101\" OVER follow\nYIELD properties(edge).degree AS Degree, dst(edge) as ID"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的 ID 和关注度。", "content": "$var1 = GO FROM \"player101\" OVER follow\nYIELD properties(edge).degree AS Degree, dst(edge) as ID"}
{"prompt": "查找年龄在30到32岁之间的球员，并返回这些球员的年龄。", "content": "LOOKUP ON player\nWHERE player.age < 32 and player.age >30\nYIELD DISTINCT properties(vertex).age as v"}
{"prompt": "查找年龄在30到32岁之间的球员，并返回这些球员的年龄。", "content": "LOOKUP ON player\nWHERE player.age < 32 and player.age >30\nYIELD DISTINCT properties(vertex).age as v"}
{"prompt": "生成一个介于1到6之间的随机数。", "content": "YIELD rand32(1, 6)"}
{"prompt": "生成一个介于1到6之间的32位随机数。", "content": "YIELD rand32(1, 6)"}
{"prompt": "计算'Tim'的哈希值除以100的余数。", "content": "YIELD hash(\"Tim\") % 100"}
{"prompt": "计算名为'Tim'的哈希值除以100的余数。", "content": "YIELD hash(\"Tim\") % 100"}
{"prompt": "计算2加3的结果，如果结果是4，则返回0，如果结果是5，则返回1，否则返回-1。", "content": "YIELD\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"}
{"prompt": "计算2加3的结果，如果结果是4，则返回0；如果结果是5，则返回1；否则返回-1。", "content": "YIELD\nCASE 2+3\nWHEN 4 THEN 0\nWHEN 5 THEN 1\nELSE -1\nEND\nAS result"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并返回这些实体。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1"}
{"prompt": "找出名为'Tim Duncan'的球员所关联的所有实体，并返回这些实体的唯一节点。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})--()\nWITH nodes(p) AS n\nUNWIND n AS n1\nRETURN DISTINCT n1"}
{"prompt": "找出 ID 为'player100'的实体的所有标签，并返回这些标签。", "content": "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f"}
{"prompt": "找出ID为player100的实体的标签。", "content": "MATCH (v)\nWHERE id(v)==\"player100\"\nWITH labels(v) AS tags_unf\nUNWIND tags_unf AS tags_f\nRETURN tags_f"}
{"prompt": "找出所有年龄小于25岁的球员，并按照年龄从小到大排序，返回这些球员的姓名和年龄。", "content": "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age"}
{"prompt": "找出所有年龄小于25岁的球员，并按年龄从小到大排序，返回这些球员的姓名和年龄。", "content": "MATCH (v:player)-->(v2:player)\nWITH DISTINCT v2 AS v2, v2.player.age AS Age\nORDER BY Age\nWHERE Age<25\nRETURN v2.player.name AS Name, Age"}
{"prompt": "找出所有球员的名字，并按照字母降序排序，返回前三个球员的名字。", "content": "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)"}
{"prompt": "找出所有球员的姓名，并按照姓名降序排序，返回前三个球员的姓名。", "content": "MATCH (v:player)\nWITH v.player.name AS Name\nORDER BY Name DESC\nLIMIT 3\nRETURN collect(Name)"}
{"prompt": "判断3是否在列表[1, 2, 3]中，并返回结果r。", "content": "WITH [1, 2, 3] AS `list` RETURN 3 IN `list` AS r"}
{"prompt": "返回列表`list`[1, 2, 3]中是否包含数字3的判断结果。", "content": "WITH [1, 2, 3] AS `list` RETURN 3 IN `list` AS r"}
{"prompt": "判断数字4是否大于数字3，并返回结果。", "content": "WITH 4 AS one, 3 AS two RETURN one > two AS result"}
{"prompt": "返回一个结果，判断数字4是否大于数字3。", "content": "WITH 4 AS one, 3 AS two RETURN one > two AS result"}
{"prompt": "展开列表[1,2,3]并返回每个元素。", "content": "UNWIND [1,2,3] AS n RETURN n"}
{"prompt": "展开数组[1,2,3]并返回每个元素。", "content": "UNWIND [1,2,3] AS n RETURN n"}
{"prompt": "将列表[1,1,2,2,3,3]去重并按升序排序，然后返回排序后的列表。", "content": "WITH [1,1,2,2,3,3] AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nORDER BY r\nRETURN collect(r)"}
{"prompt": "将列表 [1,1,2,2,3,3] 去重并按升序排序，然后返回排序后的结果。", "content": "WITH [1,1,2,2,3,3] AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nORDER BY r\nRETURN collect(r)"}
{"prompt": "找出名为'Tim Duncan'的球员节点及其所有关联节点，并返回这些节点的集合。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})--(v2)\nWITH nodes(p) AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nRETURN collect(r)"}
{"prompt": "找出名为'Tim Duncan'的球员节点以及与之相连的所有节点，并返回这些节点的集合。", "content": "MATCH p=(v:player{name:\"Tim Duncan\"})--(v2)\nWITH nodes(p) AS n\nUNWIND n AS r\nWITH DISTINCT r AS r\nRETURN collect(r)"}
{"prompt": "返回'player101'和'player100'所有关注的边。", "content": "YIELD ['player101','player100'] AS a | UNWIND $-.a AS b | GO FROM $-.b OVER follow YIELD edge AS e"}
{"prompt": "返回'player101'和'player100'被'follow'关系连接的边的集合。", "content": "YIELD ['player101','player100'] AS a | UNWIND $-.a AS b | GO FROM $-.b OVER follow YIELD edge AS e"}
{"prompt": "查找年龄大于46岁的球员的所有属性，并将这些属性展开为单独的结果返回。", "content": "LOOKUP ON player\nWHERE player.age > 46\nYIELD DISTINCT keys(vertex) as p | UNWIND $-.p as a | YIELD $-.a AS a"}
{"prompt": "查找年龄大于46的所有球员，并返回这些球员的属性名称。", "content": "LOOKUP ON player\nWHERE player.age > 46\nYIELD DISTINCT keys(vertex) as p | UNWIND $-.p as a | YIELD $-.a AS a"}
{"prompt": "创建一个名为hero的标签，其中包含喜欢和身高两个属性。", "content": "CREATE TAG hero(like string, height int)"}
{"prompt": "创建一个名为hero的标签，其中包含like字段和height字段。", "content": "CREATE TAG hero(like string, height int)"}
{"prompt": "找出与'player100'通过'serve'关系相连的所有实体，并返回这些实体。", "content": "GET SUBGRAPH 2 STEPS FROM \"player100\" BOTH serve\nYIELD edges as e | UNWIND $-.e as a | YIELD $-.a AS a"}
{"prompt": "找出与'player100'通过'serve'关系直接或间接相连的所有实体，并返回这些实体。", "content": "GET SUBGRAPH 2 STEPS FROM \"player100\" BOTH serve\nYIELD edges as e | UNWIND $-.e as a | YIELD $-.a AS a"}
{"prompt": "找出从'player101'到'team204'的最短路径，并返回路径上的所有节点。", "content": "FIND SHORTEST PATH FROM \"player101\" TO \"team204\" OVER serve\nYIELD path as p | YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"}
{"prompt": "找出从'player101'到'team204'的最短路径，并返回路径上的所有节点。", "content": "FIND SHORTEST PATH FROM \"player101\" TO \"team204\" OVER serve\nYIELD path as p | YIELD nodes($-.p) AS nodes | UNWIND $-.nodes AS a | YIELD $-.a AS a"}
{"prompt": "如果my_space_1空间不存在，则创建一个vid类型为固定字符串（长度为30）的空间。", "content": "CREATE SPACE IF NOT EXISTS my_space_1 (vid_type=FIXED_STRING(30))"}
{"prompt": "如果my_space_1空间不存在，则创建一个vid类型为固定字符串（长度为30）的空间。", "content": "CREATE SPACE IF NOT EXISTS my_space_1 (vid_type=FIXED_STRING(30))"}
{"prompt": "如果my_space_2空间不存在，则创建一个具有15个分区和1个副本因子的空间，并且实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS my_space_2 (partition_num=15, replica_factor=1, vid_type=FIXED_STRING(30))"}
{"prompt": "如果my_space_2不存在，则创建一个包含15个分区和1个副本因子的空间，其中实体ID类型为固定长度字符串（长度为30）。", "content": "CREATE SPACE IF NOT EXISTS my_space_2 (partition_num=15, replica_factor=1, vid_type=FIXED_STRING(30))"}
{"prompt": "创建一个名为my_space_3的图空间，该图空间有15个分区，副本因子为1，实体ID类型为固定长度字符串（长度为30），用于进行测试。", "content": "CREATE SPACE IF NOT EXISTS my_space_3 (partition_num=15, replica_factor=1, vid_type=FIXED_STRING(30)) comment=\"测试图空间\""}
{"prompt": "创建一个名为my_space_3的图空间，包含15个分区，每个分区有1个副本，并且实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS my_space_3 (partition_num=15, replica_factor=1, vid_type=FIXED_STRING(30)) comment=\"测试图空间\""}
{"prompt": "如果my_space_3不存在，则创建一个名为my_space_4的空间。", "content": "CREATE SPACE IF NOT EXISTS my_space_4 as my_space_3"}
{"prompt": "如果my_space_3不存在，则创建名为my_space_4的空间。", "content": "CREATE SPACE IF NOT EXISTS my_space_4 as my_space_3"}
{"prompt": "显示创建名为my_space_4的空间。", "content": "SHOW CREATE SPACE my_space_4"}
{"prompt": "显示创建名为my_space_4的空间。", "content": "SHOW CREATE SPACE my_space_4"}
{"prompt": "展示所有的主机信息。", "content": "SHOW HOSTS"}
{"prompt": "显示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "显示所有的主机。", "content": "SHOW HOSTS"}
{"prompt": "展示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "如果空间space1不存在，则创建一个空间，该空间中的实体ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS space1 (vid_type=FIXED_STRING(30))"}
{"prompt": "如果空间space1不存在，则创建一个固定字符串长度为30的空间。", "content": "CREATE SPACE IF NOT EXISTS space1 (vid_type=FIXED_STRING(30))"}
{"prompt": "如果space2不存在，则创建一个名为space2的空间，其中包含固定长度为30的字符串类型的ID。", "content": "CREATE SPACE IF NOT EXISTS space2 (vid_type=FIXED_STRING(30))"}
{"prompt": "如果space2不存在，则创建一个空间，该空间的实体ID类型为固定长度字符串，长度为30。", "content": "CREATE SPACE IF NOT EXISTS space2 (vid_type=FIXED_STRING(30))"}
{"prompt": "使用space1空间。", "content": "USE space1"}
{"prompt": "使用space1空间。", "content": "USE space1"}
{"prompt": "使用space2空间。", "content": "USE space2"}
{"prompt": "使用space2空间。", "content": "USE space2"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "显示所有空间。", "content": "SHOW SPACES"}
{"prompt": "描述篮球运动员空间的信息。", "content": "DESCRIBE SPACE basketballplayer"}
{"prompt": "描述篮球运动员空间。", "content": "DESCRIBE SPACE basketballplayer"}
{"prompt": "如果player标签不存在，则创建一个包含姓名和年龄属性的player标签。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "如果标签player不存在，则创建一个名为player的标签，包含姓名和年龄属性。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "如果标签不存在，则创建一个没有属性的标签。", "content": "CREATE TAG IF NOT EXISTS no_property()"}
{"prompt": "如果不存在，则创建一个没有属性的标签。", "content": "CREATE TAG IF NOT EXISTS no_property()"}
{"prompt": "如果player_with_default标签不存在，则创建一个名为player_with_default的标签，该标签包含名字和年龄属性，年龄属性的默认值为20。", "content": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"}
{"prompt": "如果player_with_default标签不存在，则创建一个带有默认年龄为20的球员实体标签。", "content": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"}
{"prompt": "创建一个名为woman的标签，包含姓名、年龄、婚姻状态、薪水和创建时间等属性，创建时间属性具有100秒的生存期，生存期字段为create_time。", "content": "CREATE TAG IF NOT EXISTS woman(name string, age int,\nmarried bool, salary double, create_time timestamp)\nTTL_DURATION = 100, TTL_COL = \"create_time\""}
{"prompt": "创建一个woman标签，包含姓名、年龄、婚姻状况、工资和创建时间等属性，并设置创建时间为100秒后过期。", "content": "CREATE TAG IF NOT EXISTS woman(name string, age int,\nmarried bool, salary double, create_time timestamp)\nTTL_DURATION = 100, TTL_COL = \"create_time\""}
{"prompt": "如果test标签不存在，则创建test标签，包含两个属性p1和p2。", "content": "CREATE TAG IF NOT EXISTS test(p1 string, p2 int)"}
{"prompt": "如果test标签不存在，则创建test标签，其中包含两个属性：p1（字符串类型）和p2（整数类型）。", "content": "CREATE TAG IF NOT EXISTS test(p1 string, p2 int)"}
{"prompt": "删除标签test。", "content": "DROP TAG test"}
{"prompt": "删除test标签。", "content": "DROP TAG test"}
{"prompt": "如果t1标签不存在，则创建一个具有p1字符串和p2整数属性的标签。", "content": "CREATE TAG IF NOT EXISTS t1 (p1 string, p2 int)"}
{"prompt": "如果t1标签不存在，则创建一个具有p1字符串和p2整数属性的标签。", "content": "CREATE TAG IF NOT EXISTS t1 (p1 string, p2 int)"}
{"prompt": "给标签t1添加两个属性p3和p4，p3是整型，p4是长度为10的固定字符串。", "content": "ALTER TAG t1 ADD (p3 int32, p4 fixed_string(10))"}
{"prompt": "给标签t1添加两个属性，一个是整数类型的p3，另一个是长度为10的固定字符串类型的p4。", "content": "ALTER TAG t1 ADD (p3 int32, p4 fixed_string(10))"}
{"prompt": "将标签t1的TTL持续时间设置为2，TTL列设置为'p2'。", "content": "ALTER TAG t1 TTL_DURATION = 2, TTL_COL = \"p2\""}
{"prompt": "将标签t1的TTL_DURATION设置为2，TTL_COL设置为'p2'。", "content": "ALTER TAG t1 TTL_DURATION = 2, TTL_COL = \"p2\""}
{"prompt": "修改标签t1的注释为'test1'。", "content": "ALTER TAG t1 COMMENT ='test1'"}
{"prompt": "将标签t1的注释修改为'test1'。", "content": "ALTER TAG t1 COMMENT ='test1'"}
{"prompt": "将标签t1添加一个名为p5的double类型属性，该属性不能为空且默认值为0.4，用于注释为'test2'的测试。", "content": "ALTER TAG t1 ADD (p5 double NOT NULL DEFAULT 0.4 COMMENT'p5') COMMENT='test2'"}
{"prompt": "给标签t1添加一个名为p5的double类型属性，该属性默认值为0.4，不允许为空，并且有一个注释为'test2'。", "content": "ALTER TAG t1 ADD (p5 double NOT NULL DEFAULT 0.4 COMMENT'p5') COMMENT='test2'"}
{"prompt": "修改标签t1，将属性p3的类型改为int64，将属性p4的类型改为string。", "content": "ALTER TAG t1 CHANGE (p3 int64, p4 string)"}
{"prompt": "修改标签t1，将属性p3的类型改为int64，将属性p4的类型改为string。", "content": "ALTER TAG t1 CHANGE (p3 int64, p4 string)"}
{"prompt": "展示所有标签。", "content": "SHOW TAGS"}
{"prompt": "显示所有标签。", "content": "SHOW TAGS"}
{"prompt": "描述标签player。", "content": "DESCRIBE TAG player"}
{"prompt": "描述标签 player。", "content": "DESCRIBE TAG player"}
{"prompt": "如果test1标签不存在，则创建一个test1标签，包含参数p1（字符串类型）和p2（整数类型）。", "content": "CREATE TAG IF NOT EXISTS test1(p1 string, p2 int)"}
{"prompt": "如果test1标签不存在，则创建test1标签，包含两个属性p1和p2。", "content": "CREATE TAG IF NOT EXISTS test1(p1 string, p2 int)"}
{"prompt": "如果test2标签不存在，则创建test2标签，包含属性p3（字符串类型）和p4（整数类型）。", "content": "CREATE TAG IF NOT EXISTS test2(p3 string, p4 int)"}
{"prompt": "如果test2标签不存在，则创建test2标签，包含p3字符串属性和p4整数属性。", "content": "CREATE TAG IF NOT EXISTS test2(p3 string, p4 int)"}
{"prompt": "插入两个顶点test1和test2，test1的属性为p1为'123'，p2为1，test2的属性为p3为'456'，p4为2。", "content": "INSERT VERTEX test1(p1, p2),test2(p3, p4) VALUES \"test\":(\"123\", 1, \"456\", 2)"}
{"prompt": "插入test1和test2两个顶点，test1的属性为(p1:'123', p2: 1)，test2的属性为(p3:'456', p4: 2)", "content": "INSERT VERTEX test1(p1, p2),test2(p3, p4) VALUES \"test\":(\"123\", 1, \"456\", 2)"}
{"prompt": "获取'test'图中所有实体的属性，并返回这些实体的顶点。", "content": "FETCH PROP ON * \"test\" YIELD vertex AS v"}
{"prompt": "获取'test'上所有实体的属性，并返回这些实体的顶点。", "content": "FETCH PROP ON * \"test\" YIELD vertex AS v"}
{"prompt": "从'test'中删除'test1'标签。", "content": "DELETE TAG test1 FROM \"test\""}
{"prompt": "从'test'中删除标签'test1'。", "content": "DELETE TAG test1 FROM \"test\""}
{"prompt": "获取'test'上所有实体的属性，并返回这些实体的顶点。", "content": "FETCH PROP ON * \"test\" YIELD vertex AS v"}
{"prompt": "获取'test'图中所有实体的属性，并返回这些实体的顶点。", "content": "FETCH PROP ON * \"test\" YIELD vertex AS v"}
{"prompt": "删除'test'里的所有标签。", "content": "DELETE TAG * FROM \"test\""}
{"prompt": "删除'test'空间中的所有标签", "content": "DELETE TAG * FROM \"test\""}
{"prompt": "获取'test'图中所有实体的属性，并返回这些实体的顶点。", "content": "FETCH PROP ON * \"test\" YIELD vertex AS v"}
{"prompt": "获取名为'test'的所有实体的属性，并返回这些实体的顶点。", "content": "FETCH PROP ON * \"test\" YIELD vertex AS v"}
{"prompt": "如果标签shareholder不存在，则创建该标签。", "content": "CREATE TAG IF NOT EXISTS shareholder()"}
{"prompt": "如果标签'shareholder'不存在，则创建该标签，无属性值。", "content": "CREATE TAG IF NOT EXISTS shareholder()"}
{"prompt": "如果不存在，创建一个名为shareholder_tag的标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS shareholder_tag on shareholder()"}
{"prompt": "如果股东标签索引不存在，则在股东标签上创建索引。", "content": "CREATE TAG INDEX IF NOT EXISTS shareholder_tag on shareholder()"}
{"prompt": "创建一个名为'player100'的实体，该实体是一个股东。", "content": "INSERT VERTEX shareholder() VALUES \"player100\":()"}
{"prompt": "创建一个名为'player100'的实体，其属性为shareholder()。", "content": "INSERT VERTEX shareholder() VALUES \"player100\":()"}
{"prompt": "插入一个名为'player101'的实体，该实体是一个股东。", "content": "INSERT VERTEX shareholder() VALUES \"player101\":()"}
{"prompt": "插入一个拥有股份的实体，其值为空，标识为'player101'。", "content": "INSERT VERTEX shareholder() VALUES \"player101\":()"}
{"prompt": "返回所有股东的实体。", "content": "MATCH (v:shareholder) RETURN v"}
{"prompt": "返回所有股东实体。", "content": "MATCH (v:shareholder) RETURN v"}
{"prompt": "查找股东表中的所有实体，并返回这些实体的ID。", "content": "LOOKUP ON shareholder YIELD id(vertex)"}
{"prompt": "查找股东数据集中所有实体的ID。", "content": "LOOKUP ON shareholder YIELD id(vertex)"}
{"prompt": "从实体'player100'中删除标签'shareholder'。", "content": "DELETE TAG shareholder FROM \"player100\""}
{"prompt": "从'player100'实体中删除标签'shareholder'。", "content": "DELETE TAG shareholder FROM \"player100\""}
{"prompt": "查找股东数据集中所有实体，并返回这些实体的ID。", "content": "LOOKUP ON shareholder YIELD id(vertex)"}
{"prompt": "查找股东实体，并返回这些实体的ID。", "content": "LOOKUP ON shareholder YIELD id(vertex)"}
{"prompt": "如果边不存在，则创建一个名为'follow'的边，该边具有一个整型属性'degree'。", "content": "CREATE EDGE IF NOT EXISTS follow(degree int)"}
{"prompt": "如果边不存在，则创建一条名为follow的边，其属性为degree，表示关注的程度。", "content": "CREATE EDGE IF NOT EXISTS follow(degree int)"}
{"prompt": "如果不存在，则创建无属性的边no_property。", "content": "CREATE EDGE IF NOT EXISTS no_property()"}
{"prompt": "如果边不存在，则创建一个没有属性的边no_property。", "content": "CREATE EDGE IF NOT EXISTS no_property()"}
{"prompt": "如果不存在，则创建一条名为follow_with_default的边，该边的默认属性度数degree为20。", "content": "CREATE EDGE IF NOT EXISTS follow_with_default(degree int DEFAULT 20)"}
{"prompt": "如果边不存在，则创建一个默认度数为20的follow_with_default边。", "content": "CREATE EDGE IF NOT EXISTS follow_with_default(degree int DEFAULT 20)"}
{"prompt": "如果边e1不存在，则创建边e1，其中包含属性p1（字符串类型）、p2（整数类型）、p3（时间戳类型），并设置TTL_DURATION为100，TTL_COL为p2。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 string, p2 int, p3 timestamp)\nTTL_DURATION = 100, TTL_COL = \"p2\""}
{"prompt": "如果边e1不存在，则创建边e1，其中包含三个属性p1、p2和p3，p2属性的过期时间为100，过期时间字段为p2。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 string, p2 int, p3 timestamp)\nTTL_DURATION = 100, TTL_COL = \"p2\""}
{"prompt": "如果边e1不存在，则创建边e1，其中包含参数p1和p2。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 string, p2 int)"}
{"prompt": "如果边e1不存在，则创建边e1，其中包含参数p1（字符串类型）和p2（整数类型）。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 string, p2 int)"}
{"prompt": "删除边e1。", "content": "DROP EDGE e1"}
{"prompt": "删除边e1。", "content": "DROP EDGE e1"}
{"prompt": "如果边e1不存在，则创建边e1，该边具有两个属性p1和p2。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 string, p2 int)"}
{"prompt": "如果边e1不存在，则创建边e1，边e1具有string的属性p1和int的属性p2。", "content": "CREATE EDGE IF NOT EXISTS e1(p1 string, p2 int)"}
{"prompt": "给边e1添加属性p3（整型）和p4（字符串）。", "content": "ALTER EDGE e1 ADD (p3 int, p4 string)"}
{"prompt": "给边e1添加属性p3（整数类型）和p4（字符串类型）。", "content": "ALTER EDGE e1 ADD (p3 int, p4 string)"}
{"prompt": "将边e1的过期时间设置为2秒，并且使用属性p2作为过期时间列。", "content": "ALTER EDGE e1 TTL_DURATION = 2, TTL_COL = \"p2\""}
{"prompt": "将边e1的TTL持续时间设置为2，并且使用属性p2作为TTL列。", "content": "ALTER EDGE e1 TTL_DURATION = 2, TTL_COL = \"p2\""}
{"prompt": "将e1边的注释修改为'edge1'。", "content": "ALTER EDGE e1 COMMENT ='edge1'"}
{"prompt": "将边e1的注释修改为'edge1'。", "content": "ALTER EDGE e1 COMMENT ='edge1'"}
{"prompt": "展示所有边的信息。", "content": "SHOW EDGES"}
{"prompt": "展示所有边的信息。", "content": "SHOW EDGES"}
{"prompt": "描述边类型为follow的属性和结构。", "content": "DESCRIBE EDGE follow"}
{"prompt": "描述边类型为follow的属性和结构。", "content": "DESCRIBE EDGE follow"}
{"prompt": "如果标签t1不存在，则创建标签t1。", "content": "CREATE TAG IF NOT EXISTS t1()"}
{"prompt": "如果t1标签不存在，则创建t1标签。", "content": "CREATE TAG IF NOT EXISTS t1()"}
{"prompt": "如果t2标签不存在，则创建一个包含名称和年龄属性的t2标签。", "content": "CREATE TAG IF NOT EXISTS t2 (name string, age int)"}
{"prompt": "如果标签t2不存在，则创建一个名为t2的标签，该标签包含姓名和年龄两个属性。", "content": "CREATE TAG IF NOT EXISTS t2 (name string, age int)"}
{"prompt": "将一个名为'n1'，年龄为 12 的实体插入到 t2 类型的顶点集合中。", "content": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n1\", 12)"}
{"prompt": "插入一个名为'n1'，年龄为12的实体到t2中。", "content": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n1\", 12)"}
{"prompt": "将名称为'n1'，年龄为'a13'的实体插入到类型为't2'的顶点中，并指定ID为'12'。", "content": "INSERT VERTEX t2 (name, age) VALUES \"12\":(\"n1\", \"a13\")"}
{"prompt": "将一个名为'n1'年龄为'a13'的实体插入到类型为't2'的顶点集合中，其 ID 为'12'。", "content": "INSERT VERTEX t2 (name, age) VALUES \"12\":(\"n1\", \"a13\")"}
{"prompt": "插入两个顶点，其中一个顶点的属性为\"name\"为\"n3\"，\"age\"为12，另一个顶点的属性为\"name\"为\"n4\"，\"age\"为8。", "content": "INSERT VERTEX t2 (name, age) VALUES \"13\":(\"n3\", 12), \"14\":(\"n4\", 8)"}
{"prompt": "插入两个顶点，一个顶点ID为\"13\"，属性为(\"n3\", 12)，另一个顶点ID为\"14\"，属性为(\"n4\", 8)。", "content": "INSERT VERTEX t2 (name, age) VALUES \"13\":(\"n3\", 12), \"14\":(\"n4\", 8)"}
{"prompt": "如果标签t3不存在，则创建一个名为t3的标签，该标签包含一个整数属性p1。", "content": "CREATE TAG IF NOT EXISTS t3(p1 int)"}
{"prompt": "如果标签t3不存在，则创建一个名为t3的标签，该标签具有一个整数类型的属性p1。", "content": "CREATE TAG IF NOT EXISTS t3(p1 int)"}
{"prompt": "如果标签t4不存在，则创建一个名为t4的标签，其中包含一个名为p2的字符串属性。", "content": "CREATE TAG IF NOT EXISTS t4(p2 string)"}
{"prompt": "如果标签t4不存在，则创建一个名为t4的标签，该标签包含一个名为p2的字符串属性。", "content": "CREATE TAG IF NOT EXISTS t4(p2 string)"}
{"prompt": "将实体t3的属性p1设置为值321，将实体t4的属性p2设置为值'hello'。", "content": "INSERT VERTEX t3 (p1), t4(p2) VALUES \"21\": (321, \"hello\")"}
{"prompt": "插入t3和t4两个顶点，分别设置属性p1和p2，值为\"21\"和(321, \"hello\")。", "content": "INSERT VERTEX t3 (p1), t4(p2) VALUES \"21\": (321, \"hello\")"}
{"prompt": "插入一个名为'n2'年龄为 13 的t2类型实体。", "content": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n2\", 13)"}
{"prompt": "插入一个名为'n2'，年龄为13的实体到t2中。", "content": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n2\", 13)"}
{"prompt": "向t2中插入一个名为'n3'，年龄为14的顶点。", "content": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n3\", 14)"}
{"prompt": "插入一个名为'n3'，年龄为 14 的实体到 t2 类型中。", "content": "INSERT VERTEX t2 (name, age) VALUES \"11\":(\"n3\", 14)"}
{"prompt": "获取ID为'11'的t2实体的属性。", "content": "FETCH PROP ON t2 \"11\" YIELD properties(vertex)"}
{"prompt": "获取ID为'11'的t2实体的属性。", "content": "FETCH PROP ON t2 \"11\" YIELD properties(vertex)"}
{"prompt": "如果标签t5不存在，则创建一个标签t5，该标签包含三个属性：p1为长度为5的非空固定字符串类型，p2为整数类型，p3为可选的整数类型。", "content": "CREATE TAG IF NOT EXISTS t5(p1 fixed_string(5) NOT NULL, p2 int, p3 int DEFAULT NULL)"}
{"prompt": "如果标签t5不存在，则创建一个标签t5，该标签包含三个属性：p1为固定长度为5的非空字符串类型，p2为整数类型，p3为可选的整数类型（默认为空）。", "content": "CREATE TAG IF NOT EXISTS t5(p1 fixed_string(5) NOT NULL, p2 int, p3 int DEFAULT NULL)"}
{"prompt": "插入一个名为t5的顶点，其属性p1为'Abe'，p2为2，p3为3，顶点ID为'001'。", "content": "INSERT VERTEX t5(p1, p2, p3) VALUES \"001\":(\"Abe\", 2, 3)"}
{"prompt": "插入一个顶点t5，其属性p1为'Abe'，p2为2，p3为3，顶点ID为'001'。", "content": "INSERT VERTEX t5(p1, p2, p3) VALUES \"001\":(\"Abe\", 2, 3)"}
{"prompt": "将属性p1为空，属性p2为4，属性p3为5的节点插入到t5类型的图中，并设置节点ID为'002'。", "content": "INSERT VERTEX t5(p1, p2, p3) VALUES \"002\":(NULL, 4, 5)"}
{"prompt": "插入一个具有属性p1为NULL，p2为4，p3为5的t5类型的顶点，其标识符为'002'。", "content": "INSERT VERTEX t5(p1, p2, p3) VALUES \"002\":(NULL, 4, 5)"}
{"prompt": "在t5中插入一个顶点，属性p1的值为'cd'，属性p2的值为5，顶点ID为'003'。", "content": "INSERT VERTEX t5(p1, p2) VALUES \"003\":(\"cd\", 5)"}
{"prompt": "将具有属性p1为'cd'和属性p2为5的顶点插入到t5中，顶点ID为'003'。", "content": "INSERT VERTEX t5(p1, p2) VALUES \"003\":(\"cd\", 5)"}
{"prompt": "获取标识为'003'的t5顶点的属性。", "content": "FETCH PROP ON t5 \"003\" YIELD properties(vertex)"}
{"prompt": "获取标签为t5且ID为\"003\"的实体的属性。", "content": "FETCH PROP ON t5 \"003\" YIELD properties(vertex)"}
{"prompt": "插入一个具有属性p1为'shalalalala'和属性p2为4的t5类型的顶点，并指定该顶点的ID为'004'。", "content": "INSERT VERTEX t5(p1, p2) VALUES \"004\":(\"shalalalala\", 4)"}
{"prompt": "将值为\"004\"的顶点插入到t5类型中，该顶点的属性p1为\"shalalalala\"，属性p2为4。", "content": "INSERT VERTEX t5(p1, p2) VALUES \"004\":(\"shalalalala\", 4)"}
{"prompt": "获取标识为'004'的t5的属性，并返回这些属性的值。", "content": "FETCH PROP on t5 \"004\" YIELD properties(vertex)"}
{"prompt": "获取标识为'004'的 t5 实体的属性。", "content": "FETCH PROP on t5 \"004\" YIELD properties(vertex)"}
{"prompt": "将一个名为'n2'年龄为 13 的实体插入到类型为 t2 的顶点集合中，并赋予该实体的 ID 为'1'。", "content": "INSERT VERTEX t2 (name, age) VALUES \"1\":(\"n2\", 13)"}
{"prompt": "向t2中插入一个顶点，属性为name为'n2'，age为13。", "content": "INSERT VERTEX t2 (name, age) VALUES \"1\":(\"n2\", 13)"}
{"prompt": "如果实体t2中不存在ID为1的顶点，则插入一个名为'n3'，年龄为14的顶点。", "content": "INSERT VERTEX IF NOT EXISTS t2 (name, age) VALUES \"1\":(\"n3\", 14)"}
{"prompt": "如果实体t2中不存在ID为1的顶点，则插入一个名为'n3'，年龄为14的顶点。", "content": "INSERT VERTEX IF NOT EXISTS t2 (name, age) VALUES \"1\":(\"n3\", 14)"}
{"prompt": "获取ID为'1'的t2实体的属性信息。", "content": "FETCH PROP ON t2 \"1\" YIELD properties(vertex)"}
{"prompt": "获取图中标识为'1'的 t2 节点的属性信息。", "content": "FETCH PROP ON t2 \"1\" YIELD properties(vertex)"}
{"prompt": "删除实体team1。", "content": "DELETE VERTEX \"team1\""}
{"prompt": "删除实体，实体id为'team1'。", "content": "DELETE VERTEX \"team1\""}
{"prompt": "删除顶点'team1'并删除与之相关的边。", "content": "DELETE VERTEX \"team1\" WITH EDGE"}
{"prompt": "删除顶点为'team1'的实体，并删除与之相关的边。", "content": "DELETE VERTEX \"team1\" WITH EDGE"}
{"prompt": "删除'player100'在'2021'年加入的所有球队。", "content": "GO FROM \"player100\" OVER serve WHERE properties(edge).start_year == \"2021\" YIELD dst(edge) AS id | DELETE VERTEX $-.id"}
{"prompt": "删除'player100'在'2021'年开始服务的所有实体。", "content": "GO FROM \"player100\" OVER serve WHERE properties(edge).start_year == \"2021\" YIELD dst(edge) AS id | DELETE VERTEX $-.id"}
{"prompt": "获取实体'player101'的所有属性。", "content": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"}
{"prompt": "获取'player101'的属性，并返回该实体的属性。", "content": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"}
{"prompt": "当名字为'Tony Parker'的球员的时候，将其年龄加2，并返回名字和年龄。", "content": "UPDATE VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"}
{"prompt": "当名字为'Tony Parker'的球员年龄加2岁时，返回该球员的名字和年龄。", "content": "UPDATE VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"}
{"prompt": "获取'player666'、'player667'、'player668'的所有属性。", "content": "FETCH PROP ON * \"player666\", \"player667\", \"player668\" YIELD properties(vertex)"}
{"prompt": "获取'player666'、'player667'、'player668'的所有属性。", "content": "FETCH PROP ON * \"player666\", \"player667\", \"player668\" YIELD properties(vertex)"}
{"prompt": "如果名字为'Joe'的球员存在，则将其年龄设置为30，并返回该球员的姓名和年龄。", "content": "UPSERT VERTEX ON player \"player666\"\nSET age = 30\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"}
{"prompt": "如果名字为'Joe'的球员存在，则将其年龄设置为30，并返回名字为'Joe'和年龄为30的球员的信息。", "content": "UPSERT VERTEX ON player \"player666\"\nSET age = 30\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"}
{"prompt": "如果名字为'Joe'的player节点存在，则将其年龄更新为31，并返回更新后的名字和年龄。", "content": "UPSERT VERTEX ON player \"player666\"\nSET age = 31\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"}
{"prompt": "如果名字是'Joe'的球员存在，则将球员'player666'的年龄设置为31，并返回名字为'Joe'和年龄为31的球员信息。", "content": "UPSERT VERTEX ON player \"player666\"\nSET age = 31\nWHEN name == \"Joe\"\nYIELD name AS Name, age AS Age"}
{"prompt": "将球员'player667'的年龄更新为31，并返回更新后的姓名和年龄。", "content": "UPSERT VERTEX ON player \"player667\"\nSET age = 31\nYIELD name AS Name, age AS Age"}
{"prompt": "将名为'player667'的球员实体更新为年龄为 31，返回更新后的姓名和年龄。", "content": "UPSERT VERTEX ON player \"player667\"\nSET age = 31\nYIELD name AS Name, age AS Age"}
{"prompt": "更新ID为'player668'的球员的姓名为'Amber'，年龄增加1岁，并返回更新后的姓名和年龄。", "content": "UPSERT VERTEX ON player \"player668\"\nSET name = \"Amber\", age = age + 1\nYIELD name AS Name, age AS Age"}
{"prompt": "将player668的姓名修改为Amber，并将年龄增加1岁，返回修改后的姓名和年龄。", "content": "UPSERT VERTEX ON player \"player668\"\nSET name = \"Amber\", age = age + 1\nYIELD name AS Name, age AS Age"}
{"prompt": "如果标签player_with_default不存在，则创建一个名为player_with_default的标签，其中包含名字和年龄属性，年龄属性默认值为20。", "content": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"}
{"prompt": "如果player_with_default标签不存在，则创建一个带有默认年龄为20的player_with_default标签。", "content": "CREATE TAG IF NOT EXISTS player_with_default(name string, age int DEFAULT 20)"}
{"prompt": "将player_with_default类型且id为'player101'的实体的年龄加1，并返回该实体的名称和年龄。", "content": "UPSERT VERTEX ON player_with_default \"player101\"\nSET age = age + 1\nYIELD name AS Name, age AS Age"}
{"prompt": "将id为'player101'的player_with_default顶点的年龄加1，并返回该顶点的名称和年龄。", "content": "UPSERT VERTEX ON player_with_default \"player101\"\nSET age = age + 1\nYIELD name AS Name, age AS Age"}
{"prompt": "获取实体'player101'的属性，并返回这些属性。", "content": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"}
{"prompt": "获取'player101'的属性，并返回该实体的属性信息。", "content": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"}
{"prompt": "如果姓名为'Tony Parker'的球员存在，则将其年龄加2，并返回姓名和年龄。", "content": "UPSERT VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"}
{"prompt": "如果名字为'Tony Parker'的球员存在，则将该球员的年龄加2，并返回该球员的名字和年龄。", "content": "UPSERT VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Tony Parker\"\nYIELD name AS Name, age AS Age"}
{"prompt": "获取'player101'的所有属性，并返回这些属性的值。", "content": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"}
{"prompt": "获取球员'player101'的属性，并返回该球员的属性信息。", "content": "FETCH PROP ON player \"player101\" YIELD properties(vertex)"}
{"prompt": "如果名字为'Someone else'的球员存在，则将其年龄增加2，并返回其名字和年龄。", "content": "UPSERT VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Someone else\"\nYIELD name AS Name, age AS Age"}
{"prompt": "如果名字为'Someone else'的球员存在，则将其年龄加2，并返回其名字和年龄。", "content": "UPSERT VERTEX ON player \"player101\"\nSET age = age + 2\nWHEN name == \"Someone else\"\nYIELD name AS Name, age AS Age"}
{"prompt": "如果边e1不存在，则创建边e1。", "content": "CREATE EDGE IF NOT EXISTS e1()"}
{"prompt": "如果边e1不存在，则创建边e1。", "content": "CREATE EDGE IF NOT EXISTS e1()"}
{"prompt": "创建一条从实体10到实体11的边e1。", "content": "INSERT EDGE e1 () VALUES \"10\"->\"11\":()"}
{"prompt": "插入一条边，连接实体ID为10和11的两个实体。", "content": "INSERT EDGE e1 () VALUES \"10\"->\"11\":()"}
{"prompt": "在边e1上插入一条从ID为10的实体到ID为11的实体的边，边的权重为1。", "content": "INSERT EDGE e1 () VALUES \"10\"->\"11\"@1:()"}
{"prompt": "在图数据库中插入一条边，边的起点是实体ID为10的节点，终点是实体ID为11的节点，边的标签为e1，边的权重为1。", "content": "INSERT EDGE e1 () VALUES \"10\"->\"11\"@1:()"}
{"prompt": "如果边e2不存在，则创建一条边，该边包含名称和年龄属性。", "content": "CREATE EDGE IF NOT EXISTS e2 (name string, age int)"}
{"prompt": "如果边e2不存在，则创建一条边，该边具有name和age属性。", "content": "CREATE EDGE IF NOT EXISTS e2 (name string, age int)"}
{"prompt": "在e2类型中上插入一条从顶点11到顶点13的边，边的属性为name为'n1'，age为1。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 1)"}
{"prompt": "插入一条e2类型的边，该边从节点11到节点13的边，边的属性为name为'n1'，age为1。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 1)"}
{"prompt": "插入两条e2类型边，一条从节点12指向节点13，属性为('n1', 1)，另一条从节点13指向节点14，属性为('n2', 2)。", "content": "INSERT EDGE e2 (name, age) VALUES\n\"12\"->\"13\":(\"n1\", 1), \"13\"->\"14\":(\"n2\", 2)"}
{"prompt": "插入两条e2类型边，一条从节点12指向节点13，属性为('n1', 1)，另一条从节点13指向节点14，属性为('n2', 2)。", "content": "INSERT EDGE e2 (name, age) VALUES\n\"12\"->\"13\":(\"n1\", 1), \"13\"->\"14\":(\"n2\", 2)"}
{"prompt": "插入一条e2类型的边，连接节点11和节点13，边属性为name为'n1'，age为'a13'。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", \"a13\")"}
{"prompt": "在边e2中插入一条从实体11指向实体13的边，边的属性为name为'n1'，age为'a13'。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", \"a13\")"}
{"prompt": "在'11'和'13'之间插入一条边，该边的属性为 name:'n1'，age: 12。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 12)"}
{"prompt": "插入一条边e2，连接节点11和节点13，边的属性为name为'n1'，age为12。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 12)"}
{"prompt": "插入一条边e2，连接节点11和节点13，并设置属性name为'n1'，age为13。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 13)"}
{"prompt": "插入一条边e2，连接节点11和节点13，并设置属性name为'n1'，age为13。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 13)"}
{"prompt": "将名为'11'的实体与名为'13'的实体之间插入一条边，该边具有属性'name'为'n1'和'age'为14。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 14)"}
{"prompt": "插入一条e2类型的从顶点11到顶点13的边，边的属性为name为'n1'，age为14。", "content": "INSERT EDGE e2 (name, age) VALUES \"11\"->\"13\":(\"n1\", 14)"}
{"prompt": "获取一条e2类型的边，边的起点为'11'，终点为'13'，并返回边的信息。", "content": "FETCH PROP ON e2 \"11\"->\"13\" YIELD edge AS e"}
{"prompt": "获取一条e2类型的边信息，边的起点为实体11，终点为实体13。", "content": "FETCH PROP ON e2 \"11\"->\"13\" YIELD edge AS e"}
{"prompt": "在边e2中插入一条从节点14到节点15的边，边的属性为name为'n1'，age为12，权重为1。", "content": "INSERT EDGE e2 (name, age) VALUES \"14\"->\"15\"@1:(\"n1\", 12)"}
{"prompt": "在边e2上插入一条关系，关系的属性为name为'n1'，age为12，权重为@1，起点为14，终点为15。", "content": "INSERT EDGE e2 (name, age) VALUES \"14\"->\"15\"@1:(\"n1\", 12)"}
{"prompt": "如果不存在，则插入一条从节点14到节点15的e2边，边的属性为name为'n2'，age为13，权重为1。", "content": "INSERT EDGE IF NOT EXISTS e2 (name, age) VALUES \"14\"->\"15\"@1:(\"n2\", 13)"}
{"prompt": "如果不存在，则插入一条从实体14到实体15的e2边，边的权重为1，属性为name为'n2'，age为13。", "content": "INSERT EDGE IF NOT EXISTS e2 (name, age) VALUES \"14\"->\"15\"@1:(\"n2\", 13)"}
{"prompt": "获取所有e2类型边中，'14'->'15'且权重为1的边，并返回该边。", "content": "FETCH PROP ON e2 \"14\"->\"15\"@1 YIELD edge AS e"}
{"prompt": "获取边属性，边的起点为ID为14的实体，终点为ID为15的实体，边的版本号为1，返回边的属性。", "content": "FETCH PROP ON e2 \"14\"->\"15\"@1 YIELD edge AS e"}
{"prompt": "删除从'player100'到'team204'的'serve'边，权重为0。", "content": "DELETE EDGE serve \"player100\" -> \"team204\"@0"}
{"prompt": "删除从'player100'到'team204'且权重为0的'serve'边。", "content": "DELETE EDGE serve \"player100\" -> \"team204\"@0"}
{"prompt": "删除从'player100'到'player101'的 follow 关系边，并返回删除边的源节点、目标节点和边的权重。", "content": "GO FROM \"player100\" OVER follow\nWHERE dst(edge) == \"player101\"\nYIELD src(edge) AS src, dst(edge) AS dst, rank(edge) AS rank\n| DELETE EDGE follow $-.src -> $-.dst @ $-.rank"}
{"prompt": "删除从'player100'到'player101'的关注关系。", "content": "GO FROM \"player100\" OVER follow\nWHERE dst(edge) == \"player101\"\nYIELD src(edge) AS src, dst(edge) AS dst, rank(edge) AS rank\n| DELETE EDGE follow $-.src -> $-.dst @ $-.rank"}
{"prompt": "找出'player100'所'服务'的所有实体，并返回这些实体的起始年份和结束年份。", "content": "GO FROM \"player100\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"}
{"prompt": "找出'player100'所'服务'的所有实体，并返回这些实体的起始年份和结束年份。", "content": "GO FROM \"player100\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"}
{"prompt": "将'player100'与'team204'之间的边上的'start_year'属性增加1，当'end_year'大于2010时，返回更新后的'start_year'和'end_year'。", "content": "UPDATE EDGE ON serve \"player100\" -> \"team204\"@0\nSET start_year = start_year + 1\nWHEN end_year > 2010\nYIELD start_year, end_year"}
{"prompt": "将'player100'和'team204'之间的'serve'边的起始年份加1，当结束年份大于2010时，返回起始年份和结束年份。", "content": "UPDATE EDGE ON serve \"player100\" -> \"team204\"@0\nSET start_year = start_year + 1\nWHEN end_year > 2010\nYIELD start_year, end_year"}
{"prompt": "找出'player666','player667','player668'所有的服务记录，并返回这些记录的起始年份和结束年份。", "content": "GO FROM \"player666\", \"player667\", \"player668\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"}
{"prompt": "找出'player666','player667','player668'所'serve'的所有关系，并返回这些关系的起始年份和结束年份。", "content": "GO FROM \"player666\", \"player667\", \"player668\"\nOVER serve\nYIELD properties(edge).start_year, properties(edge).end_year"}
{"prompt": "更新'serve'边上权重为0，且为'player666'到'team200'的关系，当'end_year'的值等于2010时，将'end_year'的值设为2021，返回'start_year'和'end_year'。", "content": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2021\nWHEN end_year == 2010\nYIELD start_year, end_year"}
{"prompt": "当'end_year'的值等于2010时，更新'serve'边上权重为0，且为'player666'到'team200'的关系，将'end_year'的值设为2021，返回'start_year'和'end_year'。", "content": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2021\nWHEN end_year == 2010\nYIELD start_year, end_year"}
{"prompt": "如果边的结束年份为2010，则将边的结束年份更新为2022，并返回起始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2022\nWHEN end_year == 2010\nYIELD start_year, end_year"}
{"prompt": "将'player666'与'team200'之间的边'serve'更新为结束年份为2022，当结束年份为2010时，返回开始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player666\" -> \"team200\"@0\nSET end_year = 2022\nWHEN end_year == 2010\nYIELD start_year, end_year"}
{"prompt": "将'player667'与'team200'之间的边关系'serve'更新为结束年份为2022，并返回起始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player667\" -> \"team200\"@0\nSET end_year = 2022\nYIELD start_year, end_year"}
{"prompt": "更新'player667'和'team200'之间的关系为'serve'，设置结束年份为2022，并返回开始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player667\" -> \"team200\"@0\nSET end_year = 2022\nYIELD start_year, end_year"}
{"prompt": "将'player668'与'team200'之间的边'serve'更新或插入，设置起始年份为2000，结束年份增加1，并返回起始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player668\" -> \"team200\"@0\nSET start_year = 2000, end_year = end_year + 1\nYIELD start_year, end_year"}
{"prompt": "将'player668'与'team200'之间的边'serve'进行更新，设置起始年份为2000，结束年份为原来的年份加1，并返回起始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player668\" -> \"team200\"@0\nSET start_year = 2000, end_year = end_year + 1\nYIELD start_year, end_year"}
{"prompt": "创建一条边，如果不存在则创建，边的属性包括起始年份和结束年份，默认结束年份为2010。", "content": "CREATE EDGE IF NOT EXISTS serve_with_default(start_year int, end_year int DEFAULT 2010)"}
{"prompt": "如果边不存在，则创建一条带有默认开始年份为2010的serve_with_default边。", "content": "CREATE EDGE IF NOT EXISTS serve_with_default(start_year int, end_year int DEFAULT 2010)"}
{"prompt": "将'player668'和'team200'之间的'serve_with_default'边的'end_year'属性增加1，并返回'start_year'和'end_year'的值。", "content": "UPSERT EDGE on serve_with_default\n\"player668\" -> \"team200\"\nSET end_year = end_year + 1\nYIELD start_year, end_year"}
{"prompt": "将'player668'和'team200'之间的'serve_with_default'边的'end_year'属性增加1，并返回'start_year'和'end_year'的值。", "content": "UPSERT EDGE on serve_with_default\n\"player668\" -> \"team200\"\nSET end_year = end_year + 1\nYIELD start_year, end_year"}
{"prompt": "找出名为'Ben Simmons'的球员所'服务'的所有关系，并返回这些关系。", "content": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"}
{"prompt": "找出名为'Ben Simmons'的球员所服务的所有关系，并返回这些关系。", "content": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"}
{"prompt": "如果'player149'在2016年开始为'team219'服务，则将其结束年份增加1并更新，并返回开始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year == 2016\nYIELD start_year, end_year"}
{"prompt": "如果边的起始年份为2016，且该边表示'player149'在2016年开始为'team219'服务，则更新边的结束年份加1，并返回起始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year == 2016\nYIELD start_year, end_year"}
{"prompt": "找出名为'Ben Simmons'的球员所'服务'的所有关系，并返回这些关系。", "content": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"}
{"prompt": "找出名为'Ben Simmons'的球员与其他球员之间的所有'serve'关系，并返回这些关系。", "content": "MATCH (v:player{name:\"Ben Simmons\"})-[e:serve]-(v2)\nRETURN e"}
{"prompt": "如果'player149'为'team219'的服务关系的开始年份不等于2016，则将结束年份加1，并返回开始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year != 2016\nYIELD start_year, end_year"}
{"prompt": "如果'player149'与'team219'之间的边存在且起始年份不等于2016，则将结束年份加1，并返回起始年份和结束年份。", "content": "UPSERT EDGE on serve\n\"player149\" -> \"team219\"\nSET end_year = end_year + 1\nWHEN start_year != 2016\nYIELD start_year, end_year"}
{"prompt": "在球员标签上创建一个索引player_index。", "content": "CREATE TAG INDEX player_index on player()"}
{"prompt": "在球员标签上创建一个player_index索引。", "content": "CREATE TAG INDEX player_index on player()"}
{"prompt": "创建一个名为follow_index的边索引，用于加速follow边的查询。", "content": "CREATE EDGE INDEX follow_index on follow()"}
{"prompt": "创建一个名为follow_index的边索引，用于follow边。", "content": "CREATE EDGE INDEX follow_index on follow()"}
{"prompt": "如果不存在名为player_index_0的标签索引，就创建一个以player标签的name属性为基准的索引。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_0 on player(name(10))"}
{"prompt": "如果不存在名为player_index_0的标签索引，则创建一个索引，该索引基于player标签的name属性，最大长度为10。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_0 on player(name(10))"}
{"prompt": "如果var_string标签不存在，则创建一个包含字符串属性p1的标签。", "content": "CREATE TAG IF NOT EXISTS var_string(p1 string)"}
{"prompt": "如果var_string标签不存在，则创建一个名为var_string且包含字符串属性p1的标签。", "content": "CREATE TAG IF NOT EXISTS var_string(p1 string)"}
{"prompt": "如果var_string的p1属性长度不超过10，则创建一个名为var的标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS var ON var_string(p1(10))"}
{"prompt": "如果var_string的p1属性的前10个字符没有创建索引，则创建一个var标签的索引。", "content": "CREATE TAG INDEX IF NOT EXISTS var ON var_string(p1(10))"}
{"prompt": "如果fix_string标签不存在，则创建一个长度为10的固定字符串属性。", "content": "CREATE TAG IF NOT EXISTS fix_string(p1 FIXED_STRING(10))"}
{"prompt": "如果fix_string标签不存在，则创建一个固定长度为10的字符串类型属性。", "content": "CREATE TAG IF NOT EXISTS fix_string(p1 FIXED_STRING(10))"}
{"prompt": "如果fix_string的属性p1上不存在索引，则创建一个名为fix的标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS fix ON fix_string(p1)"}
{"prompt": "如果fix_string的p1上不存在索引，则创建一个名为fix的标签索引。", "content": "CREATE TAG INDEX IF NOT EXISTS fix ON fix_string(p1)"}
{"prompt": "如果follow边的索引follow_index_0不存在，则创建一个基于度的边索引。", "content": "CREATE EDGE INDEX IF NOT EXISTS follow_index_0 on follow(degree)"}
{"prompt": "如果follow(degree)边索引不存在，则创建名为follow_index_0的边索引。", "content": "CREATE EDGE INDEX IF NOT EXISTS follow_index_0 on follow(degree)"}
{"prompt": "如果不存在名为player_index_1的标签索引，就创建一个索引，该索引基于player标签的name属性和age属性。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 on player(name(10), age)"}
{"prompt": "如果不存在名为player_index_1的标签索引，则创建一个标签索引，索引的字段为player的name和age属性。", "content": "CREATE TAG INDEX IF NOT EXISTS player_index_1 on player(name(10), age)"}
{"prompt": "展示所有标签的索引。", "content": "SHOW TAG INDEXES"}
{"prompt": "显示所有标签的索引。", "content": "SHOW TAG INDEXES"}
{"prompt": "显示所有边的索引。", "content": "SHOW EDGE INDEXES"}
{"prompt": "显示边的索引信息。", "content": "SHOW EDGE INDEXES"}
{"prompt": "展示标签的索引信息。", "content": "SHOW TAG INDEXES"}
{"prompt": "展示所有的标签索引。", "content": "SHOW TAG INDEXES"}
{"prompt": "展示创建的名为player_index_1的标签索引。", "content": "SHOW CREATE TAG INDEX player_index_1"}
{"prompt": "展示创建的名为player_index_1的标签索引。", "content": "SHOW CREATE TAG INDEX player_index_1"}
{"prompt": "展示所有边的索引。", "content": "SHOW EDGE INDEXES"}
{"prompt": "展示所有边的索引。", "content": "SHOW EDGE INDEXES"}
{"prompt": "展示创建的名为follow_index的边索引。", "content": "SHOW CREATE EDGE INDEX follow_index"}
{"prompt": "显示创建的名为follow_index的边索引。", "content": "SHOW CREATE EDGE INDEX follow_index"}
{"prompt": "描述名为player_index_0的标签索引。", "content": "DESCRIBE TAG INDEX player_index_0"}
{"prompt": "描述标签索引 player_index_0。", "content": "DESCRIBE TAG INDEX player_index_0"}
{"prompt": "描述名为player_index_1的标签索引。", "content": "DESCRIBE TAG INDEX player_index_1"}
{"prompt": "描述名为player_index_1的标签索引。", "content": "DESCRIBE TAG INDEX player_index_1"}
{"prompt": "如果person标签不存在，则创建person标签，包含姓名、年龄、性别和电子邮件属性。", "content": "CREATE TAG IF NOT EXISTS person(name string, age int, gender string, email string)"}
{"prompt": "如果person标签不存在，则创建person标签，包含姓名、年龄、性别和邮箱属性。", "content": "CREATE TAG IF NOT EXISTS person(name string, age int, gender string, email string)"}
{"prompt": "如果person标签上的name属性长度不超过10个字符，则创建单个人索引。", "content": "CREATE TAG INDEX IF NOT EXISTS single_person_index ON person(name(10))"}
{"prompt": "如果person标签上的name属性长度不超过10个字符，则创建一个单属性索引single_person_index。", "content": "CREATE TAG INDEX IF NOT EXISTS single_person_index ON person(name(10))"}
{"prompt": "重建单个人索引single_person_index。", "content": "REBUILD TAG INDEX single_person_index"}
{"prompt": "重建single_person_index索引。", "content": "REBUILD TAG INDEX single_person_index"}
{"prompt": "展示标签索引的状态。", "content": "SHOW TAG INDEX STATUS"}
{"prompt": "请显示标签索引的状态。", "content": "SHOW TAG INDEX STATUS"}
{"prompt": "展示作业编号为31的作业。", "content": "SHOW JOB 31"}
{"prompt": "显示作业编号为31的任务。", "content": "SHOW JOB 31"}
{"prompt": "展示标签索引的状态。", "content": "SHOW TAG INDEX STATUS"}
{"prompt": "显示标签索引的状态。", "content": "SHOW TAG INDEX STATUS"}
{"prompt": "删除名为player_index_0的标签索引。", "content": "DROP TAG INDEX player_index_0"}
{"prompt": "删除名为player_index_0的标签索引。", "content": "DROP TAG INDEX player_index_0"}
{"prompt": "使用文本服务（127.0.0.1:9200, HTTP）进行登录。", "content": "SIGN IN TEXT SERVICE (127.0.0.1:9200, HTTP)"}
{"prompt": "利用（127.0.0.1:9200, HTTP）进行登录。", "content": "SIGN IN TEXT SERVICE (127.0.0.1:9200, HTTP)"}
{"prompt": "展示文本搜索客户端。", "content": "SHOW TEXT SEARCH CLIENTS"}
{"prompt": "显示文本搜索的客户端。", "content": "SHOW TEXT SEARCH CLIENTS"}
{"prompt": "退出文本服务。", "content": "SIGN OUT TEXT SERVICE"}
{"prompt": "登出文本服务。", "content": "SIGN OUT TEXT SERVICE"}
{"prompt": "将监听器添加到Elasticsearch，地址为192.168.8.5:9789和192.168.8.6:9789。", "content": "ADD LISTENER ELASTICSEARCH 192.168.8.5:9789,192.168.8.6:9789"}
{"prompt": "添加监听器，将数据发送到Elasticsearch的两个地址：192.168.8.5:9789和192.168.8.6:9789。", "content": "ADD LISTENER ELASTICSEARCH 192.168.8.5:9789,192.168.8.6:9789"}
{"prompt": "显示监听器列表。", "content": "SHOW LISTENER"}
{"prompt": "显示监听器信息。", "content": "SHOW LISTENER"}
{"prompt": "移除 Elasticsearch 的监听器。", "content": "REMOVE LISTENER ELASTICSEARCH"}
{"prompt": "移除 Elasticsearch 的监听器。", "content": "REMOVE LISTENER ELASTICSEARCH"}
{"prompt": "如果basketballplayer空间不存在，则创建一个具有3个分区和1个副本因子的空间，实体ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS basketballplayer (partition_num=3,replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "如果basketballplayer空间不存在，则创建一个名为basketballplayer的空间，该空间有3个分区，复制因子为1，实体ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS basketballplayer (partition_num=3,replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "使用文本服务（127.0.0.1:9200, HTTP）进行登录。", "content": "SIGN IN TEXT SERVICE (127.0.0.1:9200, HTTP)"}
{"prompt": "使用文本服务登录到地址为127.0.0.1:9200的HTTP服务。", "content": "SIGN IN TEXT SERVICE (127.0.0.1:9200, HTTP)"}
{"prompt": "展示文本搜索客户端。", "content": "SHOW TEXT SEARCH CLIENTS"}
{"prompt": "显示文本搜索的客户端。", "content": "SHOW TEXT SEARCH CLIENTS"}
{"prompt": "将监听器添加到Elasticsearch，地址为192.168.8.5:9789。", "content": "ADD LISTENER ELASTICSEARCH 192.168.8.5:9789"}
{"prompt": "添加一个监听器，将数据发送到Elasticsearch的192.168.8.5:9789地址。", "content": "ADD LISTENER ELASTICSEARCH 192.168.8.5:9789"}
{"prompt": "显示监听器信息。", "content": "SHOW LISTENER"}
{"prompt": "显示监听器。", "content": "SHOW LISTENER"}
{"prompt": "如果标签player不存在，则创建一个名为player的标签，包含name和age两个属性。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "如果player标签不存在，则创建一个名为player的标签，包含name和age两个属性。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "在player标签上创建一个名为nebula_index_1的全文索引。", "content": "CREATE FULLTEXT TAG INDEX nebula_index_1 ON player(name)"}
{"prompt": "创建一个名为nebula_index_1的全文标签索引，用于对player的name属性进行索引。", "content": "CREATE FULLTEXT TAG INDEX nebula_index_1 ON player(name)"}
{"prompt": "重建全文索引。", "content": "REBUILD FULLTEXT INDEX"}
{"prompt": "重建全文索引。", "content": "REBUILD FULLTEXT INDEX"}
{"prompt": "显示所有全文索引。", "content": "SHOW FULLTEXT INDEXES"}
{"prompt": "显示所有全文索引。", "content": "SHOW FULLTEXT INDEXES"}
{"prompt": "插入球员信息，包括姓名和年龄。", "content": "INSERT VERTEX player(name, age) VALUES\n\"Russell Westbrook\": (\"Russell Westbrook\", 30),\n\"Chris Paul\": (\"Chris Paul\", 33),\n\"Boris Diaw\": (\"Boris Diaw\", 36),\n\"David West\": (\"David West\", 38),\n\"Danny Green\": (\"Danny Green\", 31),\n\"Tim Duncan\": (\"Tim Duncan\", 42),\n\"James Harden\": (\"James Harden\", 29),\n\"Tony Parker\": (\"Tony Parker\", 36),\n\"Aron Baynes\": (\"Aron Baynes\", 32),\n\"Ben Simmons\": (\"Ben Simmons\", 22),\n\"Blake Griffin\": (\"Blake Griffin\", 30)"}
{"prompt": "插入球员数据，包括姓名和年龄。", "content": "INSERT VERTEX player(name, age) VALUES\n\"Russell Westbrook\": (\"Russell Westbrook\", 30),\n\"Chris Paul\": (\"Chris Paul\", 33),\n\"Boris Diaw\": (\"Boris Diaw\", 36),\n\"David West\": (\"David West\", 38),\n\"Danny Green\": (\"Danny Green\", 31),\n\"Tim Duncan\": (\"Tim Duncan\", 42),\n\"James Harden\": (\"James Harden\", 29),\n\"Tony Parker\": (\"Tony Parker\", 36),\n\"Aron Baynes\": (\"Aron Baynes\", 32),\n\"Ben Simmons\": (\"Ben Simmons\", 22),\n\"Blake Griffin\": (\"Blake Griffin\", 30)"}
{"prompt": "查找以字母'B'开头的所有选手的ID。", "content": "LOOKUP ON player WHERE PREFIX(player.name, \"B\") YIELD id(vertex)"}
{"prompt": "查找以字母'B'开头的所有球员实体，并返回这些实体的ID。", "content": "LOOKUP ON player WHERE PREFIX(player.name, \"B\") YIELD id(vertex)"}
{"prompt": "查找名字中包含'ri'的所有球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player WHERE WILDCARD(player.name, \"*ri*\") YIELD player.name, player.age"}
{"prompt": "查找所有名字中包含'ri'的球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player WHERE WILDCARD(player.name, \"*ri*\") YIELD player.name, player.age"}
{"prompt": "查找名字中包含'ri'的所有选手，并返回选手的姓名和年龄，然后计算结果的数量。", "content": "LOOKUP ON player WHERE WILDCARD(player.name, \"*ri*\") YIELD player.name, player.age | YIELD count(*)"}
{"prompt": "查找所有名字中包含'ri'的球员，并返回符合条件的球员数量。", "content": "LOOKUP ON player WHERE WILDCARD(player.name, \"*ri*\") YIELD player.name, player.age | YIELD count(*)"}
{"prompt": "查找姓名以R开头的所有球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player WHERE REGEXP(player.name, \"R.*\") YIELD player.name, player.age"}
{"prompt": "查找所有名字以'R'开头的球员，并返回他们的姓名和年龄。", "content": "LOOKUP ON player WHERE REGEXP(player.name, \"R.*\") YIELD player.name, player.age"}
{"prompt": "查找所有姓名以'.'开头的player实体，并返回它们的ID。", "content": "LOOKUP ON player WHERE REGEXP(player.name, \".*\") YIELD id(vertex)"}
{"prompt": "在player中查找所有名字匹配正则表达式.*的实体，并返回这些实体的ID。", "content": "LOOKUP ON player WHERE REGEXP(player.name, \".*\") YIELD id(vertex)"}
{"prompt": "查找球员实体中模糊匹配姓名为'Tim Duncan'的所有球员，并返回这些球员的姓名。", "content": "LOOKUP ON player WHERE FUZZY(player.name, \"Tim Dunncan\", AUTO, OR) YIELD player.name"}
{"prompt": "在player中查找名称模糊匹配'Tim Dunncan'的实体，并返回这些实体的名称。", "content": "LOOKUP ON player WHERE FUZZY(player.name, \"Tim Dunncan\", AUTO, OR) YIELD player.name"}
{"prompt": "删除全文索引 nebula_index_1。", "content": "DROP FULLTEXT INDEX nebula_index_1"}
{"prompt": "删除全文索引 nebula_index_1。", "content": "DROP FULLTEXT INDEX nebula_index_1"}
{"prompt": "如果subgraph空间不存在，则创建此空间，其具有15个分区，副本因子为1，并且实体ID类型为固定长度为30的字符串。", "content": "CREATE SPACE IF NOT EXISTS subgraph(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "如果subgraph空间不存在，则创建一个包含15个分区、1个副本因子和30个固定字符串类型的ID的空间。", "content": "CREATE SPACE IF NOT EXISTS subgraph(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "使用subgraph空间。", "content": "USE subgraph"}
{"prompt": "使用subgraph空间。", "content": "USE subgraph"}
{"prompt": "如果player标签不存在，则创建一个包含姓名和年龄属性的player标签。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "如果player标签不存在，则创建player标签，包含名称和年龄属性。", "content": "CREATE TAG IF NOT EXISTS player(name string, age int)"}
{"prompt": "如果标签team不存在，则创建一个名为'team'的标签，该标签带有'name'属性。", "content": "CREATE TAG IF NOT EXISTS team(name string)"}
{"prompt": "如果团队标签不存在，则创建一个带有'name'属性的‘team’标签。", "content": "CREATE TAG IF NOT EXISTS team(name string)"}
{"prompt": "如果边不存在，则创建一个名为follow的边，该边具有一个整数类型的属性degree。", "content": "CREATE EDGE IF NOT EXISTS follow(degree int)"}
{"prompt": "如果关系边follow不存在，则创建一个名为follow的边，边上包含一个整型属性degree。", "content": "CREATE EDGE IF NOT EXISTS follow(degree int)"}
{"prompt": "如果边不存在，则创建一条serve边，包含起始年份和结束年份。", "content": "CREATE EDGE IF NOT EXISTS serve(start_year int, end_year int)"}
{"prompt": "如果边不存在，则创建一条serve边，该边具有start_year和end_year属性。", "content": "CREATE EDGE IF NOT EXISTS serve(start_year int, end_year int)"}
{"prompt": "插入一个id为'player100'，名字是'Tim Duncan'且年龄为 42 的球员实体。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个名为'Tim Duncan'，年龄为 42 的球员实体，并赋予其唯一标识'player100'。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个id为'player101'，名为'Tony Parker'，年龄为 36 的球员实体。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入一个名为'Tony Parker'，年龄为 36 且id为'player101'的球员实体。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "将名为LaMarcus Aldridge，年龄为33的球员插入到player集合中，其ID为player102。", "content": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入一个名为LaMarcus Aldridge，年龄为33的球员实体，并将其ID设为player102。", "content": "INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入两个顶点，一个顶点表示球队，名称为'Trail Blazers'，另一个顶点表示球队，名称为'Spurs'。", "content": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"}
{"prompt": "插入两个顶点，一个是名称为'Trail Blazers'的团队，另一个是名称为'Spurs'的团队。", "content": "INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\")"}
{"prompt": "将实体'player101'关注实体'player100'，并设置关注度为 95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "在'player101'和'player100'之间建立一条'follow'边，边的属性为95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "将'player101'关注'player102'的关系插入，关注度为90。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"}
{"prompt": "将实体'player101'关注实体'player102'，关注度为90。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90)"}
{"prompt": "将实体'player102'关注实体'player100'，并设置关注度为75。", "content": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"}
{"prompt": "将'player102'关注'player100'，并设置关注度为75。", "content": "INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75)"}
{"prompt": "插入两条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，以及'player102'在 2006 年至 2015 年期间为'team203'服务。", "content": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"}
{"prompt": "插入一条边，表示'player101'在 1999 年至 2018 年期间为'team204'服务，并插入另一条边，表示'player102'在 2006 年至 2015 年期间为'team203'服务。", "content": "INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015)"}
{"prompt": "从'player101'开始，获取1步内的所有节点和边。", "content": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "从'player101'开始，获取1步内的所有实体和关系。", "content": "GET SUBGRAPH 1 STEPS FROM \"player101\" YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "获取从'player101'开始，通过'follow'关系的一步可达的所有实体和边。", "content": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "从'player101'开始，沿着'follow'关系向外扩展1步，返回扩展出的所有节点和边。", "content": "GET SUBGRAPH 1 STEPS FROM \"player101\" IN follow YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "从实体'player101'出发，通过'serve'关系向外扩展1步，返回扩展得到的实体和关系。", "content": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "从实体'player101'开始，通过边'serve'往外延伸一步，返回所有顶点和边。", "content": "GET SUBGRAPH WITH PROP 1 STEPS FROM \"player101\" OUT serve YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "找出从'player101'开始，经过两步关系，关注度大于90且年龄大于30的所有实体和关系。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "从'player101'开始，找出与之相关的属性为2步的子图，其中关注度大于90且球员年龄大于30的节点和边。", "content": "GET SUBGRAPH WITH PROP 2 STEPS FROM \"player101\"\nWHERE follow.degree > 90 AND $$.player.age > 30\nYIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "找出ID为'A'的球员节点和与其相连的所有节点，并返回这些节点之间的关系。", "content": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"}
{"prompt": "找出与ID为'A'球员相关联的所有实体，并返回到这些实体的路径。", "content": "MATCH p= (v:player) -- (v2) WHERE id(v)==\"A\" RETURN p"}
{"prompt": "找出距离实体'A'一步的所有实体，并返回这些实体的源节点和目标节点。", "content": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"}
{"prompt": "找出距离实体'A'一步的所有关注关系，并返回这些关系的起点和终点。", "content": "GO 1 STEPS FROM \"A\" OVER follow YIELD src(edge),dst(edge)"}
{"prompt": "从实体'player101'出发，沿着'follow'关系，获取100步内的子图，返回节点和边。", "content": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "从实体'player101'出发，沿着'follow'边最多100步，获取所有经过的实体和边（子图）。", "content": "GET SUBGRAPH 100 STEPS FROM \"player101\" OUT follow YIELD VERTICES AS nodes, EDGES AS relationships"}
{"prompt": "找出从'player102'到'team204'的最短路径，并返回路径信息。", "content": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"}
{"prompt": "找出从'player102'到'team204'的最短路径，并返回该路径。", "content": "FIND SHORTEST PATH FROM \"player102\" TO \"team204\" OVER * YIELD path AS p"}
{"prompt": "找出从'team204'到'player100'的最短路径，并返回路径信息。", "content": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"}
{"prompt": "请找出从'team204'到'player100'的最短路径，并返回该路径信息。", "content": "FIND SHORTEST PATH WITH PROP FROM \"team204\" TO \"player100\" OVER * REVERSELY YIELD path AS p"}
{"prompt": "找出从'player100'到'team204'的所有路径，并返回这些路径。", "content": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"}
{"prompt": "找出从'player100'到'team204'的所有路径，并返回这些路径。", "content": "FIND ALL PATH FROM \"player100\" TO \"team204\" OVER * WHERE follow.degree is EMPTY or follow.degree >=0 YIELD path AS p"}
{"prompt": "找出从'player100'到'team204'的所有路径，并返回这些路径。", "content": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"}
{"prompt": "找出从'player100'到'team204'的所有路径，并返回这些路径。", "content": "FIND NOLOOP PATH FROM \"player100\" TO \"team204\" OVER * YIELD path AS p"}
{"prompt": "显示所有标签的配置信息。", "content": "PROFILE format=\"row\" SHOW TAGS"}
{"prompt": "显示查询结果的标签信息。", "content": "PROFILE format=\"row\" SHOW TAGS"}
{"prompt": "解释并以点格式显示标签。", "content": "EXPLAIN format=\"dot\" SHOW TAGS"}
{"prompt": "解释并以dot格式显示所有标签。", "content": "EXPLAIN format=\"dot\" SHOW TAGS"}
{"prompt": "终止会话ID为1625553545984255，计划ID为163的查询。", "content": "KILL QUERY(SESSION=1625553545984255,PLAN=163)"}
{"prompt": "终止会话ID为1625553545984255，计划ID为163的查询。", "content": "KILL QUERY(SESSION=1625553545984255,PLAN=163)"}
{"prompt": "提交任务以平衡数据。", "content": "SUBMIT JOB BALANCE DATA"}
{"prompt": "提交任务，平衡数据。", "content": "SUBMIT JOB BALANCE DATA"}
{"prompt": "提交紧凑型作业。", "content": "SUBMIT JOB COMPACT"}
{"prompt": "提交紧凑作业。", "content": "SUBMIT JOB COMPACT"}
{"prompt": "提交作业并刷新。", "content": "SUBMIT JOB FLUSH"}
{"prompt": "提交作业并刷新。", "content": "SUBMIT JOB FLUSH"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "提交任务，下载HDFS上的文件hdfs://192.168.10.100:9000/sst。", "content": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://192.168.10.100:9000/sst\""}
{"prompt": "提交一个任务，从HDFS下载文件'hdfs://192.168.10.100:9000/sst'。", "content": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://192.168.10.100:9000/sst\""}
{"prompt": "提交一个名为INGEST的作业。", "content": "SUBMIT JOB INGEST"}
{"prompt": "提交一个名为INGEST的任务。", "content": "SUBMIT JOB INGEST"}
{"prompt": "显示作业编号为9的作业信息。", "content": "SHOW JOB 9"}
{"prompt": "显示作业号为9的作业。", "content": "SHOW JOB 9"}
{"prompt": "展示所有的作业。", "content": "SHOW JOBS"}
{"prompt": "展示所有的作业。", "content": "SHOW JOBS"}
{"prompt": "停止作业编号为22的任务。", "content": "STOP JOB 22"}
{"prompt": "停止作业22。", "content": "STOP JOB 22"}
{"prompt": "恢复作业。", "content": "RECOVER JOB"}
{"prompt": "恢复作业。", "content": "RECOVER JOB"}
{"prompt": "显示主机。", "content": "SHOW HOSTS"}
{"prompt": "展示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "显示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "显示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "显示存储的主机。", "content": "SHOW HOSTS storage"}
{"prompt": "显示存储的主机。", "content": "SHOW HOSTS storage"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "使用<space_name>空间。", "content": "USE <space_name"}
{"prompt": "使用 <space_name> 空间。", "content": "USE <space_name"}
{"prompt": "展示所有的部分。", "content": "SHOW PARTS"}
{"prompt": "显示所有分区。", "content": "SHOW PARTS"}
{"prompt": "提交作业统计数据。", "content": "SUBMIT JOB STATS"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "展示统计信息。", "content": "SHOW STATS"}
{"prompt": "展示统计信息。", "content": "SHOW STATS"}
{"prompt": "返回前5个节点。", "content": "MATCH (v) RETURN v LIMIT 5"}
{"prompt": "返回前5个节点。", "content": "MATCH (v) RETURN v LIMIT 5"}
{"prompt": "显示主机列表。", "content": "SHOW HOSTS"}
{"prompt": "展示所有主机的信息。", "content": "SHOW HOSTS"}
{"prompt": "显示存储的主机。", "content": "SHOW HOSTS storage"}
{"prompt": "显示存储的主机。", "content": "SHOW HOSTS storage"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "展示所有的空间。", "content": "SHOW SPACES"}
{"prompt": "使用<space_name>空间。", "content": "USE <space_name"}
{"prompt": "使用<space_name>空间。", "content": "USE <space_name"}
{"prompt": "展示所有的部分。", "content": "SHOW PARTS"}
{"prompt": "展示所有的部分。", "content": "SHOW PARTS"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "提交作业统计数据。", "content": "SUBMIT JOB STATS"}
{"prompt": "展示统计信息。", "content": "SHOW STATS"}
{"prompt": "展示统计信息。", "content": "SHOW STATS"}
{"prompt": "返回前5个实体。", "content": "MATCH (v) RETURN v LIMIT 5"}
{"prompt": "返回前5个节点。", "content": "MATCH (v) RETURN v LIMIT 5"}
{"prompt": "创建一个名为user1的用户，密码为'nebula'。", "content": "CREATE USER user1 WITH PASSWORD'nebula'"}
{"prompt": "创建一个名为user1的用户，密码为'nebula'。", "content": "CREATE USER user1 WITH PASSWORD'nebula'"}
{"prompt": "显示所有用户。", "content": "SHOW USERS"}
{"prompt": "显示所有用户。", "content": "SHOW USERS"}
{"prompt": "创建一个名为user2的用户，密码为'nebula'，IP白名单为192.168.10.10和192.168.10.12。", "content": "CREATE USER user2 WITH PASSWORD'nebula'WITH IP WHITELIST 192.168.10.10,192.168.10.12"}
{"prompt": "创建一个名为user2的用户，密码为'nebula'，IP白名单为192.168.10.10和192.168.10.12。", "content": "CREATE USER user2 WITH PASSWORD'nebula'WITH IP WHITELIST 192.168.10.10,192.168.10.12"}
{"prompt": "展示所有用户。", "content": "SHOW USERS"}
{"prompt": "展示所有用户。", "content": "SHOW USERS"}
{"prompt": "将basketballplayer角色授予user1用户。", "content": "GRANT ROLE USER ON basketballplayer TO user1"}
{"prompt": "将basketballplayer角色授予user1。", "content": "GRANT ROLE USER ON basketballplayer TO user1"}
{"prompt": "撤销用户1在篮球运动员角色上的权限。", "content": "REVOKE ROLE USER ON basketballplayer FROM user1"}
{"prompt": "撤销用户user1在basketballplayer角色上的权限。", "content": "REVOKE ROLE USER ON basketballplayer FROM user1"}
{"prompt": "描述用户user1。", "content": "DESCRIBE USER user1"}
{"prompt": "描述用户user1。", "content": "DESCRIBE USER user1"}
{"prompt": "显示 basketballplayer 图空间中的所有角色。", "content": "SHOW ROLES IN basketballplayer"}
{"prompt": "显示图空间basketballplayer中的所有角色。", "content": "SHOW ROLES IN basketballplayer"}
{"prompt": "将用户user1的密码从'nebula'更改为'nebula123'。", "content": "CHANGE PASSWORD user1 FROM'nebula'TO'nebula123'"}
{"prompt": "将用户user1的密码从'nebula'修改为'nebula123'。", "content": "CHANGE PASSWORD user1 FROM'nebula'TO'nebula123'"}
{"prompt": "将user2的密码修改为'nebula'。", "content": "ALTER USER user2 WITH PASSWORD'nebula'"}
{"prompt": "将用户user2的密码修改为'nebula'。", "content": "ALTER USER user2 WITH PASSWORD'nebula'"}
{"prompt": "显示所有用户。", "content": "SHOW USERS"}
{"prompt": "展示所有用户。", "content": "SHOW USERS"}
{"prompt": "将用户user2的密码更改为'nebula'，并将其IP地址白名单设置为192.168.10.10。", "content": "ALTER USER user2 WITH PASSWORD'nebula'WITH IP WHITELIST 192.168.10.10"}
{"prompt": "将用户user2的密码修改为'nebula'，并将其IP地址白名单设置为192.168.10.10。", "content": "ALTER USER user2 WITH PASSWORD'nebula'WITH IP WHITELIST 192.168.10.10"}
{"prompt": "删除用户user1。", "content": "DROP USER user1"}
{"prompt": "删除用户user1。", "content": "DROP USER user1"}
{"prompt": "显示所有用户。", "content": "SHOW USERS"}
{"prompt": "展示所有用户。", "content": "SHOW USERS"}
{"prompt": "创建一个名为test的用户，密码为'nebula'。", "content": "CREATE USER test WITH PASSWORD'nebula'"}
{"prompt": "创建一个名为test的用户，密码为'nebula'。", "content": "CREATE USER test WITH PASSWORD'nebula'"}
{"prompt": "将'basketballplayer'角色授予'test'用户。", "content": "GRANT ROLE BASIC ON basketballplayer TO test"}
{"prompt": "将基本角色授予test用户，角色名称为basketballplayer。", "content": "GRANT ROLE BASIC ON basketballplayer TO test"}
{"prompt": "使用basketballplayer图空间。", "content": "use basketballplayer"}
{"prompt": "使用篮球球员图空间。", "content": "use basketballplayer"}
{"prompt": "授予test用户对player标签的读写权限，以及对follow和serve边的读写权限。", "content": "GRANT READ, WRITE TAG player EDGE follow, serve TO test"}
{"prompt": "授予test用户对player标签和follow、serve边的读写权限。", "content": "GRANT READ, WRITE TAG player EDGE follow, serve TO test"}
{"prompt": "显示test用户的授权信息。", "content": "> SHOW GRANTS test"}
{"prompt": "显示用户test的授权信息。", "content": "> SHOW GRANTS test"}
{"prompt": "撤销test用户对所有边的读写权限。", "content": "REVOKE READ,WRITE EDGE * FROM test"}
{"prompt": "撤销用户test对所有边的读写权限。", "content": "REVOKE READ,WRITE EDGE * FROM test"}
{"prompt": "显示 test 数据库的授权信息。", "content": "SHOW GRANTS test"}
{"prompt": "显示test数据库的授权信息。", "content": "SHOW GRANTS test"}
{"prompt": "找出所有与球员节点有'喜欢'关系的实体，并返回这些实体。", "content": "MATCH (v:player)-[:likex]-() RETURN v"}
{"prompt": "找出所有与球员节点有'喜欢'关系的实体，并返回这些实体的属性。", "content": "MATCH (v:player)-[:likex]-() RETURN v"}
{"prompt": "创建一个名为test2的用户，密码为空。", "content": "CREATE USER test2 WITH PASSWORD''"}
{"prompt": "创建一个名为test2的用户，密码为空。", "content": "CREATE USER test2 WITH PASSWORD''"}
{"prompt": "将空间'basketballplayer'的管理权限授予'test2'用户。", "content": "GRANT ROLE ADMIN ON basketballplayer TO test2"}
{"prompt": "将管理员角色授予test2用户，图空间为basketballplayer。", "content": "GRANT ROLE ADMIN ON basketballplayer TO test2"}
{"prompt": "展示主机代理。", "content": "SHOW HOSTS AGENT"}
{"prompt": "显示主机代理信息。", "content": "SHOW HOSTS AGENT"}
{"prompt": "显示所有主机的代理信息。", "content": "SHOW HOSTS AGENT"}
{"prompt": "显示主机代理。", "content": "SHOW HOSTS AGENT"}
{"prompt": "创建一个快照。", "content": "CREATE SNAPSHOT"}
{"prompt": "创建快照。", "content": "CREATE SNAPSHOT"}
{"prompt": "展示快照。", "content": "SHOW SNAPSHOTS"}
{"prompt": "展示快照。", "content": "SHOW SNAPSHOTS"}
{"prompt": "删除快照SNAPSHOT_2021_03_09_08_43_12。", "content": "DROP SNAPSHOT SNAPSHOT_2021_03_09_08_43_12"}
{"prompt": "删除快照SNAPSHOT_2021_03_09_08_43_12。", "content": "DROP SNAPSHOT SNAPSHOT_2021_03_09_08_43_12"}
{"prompt": "显示快照。", "content": "SHOW SNAPSHOTS"}
{"prompt": "显示快照。", "content": "SHOW SNAPSHOTS"}
{"prompt": "添加主机 192.168.10.101:9779。", "content": "ADD HOSTS 192.168.10.101:9779"}
{"prompt": "添加主机192.168.10.101:9779。", "content": "ADD HOSTS 192.168.10.101:9779"}
{"prompt": "展示主机存储。", "content": "SHOW HOSTS STORAGE"}
{"prompt": "展示存储的主机。", "content": "SHOW HOSTS STORAGE"}
{"prompt": "显示主机存储监听器列表。", "content": "SHOW HOSTS STORAGE LISTENER"}
{"prompt": "显示主机存储监听器列表。", "content": "SHOW HOSTS STORAGE LISTENER"}
{"prompt": "显示主机的元数据监听器列表。", "content": "SHOW HOSTS META LISTENER"}
{"prompt": "显示主机的元数据监听器列表。", "content": "SHOW HOSTS META LISTENER"}
{"prompt": "添加主机192.168.10.102:9779。", "content": "ADD HOSTS 192.168.10.102:9779"}
{"prompt": "添加主机192.168.10.102:9779。", "content": "ADD HOSTS 192.168.10.102:9779"}
{"prompt": "显示存储的主机信息。", "content": "SHOW HOSTS STORAGE"}
{"prompt": "显示存储的主机。", "content": "SHOW HOSTS STORAGE"}
{"prompt": "显示所有的Drainer主机。", "content": "SHOW HOSTS DRAINER"}
{"prompt": "显示所有的Drainer主机。", "content": "SHOW HOSTS DRAINER"}
{"prompt": "创建一个名为basketballplayer的空间，分区数为15，副本因子为1，实体ID类型为固定长度为30的字符串。", "content": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "创建一个名为basketballplayer的空间，分区数为15，副本因子为1，实体ID类型为固定长度字符串（长度为30）。", "content": "CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "使用空间basketballplayer。", "content": "USE basketballplayer"}
{"prompt": "使用basketballplayer图空间。", "content": "USE basketballplayer"}
{"prompt": "显示所有的Drainer客户端。", "content": "SHOW DRAINER CLIENTS"}
{"prompt": "显示所有的Drainer客户端。", "content": "SHOW DRAINER CLIENTS"}
{"prompt": "将192.168.10.103:9569作为监听器同步元数据，将192.168.10.103:9789作为存储添加到replication_basketballplayer空间。", "content": "ADD LISTENER SYNC META 192.168.10.103:9569 STORAGE 192.168.10.103:9789 TO SPACE replication_basketballplayer"}
{"prompt": "将192.168.10.103:9569作为监听器同步元数据，将192.168.10.103:9789作为存储添加到空间replication_basketballplayer。", "content": "ADD LISTENER SYNC META 192.168.10.103:9569 STORAGE 192.168.10.103:9789 TO SPACE replication_basketballplayer"}
{"prompt": "显示同步监听器。", "content": "SHOW LISTENER SYNC"}
{"prompt": "显示同步的监听器。", "content": "SHOW LISTENER SYNC"}
{"prompt": "创建一个名为replication_basketballplayer的空间，该空间包含15个分区，复制因子为1，实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE replication_basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "创建一个名为replication_basketballplayer的空间，该空间有15个分区，副本因子为1，实体ID类型为固定长度为30的字符串。", "content": "CREATE SPACE replication_basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(30))"}
{"prompt": "使用 replication_basketballplayer 图空间。", "content": "USE replication_basketballplayer"}
{"prompt": "使用 replication_basketballplayer 图空间。", "content": "USE replication_basketballplayer"}
{"prompt": "添加一个数据接收器，地址为192.168.10.104:9889。", "content": "ADD DRAINER 192.168.10.104:9889"}
{"prompt": "添加一个数据接收器，地址为192.168.10.104:9889。", "content": "ADD DRAINER 192.168.10.104:9889"}
{"prompt": "显示所有的下游节点。", "content": "SHOW DRAINERS"}
{"prompt": "显示所有的消费者。", "content": "SHOW DRAINERS"}
{"prompt": "设置变量read_only为true。", "content": "SET VARIABLES read_only=true"}
{"prompt": "将变量 read_only 设置为 true。", "content": "SET VARIABLES read_only=true"}
{"prompt": "获取只读变量。", "content": "GET VARIABLES read_only"}
{"prompt": "获取只读变量。", "content": "GET VARIABLES read_only"}
{"prompt": "使用图空间basketballplayer。", "content": "USE basketballplayer"}
{"prompt": "使用basketballplayer图空间。", "content": "USE basketballplayer"}
{"prompt": "创建一个名为player的标签，包含姓名和年龄两个属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为player的标签，包含姓名和年龄两个属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一条带有度属性的follow边。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条名为follow的边，该边具有一个名为degree的属性。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "插入一个姓名为'Tim Duncan'，id为'player100'，年龄为42岁的球员。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个id为'player100'的球员，其姓名为'Tim Duncan'，年龄为 42。", "content": "INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42)"}
{"prompt": "插入一个id为'player101'，名为'Tony Parker'，年龄为36的球员实体。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "插入一个id为'player101'，名为'Tony Parker'且年龄为 36 的选手实体。", "content": "INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36)"}
{"prompt": "将实体'player101'关注实体'player100'，并设置关注度为95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "将'player101'关注'player100'，关注度为95。", "content": "INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95)"}
{"prompt": "使用 replication_basketballplayer 图空间。", "content": "USE replication_basketballplayer"}
{"prompt": "使用图空间replication_basketballplayer。", "content": "USE replication_basketballplayer"}
{"prompt": "提交作业统计信息。", "content": "SUBMIT JOB STATS"}
{"prompt": "提交作业统计数据。", "content": "SUBMIT JOB STATS"}
{"prompt": "展示统计信息。", "content": "SHOW STATS"}
{"prompt": "展示统计信息。", "content": "SHOW STATS"}
{"prompt": "获取'player100'的所有属性并返回。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "获取'player100'球员的所有属性。", "content": "FETCH PROP ON player \"player100\" YIELD properties(vertex)"}
{"prompt": "找出'player101'所'关注'的所有实体，并返回这些实体的边的目标节点。", "content": "GO FROM \"player101\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player101'关注的所有实体，并返回这些实体的边的目标节点。", "content": "GO FROM \"player101\" OVER follow YIELD dst(edge)"}
{"prompt": "插入一个id为'player102'的球员，其姓名为'LaMarcus Aldridge'，年龄为 33。", "content": "INSERT VERTEX player(name,age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入一个id为'player102'，名为'LaMarcus Aldridge'，年龄为33岁的球员实体。", "content": "INSERT VERTEX player(name,age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入一个名为LaMarcus Aldridge，年龄为33的球员实体，其ID为player102。", "content": "INSERT VERTEX player(name,age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入一个id为'player102'，名为LaMarcus Aldridge，年龄为33岁的球员实体。", "content": "INSERT VERTEX player(name,age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33)"}
{"prompt": "插入一个名为'Rudy Gay'，年龄为32的球员实体，其ID为'player103'。", "content": "INSERT VERTEX player(name,age) VALUES \"player103\":(\"Rudy Gay\", 32)"}
{"prompt": "插入一个ID为'player103'，名为'Rudy Gay'，年龄为32的球员实体。", "content": "INSERT VERTEX player(name,age) VALUES \"player103\":(\"Rudy Gay\", 32)"}
{"prompt": "插入一个名为'Marco Belinelli'，年龄为32的球员实体，其id为'player104'。", "content": "INSERT VERTEX player(name,age) VALUES \"player104\":(\"Marco Belinelli\", 32)"}
{"prompt": "插入一个唯一标识符为'player104'，名为'Marco Belinelli'，年龄为32岁的球员实体。", "content": "INSERT VERTEX player(name,age) VALUES \"player104\":(\"Marco Belinelli\", 32)"}
{"prompt": "显示同步状态。", "content": "SHOW SYNC STATUS"}
{"prompt": "显示同步状态。", "content": "SHOW SYNC STATUS"}
{"prompt": "显示数据接收器同步状态。", "content": "SHOW DRAINER SYNC STATUS"}
{"prompt": "显示流数据接收器的同步状态。", "content": "SHOW DRAINER SYNC STATUS"}
{"prompt": "将变量read_only设置为true。", "content": "SET VARIABLES read_only=true"}
{"prompt": "设置变量read_only为true。", "content": "SET VARIABLES read_only=true"}
{"prompt": "设置变量read_only为false。", "content": "SET VARIABLES read_only=false"}
{"prompt": "设置read_only变量为false。", "content": "SET VARIABLES read_only=false"}
{"prompt": "移除DRAINER。", "content": "REMOVE DRAINER"}
{"prompt": "移除DRAINER。", "content": "REMOVE DRAINER"}
{"prompt": "退出Drainer服务。", "content": "SIGN OUT DRAINER SERVICE"}
{"prompt": "退出Drainer服务。", "content": "SIGN OUT DRAINER SERVICE"}
{"prompt": "移除同步监听器。", "content": "REMOVE LISTENER SYNC"}
{"prompt": "移除同步监听器。", "content": "REMOVE LISTENER SYNC"}
{"prompt": "添加一个数据接收器，地址为192.168.10.106:9889。", "content": "ADD DRAINER 192.168.10.106:9889"}
{"prompt": "添加一个数据接收器，地址为192.168.10.106:9889。", "content": "ADD DRAINER 192.168.10.106:9889"}
{"prompt": "将变量read_only设置为true。", "content": "SET VARIABLES read_only=true"}
{"prompt": "设置变量read_only为true。", "content": "SET VARIABLES read_only=true"}
{"prompt": "使用Drainer服务（192.168.10.106:9889）进行登录。", "content": "SIGN IN DRAINER SERVICE(192.168.10.106:9889)"}
{"prompt": "登录到Drainer服务(192.168.10.106:9889)。", "content": "SIGN IN DRAINER SERVICE(192.168.10.106:9889)"}
{"prompt": "将监听器添加到空间basketballplayer，同步元数据到192.168.10.105:9569，存储到192.168.10.105:9789。", "content": "ADD LISTENER SYNC META 192.168.10.105:9569 STORAGE 192.168.10.105:9789 TO SPACE basketballplayer"}
{"prompt": "将监听器添加到空间basketballplayer中，同步元数据和存储服务器的IP地址为192.168.10.105:9569和192.168.10.105:9789。", "content": "ADD LISTENER SYNC META 192.168.10.105:9569 STORAGE 192.168.10.105:9789 TO SPACE basketballplayer"}
{"prompt": "使用<your_graph_space>图空间。", "content": "USE <your_graph_space>"}
{"prompt": "使用<your_graph_space>图空间。", "content": "USE <your_graph_space>"}
{"prompt": "提交一个压缩任务。", "content": "SUBMIT JOB COMPACT"}
{"prompt": "提交一个压缩任务。", "content": "SUBMIT JOB COMPACT"}
{"prompt": "展示作业 <job_id> 的信息。", "content": "SHOW JOB <job_id>"}
{"prompt": "展示指定的作业 <job_id>。", "content": "SHOW JOB <job_id>"}
{"prompt": "平衡数据。", "content": "BALANCE DATA"}
{"prompt": "平衡数据。", "content": "BALANCE DATA"}
{"prompt": "展示作业号为25的作业信息。", "content": "SHOW JOB 25"}
{"prompt": "展示任务25的信息。", "content": "SHOW JOB 25"}
{"prompt": "展示所有的主机。", "content": "SHOW HOSTS"}
{"prompt": "展示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "从数据中心移除IP地址为192.168.8.100的服务器。", "content": "BALANCE DATA REMOVE 192.168.8.100:9779"}
{"prompt": "从数据中心移除IP地址为192.168.8.100的节点。", "content": "BALANCE DATA REMOVE 192.168.8.100:9779"}
{"prompt": "显示主机列表。", "content": "SHOW HOSTS"}
{"prompt": "显示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "平衡Leader节点。", "content": "BALANCE LEADER"}
{"prompt": "平衡领导者节点。", "content": "BALANCE LEADER"}
{"prompt": "展示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "展示所有主机。", "content": "SHOW HOSTS"}
{"prompt": "如果边不存在，则创建一个名为temp的边，该边具有一个整数属性tmp。", "content": "CREATE EDGE IF NOT EXISTS temp(tmp int)"}
{"prompt": "如果不存在，创建一个名为temp的边类型，边属性为tmp，属性类型为int。", "content": "CREATE EDGE IF NOT EXISTS temp(tmp int)"}
{"prompt": "将实体player100与自身相连，边类型为temp，边属性tmp为1，权重为1", "content": "INSERT EDGE temp(tmp) VALUES \"player100\"->\"player100\"@1:(1)"}
{"prompt": "在边集合temp中插入一条边，起点和终点都是'player100'，边属性tmp为1，权重为1。", "content": "INSERT EDGE temp(tmp) VALUES \"player100\"->\"player100\"@1:(1)"}
{"prompt": "在边集合temp中插入一条边，起点和终点都是\"player100\"，边的属性tmp为2，权重为2。", "content": "INSERT EDGE temp(tmp) VALUES \"player100\"->\"player100\"@2:(2)"}
{"prompt": "将实体player100与自身相连，边类型为temp，边属性tmp为2，权重为2。", "content": "INSERT EDGE temp(tmp) VALUES \"player100\"->\"player100\"@2:(2)"}
{"prompt": "找出以'player100'为起点，沿着'temp'关系的边的属性，并返回属性中的'tmp'值。", "content": "GO FROM \"player100\" OVER temp YIELD properties(edge).tmp"}
{"prompt": "找出'player100'经过'temp'边关系的所有实体，并返回这些实体的'tmp'属性。", "content": "GO FROM \"player100\" OVER temp YIELD properties(edge).tmp"}
{"prompt": "找出所有与'player'节点通过'temp'关系相连的边，并返回这些边的'tmp'属性值的集合。", "content": "MATCH (v1:player)-[e:temp]->() return collect(e.tmp)"}
{"prompt": "找出所有与节点v1有关系为temp的边e，并返回这些边的tmp属性的集合。", "content": "MATCH (v1:player)-[e:temp]->() return collect(e.tmp)"}
{"prompt": "如果边e1不存在，则创建一条边，边的属性包括名称和年龄。", "content": "CREATE EDGE IF NOT EXISTS e1 (name string, age int)"}
{"prompt": "如果边e1不存在，则创建一条边，该边包含名称和年龄属性。", "content": "CREATE EDGE IF NOT EXISTS e1 (name string, age int)"}
{"prompt": "插入一条边e1，连接节点11和节点13，边的属性为name为'n1'，age为1。", "content": "INSERT EDGE e1 (name, age) VALUES \"11\"->\"13\":(\"n1\", 1)"}
{"prompt": "插入一条边e1，从顶点11指向顶点13，属性为name为'n1'，age为1。", "content": "INSERT EDGE e1 (name, age) VALUES \"11\"->\"13\":(\"n1\", 1)"}
{"prompt": "找出ID为'11'的实体所关联的边的属性，并返回这些属性。", "content": "GO FROM \"11\" over e1 YIELD properties(edge)"}
{"prompt": "找出ID为'11'的实体所连接的边的属性。", "content": "GO FROM \"11\" over e1 YIELD properties(edge)"}
{"prompt": "查找e1上的所有边，并返回这些边。", "content": "LOOKUP ON e1 YIELD EDGE AS r"}
{"prompt": "返回e1类型的所有边。", "content": "LOOKUP ON e1 YIELD EDGE AS r"}
{"prompt": "找出所有存在类型为'e1'的关系，并返回这些关系，最多返回100个。", "content": "MATCH ()-[e:e1]->() RETURN e LIMIT 100"}
{"prompt": "找出所有存在类型为'e1'的关系，并最多返回100个这些关系，。", "content": "MATCH ()-[e:e1]->() RETURN e LIMIT 100"}
{"prompt": "将参数 <param_name> 的值设置为 <param_value>。", "content": ":param <param_name> => <param_value>"}
{"prompt": "将参数 <param_name> 设置为 <param_value>。", "content": ":param <param_name> => <param_value>"}
{"prompt": "找出'Tim Duncan'所'喜欢'的所有实体，并返回这些实体的 ID。", "content": ":param p1 => \"Tim Duncan\""}
{"prompt": "找出'Tim Duncan'所'喜欢'的所有实体，并返回这些实体的 ID。", "content": ":param p1 => \"Tim Duncan\""}
{"prompt": "找出名为$p1的球员所关注的所有实体，并返回这些实体的关系和属性。", "content": "MATCH (v:player{name:$p1})-[:follow]->(n) RETURN v,n"}
{"prompt": "找出名为$p1的球员所关注的所有实体，并返回这些球员和实体的关系。", "content": "MATCH (v:player{name:$p1})-[:follow]->(n) RETURN v,n"}
{"prompt": "给定参数p2，其中包含三个属性a、b和c，分别为3、false和\"Tim Duncan\"，", "content": ":param p2 => {\"a\":3,\"b\":false,\"c\":\"Tim Duncan\"}"}
{"prompt": "将参数p2中的属性值3、false和\"Tim Duncan\"分别赋值给属性a、b和c。", "content": ":param p2 => {\"a\":3,\"b\":false,\"c\":\"Tim Duncan\"}"}
{"prompt": "返回变量$p2的属性b的值。", "content": "RETURN $p2.b AS b"}
{"prompt": "返回$p2的属性b。", "content": "RETURN $p2.b AS b"}
{"prompt": "返回params的值。", "content": ":params"}
{"prompt": "返回参数params的值。", "content": ":params"}
{"prompt": "使用参数 <param_name>。", "content": ":params <param_name>"}
{"prompt": "使用参数 <param_name>。", "content": ":params <param_name>"}
{"prompt": "使用参数 <param_name>，", "content": ":param <param_name> =>"}
{"prompt": "使用参数 <param_name>，", "content": ":param <param_name> =>"}
{"prompt": "将结果以CSV格式导出到文件名为file_name.csv的文件中。", "content": ":CSV <file_name.csv>"}
{"prompt": "将查询结果导出为CSV文件。", "content": ":CSV <file_name.csv>"}
{"prompt": "将查询结果以dot格式导出到文件名为file_name.dot的文件中。", "content": ":dot <file_name.dot>"}
{"prompt": "生成一个名为file_name.dot的dot文件。", "content": ":dot <file_name.dot>"}
{"prompt": "生成一个名为a.dot的图形文件。", "content": ":dot a.dot"}
{"prompt": "生成一个名为a.dot的图形文件。", "content": ":dot a.dot"}
{"prompt": "找出以 \"player100\" 为起点，沿着 \"follow\" 关系进行遍历的所有实体，并以dot格式进行可视化展示。", "content": "PROFILE FORMAT=\"dot\" GO FROM \"player100\" OVER follow"}
{"prompt": "找出以 \"player100\" 为起点，沿着 \"follow\" 关系边遍历的所有实体，并以dot格式输出其遍历路径。", "content": "PROFILE FORMAT=\"dot\" GO FROM \"player100\" OVER follow"}
{"prompt": "查看文件名为<file_name>的个人资料。", "content": ":profile <file_name>"}
{"prompt": "查看文件名为<file_name>的个人资料。", "content": ":profile <file_name>"}
{"prompt": "解释查询计划并返回文件名。", "content": ":explain <file_name>"}
{"prompt": "解释给定的文件名。", "content": ":explain <file_name>"}
{"prompt": "查看日志文件的配置信息。", "content": ":profile profile.lo"}
{"prompt": "查看个人资料日志。", "content": ":profile profile.lo"}
{"prompt": "找出'player102'所'服务'的所有实体，并返回这些实体的边的目标节点", "content": "PROFILE GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "找出'player102'所'服务'的所有实体，并返回这些实体的边的目标节点", "content": "PROFILE GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "找出'player102'所'服务'的所有实体，并返回这些实体的边的目标顶点", "content": "PROFILE FORMAT=\"dot\" GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "找出'player102'所'服务'的所有边的目标顶点，并返回这些目标顶点的边", "content": "PROFILE FORMAT=\"dot\" GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "生成一份解释日志文件，用于解释执行ngql语句的过程。", "content": ":explain explain.lo"}
{"prompt": "解释并记录执行计划，将结果输出到explain.log文件中。", "content": ":explain explain.lo"}
{"prompt": "找出以'player102'为起点，通过边类型'serve'进行关联的所有实体，并返回这些实体的目标节点。", "content": "EXPLAIN GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "找出以'player102'为起点，通过'serve'关系连接的所有实体，并返回这些实体的边的目标节点。", "content": "EXPLAIN GO FROM \"player102\" OVER serve YIELD dst(edge)"}
{"prompt": "播放篮球运动员。", "content": ":play basketballplayer"}
{"prompt": "播放篮球运动员。", "content": ":play basketballplayer"}
{"prompt": "重复执行N次。", "content": ":repeat N"}
{"prompt": "重复执行N次。", "content": ":repeat N"}
{"prompt": "重复执行3次。", "content": ":repeat 3"}
{"prompt": "重复执行3次。", "content": ":repeat 3"}
{"prompt": "找出'player100'所'关注'的所有实体，并返回这些实体的边的目标节点", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge)"}
{"prompt": "找出'player100'关注的所有实体，并返回这些实体的边的目标节点", "content": "GO FROM \"player100\" OVER follow YIELD dst(edge)"}
{"prompt": "暂停 N 秒。", "content": ":sleep N"}
{"prompt": "等待N秒钟。", "content": ":sleep N"}
{"prompt": "退出当前操作。", "content": ":QUIT"}
{"prompt": "退出当前会话。", "content": ":QUIT"}
{"prompt": "创建一个名为basketballplayer的空间，该空间包含10个分区，每个分区的副本因子为1，实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"}
{"prompt": "创建一个名为basketballplayer的空间，该空间分为10个分区，每个分区有1个副本，实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"}
{"prompt": "使用篮球运动员数据库。", "content": "USE basketballplayer"}
{"prompt": "使用basketballplayer数据库。", "content": "USE basketballplayer"}
{"prompt": "创建一个名为player的标签，包含姓名和年龄两个属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为player的标签，包含姓名和年龄两个属性。", "content": "CREATE TAG player(name string, age int)"}
{"prompt": "创建一个名为team的标签，标签包含一个名为name的字符串属性。", "content": "CREATE TAG team(name string)"}
{"prompt": "创建一个名为team的标签，其中包含一个名为name的字符串属性。", "content": "CREATE TAG team(name string)"}
{"prompt": "创建一条名为follow的边，该边具有一个名为degree的属性。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条边follow，包含一个整数属性degree。", "content": "CREATE EDGE follow(degree int)"}
{"prompt": "创建一条边，表示服务的开始年份和结束年份。", "content": "CREATE EDGE serve(start_year int, end_year int)"}
{"prompt": "创建一条边，表示服务关系，包括开始年份和结束年份。", "content": "CREATE EDGE serve(start_year int, end_year int)"}
{"prompt": "创建一个名为basketballplayer的空间，该空间包含10个分区，每个分区有1个副本，实体ID类型为30个固定长度的字符串。", "content": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"}
{"prompt": "创建一个名为basketballplayer的空间，该空间有10个分区，每个分区有1个副本，并且实体的ID类型为固定长度为30的字符串。", "content": "CREATE SPACE basketballplayer\n(partition_num = 10,\nreplica_factor = 1,\nvid_type = FIXED_STRING(30))"}
{"prompt": "提交一个作业，从HDFS下载指定路径下的文件。", "content": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://<hadoop_address>:<hadoop_port>/<sst_file_path>\""}
{"prompt": "提交一个任务，将HDFS中的文件下载到本地。", "content": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://<hadoop_address>:<hadoop_port>/<sst_file_path>\""}
{"prompt": "提交一个任务，从HDFS下载文件'hdfs://*.*.*.*:9000/sst'。", "content": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://*.*.*.*:9000/sst\""}
{"prompt": "提交一个作业，从HDFS下载文件。", "content": "SUBMIT JOB DOWNLOAD HDFS \"hdfs://*.*.*.*:9000/sst\""}
{"prompt": "提交一个名为INGEST的作业。", "content": "SUBMIT JOB INGEST"}
{"prompt": "提交一个名为INGEST的任务。", "content": "SUBMIT JOB INGEST"}